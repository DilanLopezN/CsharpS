<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#

const string inputFile = @"..\FundacaoFisk.SGF.GenericDataAccess\DataAccess\SGFWebModel.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
var itemCollection = loader.CreateEdmItemCollection(inputFile);
var modelNamespace = loader.GetModelNamespace(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return string.Empty;
}
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#

var codeNamespace = code.VsNamespaceSuggestion();
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#
    PushIndent("    ");
}

#>
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data.Linq.Mapping;
using System.Reflection;
using System.Transactions;
using Componentes.GenericModel;
using System.Linq;
using System.Collections;

<#
if (container.FunctionImports.Any())
{
#>
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;
<#
}
#>

<#=Accessibility.ForType(container)#> partial class <#=code.Escape(container)#> : DbContext
{
	public Hashtable LISTA_ORIGEM_LOGS = new Hashtable();
    public <#=code.Escape(container)#>()
        : base("name=<#=container.Name#>")
    {
<#
if (!loader.IsLazyLoadingEnabled(container))
{
#>
        this.Configuration.LazyLoadingEnabled = false;
		this.Configuration.ProxyCreationEnabled = false;
		populaListaOrigem();
<#
}
#>
    }

	private void populaListaOrigem() {
        if(LISTA_ORIGEM_LOGS.Count <= 0) {
            LISTA_ORIGEM_LOGS.Add("TipoLog", Byte.Parse("0"));
    		LISTA_ORIGEM_LOGS.Add("SysDireitoUsuario", Byte.Parse("1"));
    		LISTA_ORIGEM_LOGS.Add("SysDireitoGrupo", Byte.Parse("2"));
    		LISTA_ORIGEM_LOGS.Add("SysGrupo", Byte.Parse("3"));
    		LISTA_ORIGEM_LOGS.Add("UsuarioWeb", Byte.Parse("4"));
    		LISTA_ORIGEM_LOGS.Add("UsuarioWebSGF", Byte.Parse("4"));
    		LISTA_ORIGEM_LOGS.Add("Pessoa", Byte.Parse("5"));
    		LISTA_ORIGEM_LOGS.Add("PessoaFisica", Byte.Parse("6"));
    		LISTA_ORIGEM_LOGS.Add("PessoaJuridica", Byte.Parse("7"));
    		LISTA_ORIGEM_LOGS.Add("Endereco", Byte.Parse("8"));
    		LISTA_ORIGEM_LOGS.Add("Telefone", Byte.Parse("9"));
    		LISTA_ORIGEM_LOGS.Add("PessoaSGF", Byte.Parse("5"));
    		LISTA_ORIGEM_LOGS.Add("PessoaFisicaSGF", Byte.Parse("6"));
    		LISTA_ORIGEM_LOGS.Add("PessoaJuridicaSGF", Byte.Parse("7"));
    		LISTA_ORIGEM_LOGS.Add("EnderecoSGF", Byte.Parse("8"));
    		LISTA_ORIGEM_LOGS.Add("TelefoneSGF", Byte.Parse("9"));
    		LISTA_ORIGEM_LOGS.Add("Aluno", Byte.Parse("10"));
    		LISTA_ORIGEM_LOGS.Add("AlunoBolsa", Byte.Parse("11"));
    		LISTA_ORIGEM_LOGS.Add("AtividadeExtra", Byte.Parse("12"));
    		LISTA_ORIGEM_LOGS.Add("AlunoCurso", Byte.Parse("13"));
    		LISTA_ORIGEM_LOGS.Add("AlunoMotivoMatricula", Byte.Parse("14"));
    		LISTA_ORIGEM_LOGS.Add("AlunoMotivoNaoMatricula", Byte.Parse("15"));
    		LISTA_ORIGEM_LOGS.Add("Horario", Byte.Parse("16"));
    		LISTA_ORIGEM_LOGS.Add("TabelaPreco", Byte.Parse("17"));
    		LISTA_ORIGEM_LOGS.Add("Prospect", Byte.Parse("18"));
    		LISTA_ORIGEM_LOGS.Add("Turma", Byte.Parse("19"));
    		LISTA_ORIGEM_LOGS.Add("Professor", Byte.Parse("20"));
    		LISTA_ORIGEM_LOGS.Add("AvaliacaoTurma", Byte.Parse("21"));
    		LISTA_ORIGEM_LOGS.Add("Contrato", Byte.Parse("22"));
    		LISTA_ORIGEM_LOGS.Add("PlanoConta", Byte.Parse("23"));
    		LISTA_ORIGEM_LOGS.Add("Funcionario", Byte.Parse("24"));
            LISTA_ORIGEM_LOGS.Add("FuncionarioSGF", Byte.Parse("24"));
    		LISTA_ORIGEM_LOGS.Add("ProgramacaoTurma", Byte.Parse("25"));
    		LISTA_ORIGEM_LOGS.Add("Feriado", Byte.Parse("26"));
    		LISTA_ORIGEM_LOGS.Add("FeriadoDesconsiderado", Byte.Parse("27"));
            LISTA_ORIGEM_LOGS.Add("AlunoTurma", Byte.Parse("28"));
            LISTA_ORIGEM_LOGS.Add("ProfessorTurma", Byte.Parse("29"));
            LISTA_ORIGEM_LOGS.Add("HorarioProfessorTurma", Byte.Parse("30"));
    		LISTA_ORIGEM_LOGS.Add("Aditamento", Byte.Parse("31"));
    		LISTA_ORIGEM_LOGS.Add("Titulo", Byte.Parse("32"));
    		LISTA_ORIGEM_LOGS.Add("TaxaMatricula", Byte.Parse("33"));
    		LISTA_ORIGEM_LOGS.Add("Cheque", Byte.Parse("34"));
            LISTA_ORIGEM_LOGS.Add("DiarioAula", Byte.Parse("35"));
            LISTA_ORIGEM_LOGS.Add("Banco", Byte.Parse("36"));
            LISTA_ORIGEM_LOGS.Add("LocalMovto", Byte.Parse("37"));
            LISTA_ORIGEM_LOGS.Add("HistoricoAluno", Byte.Parse("38"));
    		LISTA_ORIGEM_LOGS.Add("BaixaTitulo", Byte.Parse("47"));
    		LISTA_ORIGEM_LOGS.Add("TransacaoFinanceira", Byte.Parse("129"));
    		LISTA_ORIGEM_LOGS.Add("Desistencia", Byte.Parse("57"));
    		LISTA_ORIGEM_LOGS.Add("PoliticaComercial", Byte.Parse("132"));
    		LISTA_ORIGEM_LOGS.Add("Emprestimo", Byte.Parse("48"));
    		LISTA_ORIGEM_LOGS.Add("Kardex", Byte.Parse("133"));
    		LISTA_ORIGEM_LOGS.Add("ItemEscola", Byte.Parse("74"));
    		LISTA_ORIGEM_LOGS.Add("ContaCorrente", Byte.Parse("52"));
    		LISTA_ORIGEM_LOGS.Add("Movimento", Byte.Parse("69"));
    		LISTA_ORIGEM_LOGS.Add("ItemMovimento", Byte.Parse("70"));			
    		LISTA_ORIGEM_LOGS.Add("ItemPolitica", Byte.Parse("134"));
    		LISTA_ORIGEM_LOGS.Add("Empresa", Byte.Parse("135"));
    		LISTA_ORIGEM_LOGS.Add("Escola", Byte.Parse("135"));
    		LISTA_ORIGEM_LOGS.Add("Parametro", Byte.Parse("136"));
    		LISTA_ORIGEM_LOGS.Add("Item", Byte.Parse("72"));
    		LISTA_ORIGEM_LOGS.Add("PoliticaDesconto", Byte.Parse("100"));
    		LISTA_ORIGEM_LOGS.Add("DiasPolitica", Byte.Parse("58"));
    		LISTA_ORIGEM_LOGS.Add("PoliticaAluno", Byte.Parse("99"));
    		LISTA_ORIGEM_LOGS.Add("PoliticaTurma", Byte.Parse("101"));
    		LISTA_ORIGEM_LOGS.Add("TipoDesconto", Byte.Parse("119"));
    		LISTA_ORIGEM_LOGS.Add("Fechamento", Byte.Parse("137"));
    		LISTA_ORIGEM_LOGS.Add("SaldoItem", Byte.Parse("138"));
    		LISTA_ORIGEM_LOGS.Add("Cnab", Byte.Parse("139"));
    		LISTA_ORIGEM_LOGS.Add("TituloCnab", Byte.Parse("140"));
    		LISTA_ORIGEM_LOGS.Add("TipoDescontoEscola", Byte.Parse("141"));
    		LISTA_ORIGEM_LOGS.Add("RetornoCNAB", Byte.Parse("142"));
    		LISTA_ORIGEM_LOGS.Add("TipoNotaFiscal", Byte.Parse("143"));
    		LISTA_ORIGEM_LOGS.Add("SubgrupoConta", Byte.Parse("114"));
    		LISTA_ORIGEM_LOGS.Add("AliquotaUF", Byte.Parse("144"));
    		LISTA_ORIGEM_LOGS.Add("DadosNF", Byte.Parse("145"));
    		LISTA_ORIGEM_LOGS.Add("ItemSubgrupo", Byte.Parse("146"));
    		LISTA_ORIGEM_LOGS.Add("ProgramacaoCurso", Byte.Parse("103"));
    		LISTA_ORIGEM_LOGS.Add("ItemProgramacao", Byte.Parse("75"));
			LISTA_ORIGEM_LOGS.Add("MalaDireta", Byte.Parse("148"));
            LISTA_ORIGEM_LOGS.Add("PerdaMaterial", Byte.Parse("149"));
    	}
    }

	public int? IdUsuario { get; set; }
	public int cd_empresa { get; set; }


    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

<#
    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
    <#=codeStringGenerator.DbSet(entitySet)#>
<#
    }

    foreach (var edmFunction in container.FunctionImports)
    {
        WriteFunctionImport(typeMapper, codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: false);
    }
#>
	
    public override int SaveChanges() {
        //LBM Em 17/05/2022 vai voltar a gravar log geral;
        if(IdUsuario != null)
            return SaveChanges(IdUsuario.Value, cd_empresa);
		else
			return base.SaveChanges();
    }

    public int SaveChanges(int userId, int cd_empresa) {
        List<DbEntityEntryComp> listaAuditoria = new List<DbEntityEntryComp>();
        foreach(var ent in this.ChangeTracker.Entries().Where(p => p.State == System.Data.Entity.EntityState.Added || p.State == System.Data.Entity.EntityState.Deleted || p.State == System.Data.Entity.EntityState.Modified)) {
            // For each changed record, get the audit record entries and add them
            DbEntityEntryComp dbEEC = new DbEntityEntryComp(ent, ent.State);
            listaAuditoria.Add(dbEEC);
        }
        List<LogGeral> LogGeralDifAdd = new List<LogGeral>();
        List<LogGeral> LogGeralDifModified = new List<LogGeral>();
        //Prepara as auditoria das entidades que são de modificação:
        //foreach(var ent in listaAuditoria)
        for (int i = listaAuditoria.Count - 1; i >= 0; i--)
        {
            DbEntityEntryComp ent = listaAuditoria[i];
            foreach (LogGeral x in this.GetAuditRecordsForChange(ent, userId, cd_empresa))
                if (!ent.OriginalStatus.Equals(System.Data.Entity.EntityState.Added))
                {
                    LogGeralDifAdd.Add(x);
                    listaAuditoria.Remove(ent);
                }
        }
        this.LogGeral.AddRange(LogGeralDifAdd);                
        // Chama o save changes para atualizar os identitys:
        //using (var transaction = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = IsolationLevel.Snapshot, Timeout = TimeSpan.FromSeconds(36000) })) {
    	    var retorno = base.SaveChanges();
                
    	//	((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 36000;
            // Prepara as auditorias das entidades que não são de modificação:
            foreach(var ent in listaAuditoria)
                foreach(LogGeral x in this.GetAuditRecordsForChange(ent, userId, cd_empresa))
                    if(!ent.OriginalStatus.Equals(System.Data.Entity.EntityState.Modified))
                        LogGeralDifModified.Add(x);
            this.LogGeral.AddRange(LogGeralDifModified);
            // Call the original SaveChanges(), which will save both the changes made and the audit records
            retorno += base.SaveChanges();
         //   transaction.Complete();
        
            return retorno;
        //}
    }

	public List<LogGeral> GetAuditRecordsForChange(DbEntityEntryComp dbEntryComp, int userId, int cd_empresa) {
        DbEntityEntry dbEntry = dbEntryComp.DbEntityEntry;
        List<LogGeral> result = new List<LogGeral>();
        DateTime changeTime = DateTime.UtcNow;
    
        // Get the Table() attribute, if one exists
        TableAttribute tableAttr = dbEntry.Entity.GetType().GetCustomAttributes(typeof(TableAttribute), false).SingleOrDefault() as TableAttribute;
        // Get table name (if it has a Table attribute, use that, otherwise get the pluralized name)
        string tableName = tableAttr != null ? tableAttr.Name : dbEntry.Entity.GetType().Name;
    
        byte? origem = (byte?) LISTA_ORIGEM_LOGS[tableName];
    
    
    	// Get primary key value (If you have more than one key column, this will need to be adjusted)
        string keyName = "";
        PropertyInfo property = dbEntry.Entity.GetType().GetProperties().SingleOrDefault(p => p.GetCustomAttributes(typeof(KeyAttribute), true).Count() > 0);
        
        if(property != null)
    		keyName = property.Name;
    			
    	int? cd_registro_pai = null;
        try {
            cd_registro_pai = Int32.Parse(dbEntry.CurrentValues.GetValue<object>(keyName).ToString());
        }
        catch(Exception e) { }
                        
        if(origem.HasValue) {
            LogGeral logGeral = null;
            if(dbEntryComp.OriginalStatus == System.Data.Entity.EntityState.Added) {
                // For Inserts, just add the whole record
                // If the entity implements IDescribableEntity, use the description from Describe(), otherwise use ToString()
                logGeral = new LogGeral() {
                    cd_usuario = userId,
                    dt_log_geral = changeTime,
                    cd_tipo_log = (int) FundacaoFisk.SGF.GenericModel.TipoLog.TipoLogEnum.INCLUSAO,
                    cd_origem = origem.Value,
    				cd_registro_pai = cd_registro_pai,
    				cd_pessoa_empresa = cd_empresa
    
                    /*RecordID = dbEntry.CurrentValues.GetValue<object>(keyName).ToString(),  // Again, adjust this if you have a multi-column key
                    NewValue = (dbEntry.CurrentValues.ToObject() is IDescribableEntity) ? (dbEntry.CurrentValues.ToObject() as IDescribableEntity).Describe() : dbEntry.CurrentValues.ToObject().ToString()
                    */    
                };
    
                // Gera o log de cada campo (coluna) incluida:
               /* ICollection<LogGeralDetalhe> detalhesLog = new List<LogGeralDetalhe>();
                foreach(string propertyName in dbEntry.CurrentValues.PropertyNames) {
                    // For updates, we only want to capture the columns that actually changed
                    LogGeralDetalhe logGeralDetalhe = new LogGeralDetalhe();
                    //var objAntigo = dbEntry.OriginalValues.ToObject();
                    var objNovo = dbEntry.CurrentValues.GetValue<object>(propertyName);
    
                    logGeralDetalhe.no_coluna = propertyName;
                    //logGeralDetalhe.dc_valor_antigo = (objAntigo is IDescribableEntity) ? (objAntigo as IDescribableEntity).Describe() : objAntigo.ToString();
                    if(objNovo != null) {
                        logGeralDetalhe.dc_valor_novo = objNovo.ToString();
                        detalhesLog.Add(logGeralDetalhe);
                    }
                }
                logGeral.DetalhesLogGeral = detalhesLog;*/
            }
            else if(dbEntryComp.OriginalStatus == System.Data.Entity.EntityState.Deleted) {
                // Same with deletes, do the whole record, and use either the description from Describe() or ToString()
                logGeral = new LogGeral() {
                    cd_usuario = userId,
                    dt_log_geral = changeTime,
                    cd_tipo_log = (int) FundacaoFisk.SGF.GenericModel.TipoLog.TipoLogEnum.DELECAO,
                    cd_origem = origem.Value,
    				cd_registro_pai = cd_registro_pai,
    				cd_pessoa_empresa = cd_empresa
    
                    /*RecordID = dbEntry.OriginalValues.GetValue<object>(keyName).ToString()
                    NewValue = (dbEntry.OriginalValues.ToObject() is IDescribableEntity) ? (dbEntry.OriginalValues.ToObject() as IDescribableEntity).Describe() : dbEntry.OriginalValues.ToObject().ToString()
                    */    
                };
    
                // Gera o log de cada campo (coluna) deletada:
                //LBM Em 17/05/2022 incluindo log geral e excluindo logs detalhes
                /*ICollection<LogGeralDetalhe> detalhesLog = new List<LogGeralDetalhe>();
                foreach(string propertyName in dbEntry.OriginalValues.PropertyNames) {
                    // For updates, we only want to capture the columns that actually changed
                    LogGeralDetalhe logGeralDetalhe = new LogGeralDetalhe();
                    //var objAntigo = dbEntry.OriginalValues.ToObject();
                    var objAntigo = dbEntry.OriginalValues.GetValue<object>(propertyName);
    
                    logGeralDetalhe.no_coluna = propertyName;
                    //logGeralDetalhe.dc_valor_antigo = (objAntigo is IDescribableEntity) ? (objAntigo as IDescribableEntity).Describe() : objAntigo.ToString();
                    if(objAntigo != null) {
                        logGeralDetalhe.dc_valor_antigo = objAntigo.ToString();
                        detalhesLog.Add(logGeralDetalhe);
                    }
                }
                logGeral.DetalhesLogGeral = detalhesLog;*/
            }
            else if(dbEntryComp.OriginalStatus == System.Data.Entity.EntityState.Modified) {
                // Gera o log de alteração da entidade:
                logGeral = new LogGeral() {
                    cd_usuario = userId,
                    dt_log_geral = changeTime,
                    cd_tipo_log = (int) FundacaoFisk.SGF.GenericModel.TipoLog.TipoLogEnum.ALTERACAO,
                    cd_origem = origem.Value,
    				cd_registro_pai = cd_registro_pai,
    				cd_pessoa_empresa = cd_empresa
    
                    /*RecordID = dbEntry.OriginalValues.GetValue<object>(keyName).ToString()*/
                };
    
                // Gera o log de cada campo (coluna) alerada:
                //LBM Em 17/05/2022 incluindo log geral e excluindo logs detalhes
                /*ICollection<LogGeralDetalhe> detalhesLog = new List<LogGeralDetalhe>();
                IEnumerable<string> propertysModified = dbEntry.OriginalValues.PropertyNames.Where(x => !object.Equals(dbEntry.OriginalValues.GetValue<object>(x), dbEntry.CurrentValues.GetValue<object>(x))).ToList();
                foreach (string propertyName in propertysModified){
                    // For updates, we only want to capture the columns that actually changed
                    LogGeralDetalhe logGeralDetalhe = new LogGeralDetalhe();
                    var objNovo = dbEntry.CurrentValues.GetValue<object>(propertyName);
                    var objAntigo = dbEntry.OriginalValues.GetValue<object>(propertyName);
    
                    logGeralDetalhe.no_coluna = propertyName;
                    logGeralDetalhe.dc_valor_novo = objNovo != null ? objNovo.ToString() : null;
                    logGeralDetalhe.dc_valor_antigo = objAntigo != null ? objAntigo.ToString() : null;
                    detalhesLog.Add(logGeralDetalhe);
                }
                logGeral.DetalhesLogGeral = detalhesLog;*/
            }
            if(logGeral != null)
                result.Add(logGeral);
        }
        // Otherwise, don't do anything, we don't care about Unchanged or Detached entities
    
        return result;
    }
}
<#

if (!String.IsNullOrEmpty(codeNamespace))
{
    PopIndent();
#>
}
<#
}
#>
<#+

private void WriteFunctionImport(TypeMapper typeMapper, CodeStringGenerator codeStringGenerator, EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
{
    if (typeMapper.IsComposable(edmFunction))
    {
#>

    [EdmFunction("<#=edmFunction.NamespaceName#>", "<#=edmFunction.Name#>")]
    <#=codeStringGenerator.ComposableFunctionMethod(edmFunction, modelNamespace)#>
    {
<#+
        codeStringGenerator.WriteFunctionParameters(edmFunction, WriteFunctionParameter);
#>
        <#=codeStringGenerator.ComposableCreateQuery(edmFunction, modelNamespace)#>
    }
<#+
    }
    else
    {
#>

    <#=codeStringGenerator.FunctionMethod(edmFunction, modelNamespace, includeMergeOption)#>
    {
<#+
        codeStringGenerator.WriteFunctionParameters(edmFunction, WriteFunctionParameter);
#>
        <#=codeStringGenerator.ExecuteFunction(edmFunction, modelNamespace, includeMergeOption)#>
    }
<#+
        if (typeMapper.GenerateMergeOptionFunction(edmFunction, includeMergeOption))
        {
            WriteFunctionImport(typeMapper, codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: true);
        }
    }
}

public void WriteFunctionParameter(string name, string isNotNull, string notNullInit, string nullInit)
{
#>
        var <#=name#> = <#=isNotNull#> ?
            <#=notNullInit#> :
            <#=nullInit#>;

<#+
}

public const string TemplateId = "CSharp_DbContext_Context_EF5";

public class CodeStringGenerator
{
    private readonly CodeGenerationTools _code;
    private readonly TypeMapper _typeMapper;
    private readonly MetadataTools _ef;

    public CodeStringGenerator(CodeGenerationTools code, TypeMapper typeMapper, MetadataTools ef)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(typeMapper, "typeMapper");
        ArgumentNotNull(ef, "ef");

        _code = code;
        _typeMapper = typeMapper;
        _ef = ef;
    }

    public string Property(EdmProperty edmProperty)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            Accessibility.ForProperty(edmProperty),
            _typeMapper.GetTypeName(edmProperty.TypeUsage),
            _code.Escape(edmProperty),
            _code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
            _code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
    }

    public string NavigationProperty(NavigationProperty navigationProperty)
    {
        var endType = _typeMapper.GetTypeName(navigationProperty.ToEndMember.GetEntityType());
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            AccessibilityAndVirtual(Accessibility.ForProperty(navigationProperty)),
            navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType,
            _code.Escape(navigationProperty),
            _code.SpaceAfter(Accessibility.ForGetter(navigationProperty)),
            _code.SpaceAfter(Accessibility.ForSetter(navigationProperty)));
    }
    
    public string AccessibilityAndVirtual(string accessibility)
    {
        return accessibility + (accessibility != "private" ? " virtual" : "");
    }
    
    public string EntityClassOpening(EntityType entity)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1}partial class {2}{3}",
            Accessibility.ForType(entity),
            _code.SpaceAfter(_code.AbstractOption(entity)),
            _code.Escape(entity),
            _code.StringBefore(" : ", _typeMapper.GetTypeName(entity.BaseType)));
    }
    
    public string EnumOpening(SimpleType enumType)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} enum {1} : {2}",
            Accessibility.ForType(enumType),
            _code.Escape(enumType),
            _code.Escape(_typeMapper.UnderlyingClrType(enumType)));
        }
    
    public void WriteFunctionParameters(EdmFunction edmFunction, Action<string, string, string, string> writeParameter)
    {
        var parameters = FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
        foreach (var parameter in parameters.Where(p => p.NeedsLocalVariable))
        {
            var isNotNull = parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null";
            var notNullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", " + parameter.FunctionParameterName + ")";
            var nullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", typeof(" + parameter.RawClrTypeName + "))";
            writeParameter(parameter.LocalVariableName, isNotNull, notNullInit, nullInit);
        }
    }
    
    public string ComposableFunctionMethod(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} IQueryable<{1}> {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            _code.Escape(edmFunction),
            string.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray()));
    }
    
    public string ComposableCreateQuery(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<{0}>(\"[{1}].[{2}]({3})\"{4});",
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            edmFunction.NamespaceName,
            edmFunction.Name,
            string.Join(", ", parameters.Select(p => "@" + p.EsqlParameterName).ToArray()),
            _code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray())));
    }
    
    public string FunctionMethod(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            returnType == null ? "int" : "ObjectResult<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
    }
    
    public string ExecuteFunction(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var callParams = _code.StringBefore(", ", String.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()));
        if (includeMergeOption)
        {
            callParams = ", mergeOption" + callParams;
        }
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction{0}(\"{1}\"{2});",
            returnType == null ? "" : "<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            edmFunction.Name,
            callParams);
    }
    
    public string DbSet(EntitySet entitySet)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} DbSet<{1}> {2} {{ get; set; }}",
            Accessibility.ForReadOnlyProperty(entitySet),
            _typeMapper.GetTypeName(entitySet.ElementType),
            _code.Escape(entitySet));
    }

    public string UsingDirectives(bool inHeader, bool includeCollections = true)
    {
        return inHeader == string.IsNullOrEmpty(_code.VsNamespaceSuggestion())
            ? string.Format(
                CultureInfo.InvariantCulture,
                "{0}using System;{1}" +
                "{2}",
                inHeader ? Environment.NewLine : "",
                includeCollections ? (Environment.NewLine + "using System.Collections.Generic;") : "",
                inHeader ? "" : Environment.NewLine)
            : "";
    }
}

public class TypeMapper
{
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

    private readonly System.Collections.IList _errors;
    private readonly CodeGenerationTools _code;
    private readonly MetadataTools _ef;

    public TypeMapper(CodeGenerationTools code, MetadataTools ef, System.Collections.IList errors)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(ef, "ef");
        ArgumentNotNull(errors, "errors");

        _code = code;
        _ef = ef;
        _errors = errors;
    }

    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }

    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
    }

    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }

    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
    }

    public string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }

        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }

        var typeName = _code.Escape(edmType.MetadataProperties
                                .Where(p => p.Name == ExternalTypeNameAttributeName)
                                .Select(p => (string)p.Value)
                                .FirstOrDefault())
            ?? (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
                _code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName), _code.Escape(edmType)) :
                _code.Escape(edmType));

        if (edmType is StructuralType)
        {
            return typeName;
        }

        if (edmType is SimpleType)
        {
            var clrType = UnderlyingClrType(edmType);
            if (!IsEnumType(edmType))
            {
                typeName = _code.Escape(clrType);
            }

            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                typeName;
        }

        throw new ArgumentException("edmType");
    }
    
    public Type UnderlyingClrType(EdmType edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }

        if (IsEnumType(edmType))
        {
            return GetEnumUnderlyingType(edmType).ClrEquivalentType;
        }

        return typeof(object);
    }
    
    public object GetEnumMemberValue(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var valueProperty = enumMember.GetType().GetProperty("Value");
        return valueProperty == null ? null : valueProperty.GetValue(enumMember, null);
    }
    
    public string GetEnumMemberName(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var nameProperty = enumMember.GetType().GetProperty("Name");
        return nameProperty == null ? null : (string)nameProperty.GetValue(enumMember, null);
    }

    public System.Collections.IEnumerable GetEnumMembers(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        var membersProperty = enumType.GetType().GetProperty("Members");
        return membersProperty != null 
            ? (System.Collections.IEnumerable)membersProperty.GetValue(enumType, null)
            : Enumerable.Empty<MetadataItem>();
    }
    
    public bool EnumIsFlags(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");
        
        var isFlagsProperty = enumType.GetType().GetProperty("IsFlags");
        return isFlagsProperty != null && (bool)isFlagsProperty.GetValue(enumType, null);
    }

    public bool IsEnumType(GlobalItem edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        return edmType.GetType().Name == "EnumType";
    }

    public PrimitiveType GetEnumUnderlyingType(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        return (PrimitiveType)enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, null);
    }

    public string CreateLiteral(object value)
    {
        if (value == null || value.GetType() != typeof(TimeSpan))
        {
            return _code.CreateLiteral(value);
        }

        return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})", ((TimeSpan)value).Ticks);
    }
    
    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    {
        ArgumentNotNull(types, "types");
        ArgumentNotNull(sourceFile, "sourceFile");
        
        var hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        if (types.Any(item => !hash.Add(item)))
        {
            _errors.Add(
                new CompilerError(sourceFile, -1, -1, "6023",
                    String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CaseInsensitiveTypeConflict"))));
            return false;
        }
        return true;
    }
    
    public IEnumerable<SimpleType> GetEnumItemsToGenerate(IEnumerable<GlobalItem> itemCollection)
    {
        return GetItemsToGenerate<SimpleType>(itemCollection)
            .Where(e => IsEnumType(e));
    }
    
    public IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
    {
        return itemCollection
            .OfType<T>()
            .Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName))
            .OrderBy(i => i.Name);
    }

    public IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemCollection)
    {
        return itemCollection
            .Where(i => i is EntityType || i is ComplexType || i is EntityContainer || IsEnumType(i))
            .Select(g => GetGlobalItemName(g));
    }

    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }

    public IEnumerable<EdmProperty> GetSimpleProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetSimpleProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }

    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }
    
    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }

    public IEnumerable<NavigationProperty> GetNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type);
    }
    
    public IEnumerable<NavigationProperty> GetCollectionNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    }
    
    public FunctionParameter GetReturnParameter(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var returnParamsProperty = edmFunction.GetType().GetProperty("ReturnParameters");
        return returnParamsProperty == null
            ? edmFunction.ReturnParameter
            : ((IEnumerable<FunctionParameter>)returnParamsProperty.GetValue(edmFunction, null)).FirstOrDefault();
    }

    public bool IsComposable(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var isComposableProperty = edmFunction.GetType().GetProperty("IsComposableAttribute");
        return isComposableProperty != null && (bool)isComposableProperty.GetValue(edmFunction, null);
    }

    public IEnumerable<FunctionImportParameter> GetParameters(EdmFunction edmFunction)
    {
        return FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
    }

    public TypeUsage GetReturnType(EdmFunction edmFunction)
    {
        var returnParam = GetReturnParameter(edmFunction);
        return returnParam == null ? null : _ef.GetElementType(returnParam.TypeUsage);
    }
    
    public bool GenerateMergeOptionFunction(EdmFunction edmFunction, bool includeMergeOption)
    {
        var returnType = GetReturnType(edmFunction);
        return !includeMergeOption && returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType;
    }
}

public class EdmMetadataLoader
{
    private readonly IDynamicHost _host;
    private readonly System.Collections.IList _errors;

    public EdmMetadataLoader(IDynamicHost host, System.Collections.IList errors)
    {
        ArgumentNotNull(host, "host");
        ArgumentNotNull(errors, "errors");

        _host = host;
        _errors = errors;
    }

    public IEnumerable<GlobalItem> CreateEdmItemCollection(string sourcePath)
    {
        ArgumentNotNull(sourcePath, "sourcePath");

        if (!ValidateInputPath(sourcePath))
        {
            return new EdmItemCollection();
        }

        var schemaElement = LoadRootElement(_host.ResolvePath(sourcePath));
        if (schemaElement != null)
        {
            using (var reader = schemaElement.CreateReader())
            {
                IList<EdmSchemaError> errors;
                var itemCollection = MetadataItemCollectionFactory.CreateEdmItemCollection(new[] { reader }, out errors);

                ProcessErrors(errors, sourcePath);

                return itemCollection;
            }
        }
        return new EdmItemCollection();
    }

    public string GetModelNamespace(string sourcePath)
    {
        ArgumentNotNull(sourcePath, "sourcePath");

        if (!ValidateInputPath(sourcePath))
        {
            return string.Empty;
        }

        var model = LoadRootElement(_host.ResolvePath(sourcePath));
        if (model == null)
        {
            return string.Empty;
        }

        var attribute = model.Attribute("Namespace");
        return attribute != null ? attribute.Value : "";
    }

    private bool ValidateInputPath(string sourcePath)
    {
        if (sourcePath == "$" + "edmxInputFile" + "$")
        {
            _errors.Add(
                new CompilerError(_host.TemplateFile ?? sourcePath, 0, 0, string.Empty,
                    GetResourceString("Template_ReplaceVsItemTemplateToken")));
            return false;
        }

        return true;
    }

    public XElement LoadRootElement(string sourcePath)
    {
        ArgumentNotNull(sourcePath, "sourcePath");

        var root = XElement.Load(sourcePath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);
        return root.Elements()
            .Where(e => e.Name.LocalName == "Runtime")
            .Elements()
            .Where(e => e.Name.LocalName == "ConceptualModels")
            .Elements()
            .Where(e => e.Name.LocalName == "Schema")
            .FirstOrDefault()
                ?? root;
    }

    private void ProcessErrors(IEnumerable<EdmSchemaError> errors, string sourceFilePath)
    {
        foreach (var error in errors)
        {
            _errors.Add(
                new CompilerError(
                    error.SchemaLocation ?? sourceFilePath,
                    error.Line,
                    error.Column,
                    error.ErrorCode.ToString(CultureInfo.InvariantCulture),
                    error.Message)
                {
                    IsWarning = error.Severity == EdmSchemaErrorSeverity.Warning
                });
        }
    }
    
    public bool IsLazyLoadingEnabled(EntityContainer container)
    {
        string lazyLoadingAttributeValue;
        var lazyLoadingAttributeName = MetadataConstants.EDM_ANNOTATION_09_02 + ":LazyLoadingEnabled";
        bool isLazyLoading;
        return !MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, out lazyLoadingAttributeValue)
            || !bool.TryParse(lazyLoadingAttributeValue, out isLazyLoading)
            || isLazyLoading;
    }
}

public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
    
private static readonly Lazy<System.Resources.ResourceManager> ResourceManager =
    new Lazy<System.Resources.ResourceManager>(
        () => new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(MetadataItemCollectionFactory).Assembly), isThreadSafe: true);

public static string GetResourceString(string resourceName)
{
    ArgumentNotNull(resourceName, "resourceName");

    return ResourceManager.Value.GetString(resourceName, null);
}

#>