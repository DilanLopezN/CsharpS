//#region declaração de constantes
var HAS_ATIVO = 0;
var HAS_RESPONSAVEL_TIT = 0;
var TIPOMATRICULA = 1, TIPOREMATRICULA = 8, AGUARDANDO_MATRICULA = 9;
var TURMACADASTRO = 2;
var PRINCIPAL_MATRICULA = 1, TAXA_MATRICULA = 2;
var RENEGOCIACAO = 6;
var TRANSFERENCIA_TURMA = 1, PERDA_DESCONTO = 2, CONCESSAO_DESCONTO = 3, MAIORIDADE = 4, ADICIONAR_PARCELAS = 5, REAJUSTE_ANUAL_ADITIVO = 6, ADITIVO_BOLSA = 7;
var RETORNARTITULOSMATRICULA = 1, RETORNARTITULOADITAMENTO = 2;
var GERARTITULO = 1, SALVARMATRICULA = 2;
var NAOINFORMADA = 0, ESCOLHERDATA = 4;
var gerar_titulo = false, marcar_ajuste_manual = false
var atualizar_desconto = false;
var alterouStatusAditamento = false;
var CHEQUE = 4;
var CARTAO = 5;
var STATUS_TITULO_ABERTO = 1;
var NATUREZA_TITULO_RECEBER = 1;
var CONTRATO = 1;
var ENCERRADO = 4;
var LOADCONTRATO = false;
var abriuTagTitulos = false;
var local_movto_parametro = 0;
var dc_local_movto_parametro = "";
var somar_desconto = false;
var somar_desconto_old = false;
var parametro_gerar_financeiro = true;
var empresa_propria = true;
var ADICIONAR = 1, EDITAR = 2, EXCLUIR = 3;
var atualizar_data_aditivo = false, existe_data_alteracao_aditivo = false;
var PESSOAJURIDICA = 2, PESSOAFISICA = 1, USARCPF = 3, CPFRELAC = 6;
var CADMAT = 1;
var CDPESSOAEMPRESA = 0;
var RETORNO_VALOR_FATURAR = 1, RETORNO_ADITAMENTO_ANTERIOR = 2
var CHEQUEPREDATADO = 4, CHEQUEVISTA = 10, EVENTO_GRID_CHEQUE = 0, ISVIEW_CHEQUE_TRANSACAO = null;
var CARTAOCREDITO = 2, CARTAODEBITO = 3, LOCALCARTAOCREDITO = 4; LOCALCARTAODEBITO = 5;
var TROCA_FINANCEIRA = 110;
var storeProdutoAtual, storeProdutoAtualSemProfissionalizanteInformatica;
var ALTEROU_IMAGEM_DIGITALIZADA = false;
var ALTEROU_VENDA_PACOTE = false;
var ALTEROU_LIBERAR_CERTIFICADO = false;
var ALTEROU_LIBERAR_CERTIFICADO_C = false;
var ATUALIZOU_CURSO = false;
var desabilitar_cheque = true;
var cursoordem = 0;
var mesI = 1;
var anoI = 0;
var ALTEROU_RESPONSAVEL = false;
var ALTEROU_DT_VENCIMENTO = false;
var TIPOMOVIMENTO = null, SAIDA = 2;
var MATERIAL_DIDATICO = 1;
var VINCULA_MATERIAL_FILTRO = true;
var PESQUISA_MOVIMENTO = 1, PESQUISA = 1, CADASTRO = 2;
var TIPO_PESQUISA_VINCULA_MATERIAL = 1;
var INCLUIR = false;
var EDITAR = false;
//#endregion

var EnumTipoCKMatricula =
{
    NORMAL : 0,
    MULTIPLA : 1,
    PROFISSIONALIZANTE:2,
    INFORMATICA: 3
}

//#region métodos auxiliares  - habilitarOnChange
function habilitarOnChange(compente, isHabilitar) {
    try {
        if (isHabilitar)
            dijit.byId(compente)._onChangeActive = true;
        else
            dijit.byId(compente)._onChangeActive = false;
    } catch (e) {
        postGerarLog(e);
    }
}
//#endregion

//#region  formats
function formatCheckBoxTurma(value, rowIndex, obj) {
    try {
        var gridName = 'gridTurmaMat';
        var grid = dijit.byId(gridName);
        var icon;
        var id = obj.field + '_Selected_' + rowIndex;
        var todos = dojo.byId('selecionaTodosTurma');

        if (hasValue(grid.itensSelecionados) && hasValue(grid._by_idx[rowIndex].item)) {
            var indice = binaryObjSearch(grid.itensSelecionados, "cd_turma", grid._by_idx[rowIndex].item.cd_turma);

            value = value || indice != null; // Item está selecionado.
        }
        if (rowIndex != -1)
            icon = "<input  class='formatCheckBox'  id='" + id + "'/> ";

        // Configura o check de todos:
        if (hasValue(todos) && todos.type == 'text')
            setTimeout("configuraCheckBox(false, 'cd_turma', 'selecionadoTurma', -1, 'selecionaTodosTurma', 'selecionaTodosTurma', '" + gridName + "')", 18);

        setTimeout("configuraCheckBox(" + value + ", 'cd_turma', 'selecionadoTurma', " + rowIndex + ", '" + id + "', 'selecionaTodosTurma', '" + gridName + "')", 2);

        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function formatCheckBoxDesc(value, rowIndex, obj) {
    try {
        var gridName = 'gridDesconto';
        var grid = dijit.byId(gridName);
        var icon;
        var id = obj.field + '_Selected_' + rowIndex;
        var todos = dojo.byId('selecionaTodosDesc');

        if (hasValue(grid.itensSelecionados) && hasValue(grid._by_idx[rowIndex].item)) {
            var indice = binaryObjSearch(grid.itensSelecionados, "cd_tipo_desconto", grid._by_idx[rowIndex].item.cd_tipo_desconto);

            value = value || indice != null; // Item está selecionado.
        }
        if (rowIndex != -1)
            icon = "<input  class='formatCheckBox'  id='" + id + "'/> ";

        // Configura o check de todos:
        if (hasValue(todos) && todos.type == 'text')
            setTimeout("configuraCheckBox(false, 'cd_tipo_desconto', 'selecionadoDesc', -1, 'selecionaTodosDesc', 'selecionaTodosDesc', '" + gridName + "')", 18);

        setTimeout("configuraCheckBox(" + value + ", 'cd_tipo_desconto', 'selecionadoDesc', " + rowIndex + ", '" + id + "', 'selecionaTodosDesc', '" + gridName + "')", 2);

        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function formatCheckBoxDescAdt(value, rowIndex, obj) {
    try {
        var gridName = 'gridDescontoAdt';
        var grid = dijit.byId(gridName);
        var icon;
        var id = obj.field + '_Selected_adt_' + rowIndex;
        var todos = dojo.byId('selecionaTodosDescAdt');

        if (hasValue(grid.itensSelecionados) && hasValue(grid._by_idx[rowIndex].item)) {
            var indice = binaryObjSearch(grid.itensSelecionados, "cd_tipo_desconto", grid._by_idx[rowIndex].item.cd_tipo_desconto);

            value = value || indice != null; // Item está selecionado.
        }
        if (rowIndex != -1)
            icon = "<input  class='formatCheckBox'  id='" + id + "'/> ";

        // Configura o check de todos:
        if (hasValue(todos) && todos.type == 'text')
            setTimeout("configuraCheckBox(false, 'cd_tipo_desconto', 'selecionadoDescAdt', -1, 'selecionaTodosDescAdt', 'selecionaTodosDescAdt', '" + gridName + "')", 18);

        setTimeout("configuraCheckBox(" + value + ", 'cd_tipo_desconto', 'selecionadoDescAdt', " + rowIndex + ", '" + id + "', 'selecionaTodosDescAdt', '" + gridName + "')", 2);

        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function formatCheckBoxTit(value, rowIndex, obj) {
    try {
        var gridName = 'gridTitulo';
        var grid = dijit.byId(gridName);
        var icon;
        var idSelect = obj.field + '_Selected_' + rowIndex;
        var todos = dojo.byId('selecionaTodosTit');

        if (hasValue(grid.itensSelecionados) && hasValue(grid._by_idx[rowIndex].item)) {
            var indice = binaryObjSearch(grid.itensSelecionados, "id", grid._by_idx[rowIndex].item.id);

            value = value || indice != null; // Item está selecionado.
        }
        if (rowIndex != -1)
            icon = "<input  class='formatCheckBox'  id='" + idSelect + "'/> ";

        // Configura o check de todos:
        if (hasValue(todos) && todos.type == 'text')
            setTimeout("configuraCheckBox(false, 'id', 'selecionadoTit', -1, 'selecionaTodosTit', 'selecionaTodosTit', '" + gridName + "')", 18);

        setTimeout("configuraCheckBox(" + value + ", 'id', 'selecionadoTit', " + rowIndex + ", '" + idSelect + "', 'selecionaTodosTit', '" + gridName + "')", 2);

        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function formatCheckBoxBaixa(value, rowIndex, obj) {
    try {
        var gridName = 'gridBaixa';
        var grid = dijit.byId(gridName);
        var icon;
        var id = obj.field + '_Selected_' + rowIndex;
        var todos = dojo.byId('selecionaTodosBaixa');

        if (hasValue(grid.itensSelecionados) && hasValue(grid._by_idx[rowIndex].item)) {
            var indice = binaryObjSearch(grid.itensSelecionados, "cd_baixa", grid._by_idx[rowIndex].item.cd_turma);

            value = value || indice != null; // Item está selecionado.
        }
        if (rowIndex != -1)
            icon = "<input  class='formatCheckBox'  id='" + id + "'/> ";

        // Configura o check de todos:
        if (hasValue(todos) && todos.type == 'text')
            setTimeout("configuraCheckBox(false, 'cd_desconto', 'selecionadoBaixa', -1, 'selecionaTodosBaixa', 'selecionaTodosBaixa', '" + gridName + "')", 18);

        setTimeout("configuraCheckBox(" + value + ", 'cd_baixa', 'selecionadoBaixa', " + rowIndex + ", '" + id + "', 'selecionaTodosBaixa', '" + gridName + "')", 2);

        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

//#region Formats para descontos
function formatCheckDesconto(value, rowIndex, obj) {
    try {
        var gridDesconto = dijit.byId("gridDesconto");
        var icon;

        var id = obj.field + '_Selected_' + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(id)))
            dijit.byId(id).destroy();
        if (rowIndex != -1 && hasValue(id))
            icon = "<input id='" + id + "' /> ";
        setTimeout("configuraCheckBoxDesconto(" + value + ", " + rowIndex + ", '" + id + "')", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function formatCheckDescontoAdt(value, rowIndex, obj) {
    try {
        var gridDescontoAdt = dijit.byId("gridDescontoAdt");
        var icon;

        var id = obj.field + '_Selected_adt_' + gridDescontoAdt._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(id)))
            dijit.byId(id).destroy();
        if (rowIndex != -1 && hasValue(id))
            icon = "<input id='" + id + "' /> ";
        setTimeout("configuraCheckBoxDescontoAdt(" + value + ", " + rowIndex + ", '" + id + "')", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function certificadoFormatter(id) {
    var data = [
        { name: "Não", id: false },
        { name: "Sim", id: true }

    ];

    var item = data.filter(function (item) {
        return item.id === id;
    });

    return hasValue(item) ? item[0].name : "";
}

function valorCursoFormatter(id) {
    return maskFixed(id, 2).toString();
}

function formatCheckDescontoHistAdt(value, rowIndex, obj) {
    try {
        var gridDescontoHistAdt = dijit.byId("gridDescontoHistAdt");
        var icon;

        var id = obj.field + '_Selected_hist_' + gridDescontoHistAdt._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(id)))
            dijit.byId(id).destroy();
        if (rowIndex != -1 && hasValue(id))
            icon = "<input id='" + id + "' /> ";
        setTimeout("configuraCheckBoxDescontoHistAdt(" + value + ", " + rowIndex + ", '" + id + "')", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraCheckBoxDesconto(value, rowIndex, id) {
    try {
        if (!hasValue(dijit.byId(id))) {
            var checkBox = new dijit.form.CheckBox({
                name: "checkBox" + id,
                value: value,
                checked: value,
                disabled: true
            }, id);
        } else {
            value = value;
            var dijitObj = dijit.byId(id);
            dijitObj._onChangeActive = false;
            dijitObj.set('value', value);
            dijitObj._onChangeActive = true;
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraCheckBoxDescontoAdt(value, rowIndex, id) {
    try {
        var desabilitar = false;
        if (!dojo.byId("ckManual").checked && dijit.byId('tipoContratoAdto').aditamento && hasValue(dijit.byId("gridAditamento").editAditamento) && dijit.byId("gridAditamento").editAditamento.id_ajuste_manual)
            desabilitar = true;
        if (!hasValue(dijit.byId(id))) {
            var checkBox = new dijit.form.CheckBox({
                name: "checkBox" + id,
                value: value,
                disabled: desabilitar,
                checked: value,
                disabled: true
            }, id);
        } else {
            value = value;
            var dijitObj = dijit.byId(id);
            dijitObj._onChangeActive = false;
            dijitObj.set('value', value);
            dijitObj._onChangeActive = true;
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraCheckBoxDescontoHistAdt(value, rowIndex, id) {
    try {
        if (!hasValue(dijit.byId(id))) {
            var checkBox = new dijit.form.CheckBox({
                name: "checkBox_hist_" + id,
                value: value,
                checked: value,
                disabled: true
            }, id);
        } else {
            value = value;
            var dijitObj = dijit.byId(id);
            dijitObj._onChangeActive = false;
            dijitObj.set('value', value);
            dijitObj._onChangeActive = true;
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function formatCheckDescontoAtivo(value, rowIndex, obj) {
    try {
        var gridDesconto = dijit.byId("gridDesconto");
        var icon;
        var id = obj.field + '_Selected_' + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto;
        var cd_tipo_desconto = gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto;
        if (value == null || value == undefined)
            value = true;
        if (hasValue(dijit.byId(id)))
            dijit.byId(id).destroy();

        if (rowIndex != -1 && hasValue(id))
            icon = "<input class='formatCheckBox' id='" + id + "' />";

        setTimeout("configuraCheckBoxDescontoAtivo(" + value + ", " + rowIndex + ", '" + id + "', " + cd_tipo_desconto + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function formatCheckDescontoAtivoAdt(value, rowIndex, obj) {
    try {
        var gridDescontoAdt = dijit.byId("gridDescontoAdt");
        var icon;
        var id = obj.field + '_Selected_adt_' + gridDescontoAdt._by_idx[rowIndex].item.cd_tipo_desconto;
        var cd_tipo_desconto = gridDescontoAdt._by_idx[rowIndex].item.cd_tipo_desconto;
        if (value == null || value == undefined)
            value = true;
        if (hasValue(dijit.byId(id)))
            dijit.byId(id).destroy();

        if (rowIndex != -1 && hasValue(id))
            icon = "<input class='formatCheckBox' id='" + id + "' />";

        setTimeout("configuraCheckBoxDescontoAtivoAdt(" + value + ", " + rowIndex + ", '" + id + "', " + cd_tipo_desconto + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function formatCheckDescontoAtivoHistAdt(value, rowIndex, obj) {
    try {
        var gridDescontoHistAdt = dijit.byId("gridDescontoHistAdt");
        var icon;
        var id = obj.field + '_Selected_hist_adt_' + gridDescontoHistAdt._by_idx[rowIndex].item.cd_tipo_desconto;
        if (value == null || value == undefined)
            value = true;
        if (hasValue(dijit.byId(id)))
            dijit.byId(id).destroy();

        if (rowIndex != -1 && hasValue(id))
            icon = "<input class='formatCheckBox' id='" + id + "' />";

        setTimeout("configuraCheckBoxDescontoAtivoHistAdt(" + value + "," + rowIndex + ", '" + id + "')", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraCheckBoxDescontoAtivo(value, rowIndex, id, cd_tipo_desconto) {
    try {
        var desabilitar = false;
        if (dijit.byId('tipoContratoAdto').aditamento)
            desabilitar = true;
        if (!hasValue(dijit.byId(id))) {
            var checkBox = new dijit.form.CheckBox({
                name: "checkBox",
                value: value,
                checked: value,
                disabled: desabilitar,
                onChange: function (b) { atualizarCheckBox(cd_tipo_desconto, this) }
            }, id);
        }
        else {
            value = value;
            var dijitObj = dijit.byId(id);
            dijitObj._onChangeActive = false;
            dijitObj.set('value', value);
            dijitObj._onChangeActive = true;
            dijitObj.onChange = function (b) { atualizarCheckBox(cd_tipo_desconto, this); };
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraCheckBoxDescontoAtivoAdt(value, rowIndex, id, cd_tipo_desconto) {
    try {
        var desabilitar = false;
        if (!dojo.byId("ckManual").checked && dijit.byId('tipoContratoAdto').aditamento && hasValue(dijit.byId("gridAditamento").editAditamento) && dijit.byId("gridAditamento").editAditamento.id_ajuste_manual)
            desabilitar = true;
        if (!hasValue(dijit.byId(id))) {
            var checkBox = new dijit.form.CheckBox({
                name: "checkBox",
                value: value,
                checked: value,
                disabled: desabilitar,
                onChange: function (b) {
                    atualizarCheckBoxAdt(cd_tipo_desconto, this);
                    //calcularESetarValoresDescontoAdt(ADICIONAR, null, null, true, null);
                    alterouStatusAditamento = true;
                    simuladorAditamento(false);
                }
            }, id);
        }
        else {
            value = value;
            var dijitObj = dijit.byId(id);
            dijitObj._onChangeActive = false;
            dijitObj.set('value', value);
            dijitObj._onChangeActive = true;
            dijitObj.onChange = function (b) {
                atualizarCheckBoxAdt(cd_tipo_desconto, this);
                //calcularESetarValoresDescontoAdt(ADICIONAR, null, null, true, null);
                alterouStatusAditamento = true;
                simuladorAditamento(gerar_titulo);
            };
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraCheckBoxDescontoAtivoHistAdt(value, rowIndex, id) {
    try {
        if (!hasValue(dijit.byId(id))) {
            var checkBox = new dijit.form.CheckBox({
                name: "checkBox",
                value: value,
                checked: value,
                disabled: true
            }, id);
        }
        else {
            value = value;
            var dijitObj = dijit.byId(id);
            dijitObj._onChangeActive = false;
            dijitObj.set('value', value);
            dijitObj._onChangeActive = true;
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function atualizarCheckBox(cd_tipo_desconto, obj) {
    try {
        var gridDesconto = dijit.byId("gridDesconto");
        cd_tipo_desconto = parseInt(cd_tipo_desconto);

        atualizar_desconto = true;
        for (var i = 0; i < gridDesconto.store.objectStore.data.length; i++)
            if (cd_tipo_desconto == gridDesconto.store.objectStore.data[i].cd_tipo_desconto) {
                gridDesconto.store.objectStore.data[i].id_desconto_ativo = obj.checked;
                break;
            }

        //TODO: Deivid
    } catch (e) {
        postGerarLog(e);
    }
}

function atualizarCheckBoxAdt(cd_tipo_desconto, obj) {
    try {
        var gridDescontoAdt = dijit.byId("gridDescontoAdt");
        cd_tipo_desconto = parseInt(cd_tipo_desconto);
        for (var i = 0; i < gridDescontoAdt.store.objectStore.data.length; i++)
            if (cd_tipo_desconto == gridDescontoAdt.store.objectStore.data[i].cd_tipo_desconto) {
                gridDescontoAdt.store.objectStore.data[i].id_desconto_ativo = obj.checked;
                break;
            }
        //TODO: Deivid
    } catch (e) {
        postGerarLog(e);
    }
}
//Novos campos Descontos
//gridDesconto
function formatTextValorDescontoParIni(value, rowIndex, obj) {
    try {
        var gridDesconto = dijit.byId("gridDesconto");
        var icon;
        var desc = obj.field + '_input_PI_' + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(desc)) || dijit.byId(desc) != null)
            dijit.byId(desc).destroy();
        if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:21px' /> ";

        setTimeout("configuraTextBoxValorDescontoParIni('" + value + "', '" + desc + "','" + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto + "'," + rowIndex + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraTextBoxValorDescontoParIni(value, desc, cd_tipo_desconto, rowIndex) {
    try {
        var desabilitar = false;
        if (dijit.byId('tipoContratoAdto').aditamento)
            desabilitar = true;
        if (!hasValue(dijit.byId(desc))) {
            var newTextBox = new dijit.form.TextBox({
                name: "textBox_PI_" + desc,
                value: value,
                disabled: desabilitar,
                maxlength: 2,
                style: "width: 100%;",
                smallDelta: 1,
                onChange: function (b) {
                    atualizarValoresParIniParFim("gridDesconto", desc, this, rowIndex, cd_tipo_desconto, dijit.byId(desc).get('value'), null);
                },
                onBlur: function (b) {
                    $('#' + desc).focus();
                }
            }, desc);
            if (hasValue(dijit.byId(desc))) {
                dijit.byId(desc).on("keypress", function (e) {
                    mascaraInt(document.getElementById(desc))
                });
            }
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function formatTextValorDescontoParFim(value, rowIndex, obj) {
    try {
        var gridDesconto = dijit.byId("gridDesconto");
        var icon;
        var desc = obj.field + '_input_PF_' + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(desc)) || dijit.byId(desc) != null)
            dijit.byId(desc).destroy();
        if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:21px' /> ";

        setTimeout("configuraTextBoxValorDescontoParFim('" + value + "', '" + desc + "','" + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto + "'," + rowIndex + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraTextBoxValorDescontoParFim(value, desc, cd_tipo_desconto, rowIndex) {
    try {
        var desabilitar = false;
        if (dijit.byId('tipoContratoAdto').aditamento)
            desabilitar = true;
        if (!hasValue(dijit.byId(desc))) {
            var newTextBox = new dijit.form.TextBox({
                name: "textBox_PF_" + desc,
                value: value,
                style: "width: 100%;",
                disabled: desabilitar,
                maxlength: 2,
                onBlur: function (b) {
                    $('#' + desc).focus();
                },
                onChange: function (b) {
                    atualizarValoresParIniParFim("gridDesconto", desc, this, rowIndex, cd_tipo_desconto, null, dijit.byId(desc).get('value'));
                },
                smallDelta: 1,
                constraints: { min: 0, pattern: '##0' }
            }, desc);
            if (hasValue(dijit.byId(desc))) {
                dijit.byId(desc).on("keypress", function (e) {
                    mascaraInt(document.getElementById(desc))
                });
            }
        }
    } catch (e) {
        postGerarLog(e);
    }
}
//gridDescontoAdt
function formatTextValorDescontoParAdtIni(value, rowIndex, obj) {
    try {
        var gridDesconto = dijit.byId("gridDescontoAdt");
        var icon;
        var desc = obj.field + '_input_PAdtI_' + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(desc)) || dijit.byId(desc) != null)
            dijit.byId(desc).destroy();
        if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:21px' /> ";

        setTimeout("configuraTextBoxValorDescontoParAdtIni('" + value + "', '" + desc + "','" + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto + "'," + rowIndex + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraTextBoxValorDescontoParAdtIni(value, desc, cd_tipo_desconto, rowIndex) {
    try {
        var desabilitar = false;
        if (!dojo.byId("ckManual").checked && dijit.byId('tipoContratoAdto').aditamento && hasValue(dijit.byId("gridAditamento").editAditamento) && dijit.byId("gridAditamento").editAditamento.id_ajuste_manual)
            desabilitar = true;
        if (!hasValue(dijit.byId(desc))) {
            var newTextBox = new dijit.form.TextBox({
                name: "textBox_PAdtI_" + desc,
                value: value,
                style: "width: 100%;",
                disabled: desabilitar,
                maxlength: 2,
                onBlur: function (b) {
                    $('#' + desc).focus();
                },
                onChange: function (b) {
                    atualizarValoresParIniParFim("gridDescontoAdt", desc, this, rowIndex, cd_tipo_desconto, dijit.byId(desc).get('value'), null);
                },
                smallDelta: 1,
                constraints: { min: 0, pattern: '##0' }
            }, desc);
            if (hasValue(dijit.byId(desc))) {
                dijit.byId(desc).on("keypress", function (e) {
                    mascaraInt(document.getElementById(desc))
                });
            }
        }

    } catch (e) {
        postGerarLog(e);
    }
}

function formatTextValorDescontoParAdtFim(value, rowIndex, obj) {
    try {
        var gridDesconto = dijit.byId("gridDescontoAdt");
        var icon;
        var desc = obj.field + '_input_PAdtF_' + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(desc)) || dijit.byId(desc) != null)
            dijit.byId(desc).destroy();
        if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:21px' /> ";

        setTimeout("configuraTextBoxValorDescontoParAdtFim('" + value + "', '" + desc + "','" + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto + "'," + rowIndex + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraTextBoxValorDescontoParAdtFim(value, desc, cd_tipo_desconto, rowIndex) {
    try {
        var desabilitar = false;
        if (!dojo.byId("ckManual").checked && dijit.byId('tipoContratoAdto').aditamento && hasValue(dijit.byId("gridAditamento").editAditamento) && dijit.byId("gridAditamento").editAditamento.id_ajuste_manual)
            desabilitar = true;
        if (!hasValue(dijit.byId(desc))) {
            var newTextBox = new dijit.form.TextBox({
                name: "textBox_PAdtF_" + desc,
                value: value,
                style: "width: 100%;",
                disabled: desabilitar,
                maxlength: 2,
                onBlur: function (b) {
                    $('#' + desc).focus();
                },
                onChange: function (b) {
                    atualizarValoresParIniParFim("gridDescontoAdt", desc, this, rowIndex, cd_tipo_desconto, null, dijit.byId(desc).get('value'));
                },
                smallDelta: 1,
                constraints: { min: 0, pattern: '##0' }
            }, desc);
            if (hasValue(dijit.byId(desc))) {
                dijit.byId(desc).on("keypress", function (e) {
                    mascaraInt(document.getElementById(desc))
                });
            }
        }
    } catch (e) {
        postGerarLog(e);
    }
}

//gridDescontoHistAdt
function formatTextValorDescontoParHistAdtIni(value, rowIndex, obj) {
    try {
        var gridDesconto = dijit.byId("gridDescontoHistAdt");
        var icon;
        var desc = obj.field + '_input_PHistAdtI_' + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(desc)) || dijit.byId(desc) != null)
            dijit.byId(desc).destroy();
        if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:21px' /> ";

        setTimeout("configuraTextBoxValorDescontoParHistAdtIni('" + value + "', '" + desc + "','" + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto + "'," + rowIndex + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraTextBoxValorDescontoParHistAdtIni(value, desc, cd_tipo_desconto, rowIndex) {
    try {
        if (!hasValue(dijit.byId(desc))) {
            var newTextBox = new dijit.form.NumberTextBox({
                name: "textBox_PHistAdtI_" + desc,
                value: value,
                style: "width: 100%;",
                maxlength: 2,
                disabled: true,
                onBlur: function (b) {
                    $('#' + desc).focus();
                },
                onChange: function (b) {
                    atualizarValoresParIniParFim("gridDescontoHistAdt", desc, this, rowIndex, cd_tipo_desconto, dijit.byId(desc).get('value'), null);
                },
                onKeypress: function (b) {
                    mascaraFloat(document.getElementById(desc));
                },
                smallDelta: 1,
                constraints: { min: 0, pattern: '##0' }
            }, desc);
            if (hasValue(dijit.byId(desc))) {
                dijit.byId(desc).on("keypress", function (e) {
                    mascaraInt(document.getElementById(desc))
                });
            }
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function formatTextValorDescontoParHistAdtFim(value, rowIndex, obj) {
    try {
        var gridDesconto = dijit.byId("gridDescontoHistAdt");
        var icon;
        var desc = obj.field + '_input_PHistAdtF_' + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(desc)) || dijit.byId(desc) != null)
            dijit.byId(desc).destroy();
        if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:21px' /> ";

        setTimeout("configuraTextBoxValorDescontoParHistAdtFim('" + value + "', '" + desc + "','" + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto + "'," + rowIndex + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraTextBoxValorDescontoParHistAdtFim(value, desc, cd_tipo_desconto, rowIndex) {
    try {
        if (!hasValue(dijit.byId(desc))) {
            var newTextBox = new dijit.form.NumberTextBox({
                name: "textBox_PHistAdtF_" + desc,
                value: value,
                style: "width: 100%;",
                maxlength: 2,
                disabled: true,
                onBlur: function (b) {
                    $('#' + desc).focus();
                },
                onChange: function (b) {
                    atualizarValoresParIniParFim("gridDescontoHistAdt", desc, this, rowIndex, cd_tipo_desconto, null, dijit.byId(desc).get('value'));
                },
                onKeypress: function (b) {
                    mascaraFloat(document.getElementById(desc));
                },
                smallDelta: 1,
                constraints: { min: 0, pattern: '##0' }
            }, desc);
            dijit.byId(desc).on("keypress", function (e) {
                mascaraFloat(document.getElementById(desc));
            });
        }
    } catch (e) {
        postGerarLog(e);
    }
}

// Percentuais
function formatTextPecentualDesconto(value, rowIndex, obj) {
    try {
        var gridDesconto = dijit.byId("gridDesconto");
        var icon;
        var desc = obj.field + '_input_' + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(desc)) || dijit.byId(desc) != null)
            dijit.byId(desc).destroy();
        if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:21px' /> ";

        //var idty = gridDesconto._by_idx[rowIndex].idty;
        setTimeout("configuraTextBoxPercDesconto('" + value + "', '" + desc + "','" + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto + "'," + rowIndex + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

//Curso
function formatCheckBoxDataCurso(value, rowIndex, obj) {
    try {
        var gridName = 'gridDataCurso';
        var grid = dijit.byId(gridName);
        var icon;
        var id = obj.field + '_Selected_' + rowIndex;
        var todos = dojo.byId('selecionaTodosCurso');

        if (hasValue(grid.itensSelecionados) && hasValue(grid._by_idx[rowIndex].item)) {
            var indice = binaryObjSearch(grid.itensSelecionados, "cd_curso", grid._by_idx[rowIndex].item.cd_curso);

            value = value || indice != null; // Item está selecionado.
        }
        if (rowIndex != -1)
            icon = "<input  class='formatCheckBox'  id='" + id + "'/> ";

        // Configura o check de todos:
        if (hasValue(todos) && todos.type == 'text')
            setTimeout("configuraCheckBox(false, 'cd_curso', 'selecionadoCurso', -1, 'selecionaTodosCurso', 'selecionaTodosCurso', '" + gridName + "')", 18);

        setTimeout("configuraCheckBox(" + value + ", 'cd_curso', 'selecionadoCurso', " + rowIndex + ", '" + id + "', 'selecionaTodosCurso', '" + gridName + "')", 2);

        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function formatTextPecentualDescontoAdt(value, rowIndex, obj) {
    try {
        var gridDescontoAdt = dijit.byId("gridDescontoAdt");
        var icon;
        var desc = obj.field + '_input_adt_' + gridDescontoAdt._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(desc)) || dijit.byId(desc) != null)
            dijit.byId(desc).destroy();
        if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:21px' /> ";

        //var idty = gridDesconto._by_idx[rowIndex].idty;
        setTimeout("configuraTextBoxPercDescontoAdt('" + value + "', '" + desc + "','" + gridDescontoAdt._by_idx[rowIndex].item.cd_tipo_desconto + "'," + rowIndex + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function formatTextPecentualDescontoHistAdt(value, rowIndex, obj) {
    try {
        var gridDescontoHistAdt = dijit.byId("gridDescontoHistAdt");
        var icon;
        var desc = obj.field + '_input_His_' + gridDescontoHistAdt._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(desc)) || dijit.byId(desc) != null)
            dijit.byId(desc).destroy();
        if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:21px' /> ";

        //var idty = gridDesconto._by_idx[rowIndex].idty;
        setTimeout("configuraTextBoxPercDescontoHistAdt('" + value + "', '" + desc + "'," + rowIndex + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraTextBoxPercDesconto(value, desc, cd_tipo_desconto, rowIndex) {
    try {
        var desabilitar = false;
        if (dijit.byId('tipoContratoAdto').aditamento)
            desabilitar = true;
        if (value == undefined || isNaN(parseFloat(value))) value = '0,00';
        else value = value.toString().replace('.', ',');

        if (!hasValue(dijit.byId(desc))) {
            require(["dijit/form/NumberTextBox", "dojo/domReady!"], function (TextBox) {
                var newTextBox = new dijit.form.NumberTextBox({
                    name: "textBox" + desc,
                    value: unmaskFixed(value, 4),
                    maxlength: 9,
                    style: "width: 100%;",
                    disabled: desabilitar,
                    onBlur: function (b) {
                        $('#' + desc).focus();
                    },
                    onChange: function (b) {
                        atualizarValoresPercentuais(desc, this, rowIndex, cd_tipo_desconto, true);
                    },
                    smallDelta: 1,
                    constraints: { min: 0, pattern: '##.0000#' }
                }, desc);

                //dijit.byId(desc).set('value', unmaskFixed(value, 2));
            });
        }
        if (hasValue(dijit.byId(desc))) {
            dijit.byId(desc).on("keypress", function (e) {
                mascaraFloat(document.getElementById(desc));
            });
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraTextBoxPercDescontoAdt(value, desc, cd_tipo_desconto, rowIndex) {
    try {
        var desabilitar = false;
        if (!dojo.byId("ckManual").checked && dijit.byId('tipoContratoAdto').aditamento && hasValue(dijit.byId("gridAditamento").editAditamento) && dijit.byId("gridAditamento").editAditamento.id_ajuste_manual)
            desabilitar = true;
        if (value == undefined || isNaN(parseFloat(value))) value = '0,00';
        else value = value.toString().replace('.', ',');
        if (!hasValue(dijit.byId(desc))) {
            require(["dijit/form/NumberTextBox", "dojo/domReady!"], function (TextBox) {
                var newTextBox = new dijit.form.NumberTextBox({
                    name: "textBox" + desc,
                    value: unmaskFixed(value, 4),
                    maxlength: 9,
                    style: "width: 100%;",
                    disabled: desabilitar,
                    onBlur: function (b) {
                        $('#' + desc).focus();
                    },
                    onChange: function (b) {
                        atualizarValoresPercentuaisAdt(desc, this, rowIndex, cd_tipo_desconto, true);
                        //calcularESetarValoresDescontoAdt(ADICIONAR, null, null, true, null);
                        simuladorAditamento(false);
                    },
                    smallDelta: 1,
                    constraints: { min: 0, pattern: '##.0000#' }
                }, desc);
            });
        }
        if (hasValue(dijit.byId(desc))) {
            dijit.byId(desc).on("keypress", function (e) {
                mascaraFloat(document.getElementById(desc));
            });
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraTextBoxPercDescontoHistAdt(value, desc, rowIndex) {
    try {
        if (value == undefined || isNaN(parseFloat(value))) value = '0,00';
        else value = value.toString().replace('.', ',');
        if (!hasValue(dijit.byId(desc))) {
            require(["dijit/form/NumberTextBox", "dojo/domReady!"], function (TextBox) {
                var newTextBox = new dijit.form.NumberTextBox({
                    name: "textBox__His_" + desc,
                    value: unmaskFixed(value, 4),
                    maxlength: 9,
                    style: "width: 100%;",
                    disabled: true,
                    smallDelta: 1,
                    constraints: { min: 0, pattern: '##.0000#' }
                }, desc);
            });
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function atualizarValoresPercentuais(desc, obj, rowIndex, cd_tipo_desconto, isPercentual) {
    try {
        apresentaMensagem("apresentadorMensagemTipoDescontoFK", '');
        apresentaMensagem("apresentadorMensagemMat", '', true);

        var gridDesconto = dijit.byId('gridDesconto');
        var idValor = '';
        var percentual = '';
        gerar_titulo = true;
        atualizar_desconto = true;
        LOADCONTRATO = false;
        if (isPercentual) {
            //limpa o campo de valor conforme regra
            idValor = gridDesconto.getRowNode(rowIndex).childNodes[0].childNodes[0].childNodes[0].childNodes[3].firstChild.childNodes[0].firstChild.id;
            percentual = obj.value;//dijit.byId(desc).get('value');

            for (var i = 0; i < gridDesconto.store.objectStore.data.length; i++) {

                var cdTipo = gridDesconto.store.objectStore.data[i].cd_tipo_desconto;
                if (cd_tipo_desconto == cdTipo) {
                    percentual = hasValue(desc) && hasValue(dijit.byId(desc).get('value')) ? dijit.byId(desc).get('value').toString().replace(',', '.') : percentual;
                    percentual = parseFloat(percentual).toFixed(4);
                    gridDesconto.store.objectStore.data[i].pc_desc = unmaskFixed(dijit.byId(desc).get('value'), 4);
                    gridDesconto.store.objectStore.data[i].pc_desconto = percentual;
                    gridDesconto.store.objectStore.data[i].vl_desconto = 0;
                    gridDesconto.store.objectStore.data[i].vl_desconto_contrato = 0;
                    break;
                }
            }
        } else { //valor em reais
            //limpa o campo de valor conforme regra
            idValor = obj.value;//dijit.byId(desc).get('value');

            percentual = gridDesconto.getRowNode(rowIndex).childNodes[0].childNodes[0].childNodes[0].childNodes[2].firstChild.childNodes[0].firstChild.id;

            for (var i = 0; i < gridDesconto.store.objectStore.data.length; i++) {
                apresentaMensagem("apresentadorMensagemMat", "", false);
                var cdTipo = gridDesconto.store.objectStore.data[i].cd_tipo_desconto;
                if (cd_tipo_desconto == cdTipo) {
                    var valorDescontoContrato = dijit.byId(desc).get('value').toString().replace(',', '.');
                    valorDescontoContrato = parseFloat(valorDescontoContrato).toFixed(2);
                    gridDesconto.store.objectStore.data[i].pc_desc = 0;
                    gridDesconto.store.objectStore.data[i].pc_desconto = 0;
                    gridDesconto.store.objectStore.data[i].vl_desconto = unmaskFixed(dijit.byId(desc).get('value'), 2);
                    gridDesconto.store.objectStore.data[i].vl_desconto_contrato = parseFloat(valorDescontoContrato);
                    break;
                }
            }
        }
        gridDesconto.update();
        //TODO: Deivid
    } catch (e) {
        postGerarLog(e);
    }
}

function atualizarValoresParIniParFim(gridName, desc, obj, rowIndex, cd_tipo_desconto, valuePI, valuePF) {
    try {
        apresentaMensagem("apresentadorMensagemTipoDescontoFK", '');
        apresentaMensagem("apresentadorMensagemMat", '', true);
        gerar_titulo = true;
        atualizar_desconto = true;
        LOADCONTRATO = false;
        var gridDesconto = dijit.byId(gridName);

        for (var i = 0; i < gridDesconto.store.objectStore.data.length; i++) {

            var cdTipo = gridDesconto.store.objectStore.data[i].cd_tipo_desconto;
            if (cd_tipo_desconto == cdTipo) {
                if (hasValue(valuePI, true))
                    gridDesconto.store.objectStore.data[i].nm_parcela_ini = valuePI;
                if (hasValue(valuePF, true))
                    gridDesconto.store.objectStore.data[i].nm_parcela_fim = valuePF;
                break;
            }
        }
        gridDesconto.update();
        //calcularESetarValoresDescontoAdt(ADICIONAR, null, null, true, null);

        if (gridName == "gridDescontoAdt") {
            simuladorAditamento(false);
        } else {
            if (verificaTipoCKMatricula() === EnumTipoCKMatricula.NORMAL)
                getValoresParaDesconto(null, null, null, false);
            else
                if (verificaTipoCKMatricula() === EnumTipoCKMatricula.MULTIPLA)
                    getValoresParaDescontoCurso(null, null, null, false);
                else
                    if (verificaTipoCKMatricula() != EnumTipoCKMatricula.MULTIPLA)
                        getValoresParaDescontoProfissionalInformatica(null, null, null, false);
        }
        //TODO: Deivid
    } catch (e) {
        postGerarLog(e);
    }
}

function atualizarValoresPercentuaisAdt(desc, obj, rowIndex, cd_tipo_desconto, isPercentual) {
    try {
        apresentaMensagem("apresentadorMensagemTipoDescontoFK", '');
        apresentaMensagem("apresentadorMensagemMat", '', true);

        var gridDescontoAdt = dijit.byId('gridDescontoAdt');
        var idValor = '';
        var percentual = '';
        //gerar_titulo = true;
        if (isPercentual) {
            //limpa o campo de valor conforme regra
            idValor = gridDescontoAdt.getRowNode(rowIndex).childNodes[0].childNodes[0].childNodes[0].childNodes[3].firstChild.childNodes[0].firstChild.id;
            percentual = obj.value;//dijit.byId(desc).get('value');

            for (var i = 0; i < gridDescontoAdt.store.objectStore.data.length; i++) {

                var cdTipo = gridDescontoAdt.store.objectStore.data[i].cd_tipo_desconto;
                if (cd_tipo_desconto == cdTipo) {
                    percentual = hasValue(desc) ? dijit.byId(desc).get('value').toString().replace(',', '.') : percentual;
                    percentual = parseFloat(percentual).toFixed(4);
                    gridDescontoAdt.store.objectStore.data[i].pc_desc = unmaskFixed(dijit.byId(desc).get('value'), 4);
                    gridDescontoAdt.store.objectStore.data[i].pc_desconto = percentual;
                    gridDescontoAdt.store.objectStore.data[i].vl_desconto = 0;
                    gridDescontoAdt.store.objectStore.data[i].vl_desconto_contrato = 0;
                    break;
                }
            }
        } else { //valor em reais
            //limpa o campo de valor conforme regra
            idValor = obj.value;//dijit.byId(desc).get('value');

            percentual = gridDescontoAdt.getRowNode(rowIndex).childNodes[0].childNodes[0].childNodes[0].childNodes[2].firstChild.childNodes[0].firstChild.id;

            for (var i = 0; i < gridDescontoAdt.store.objectStore.data.length; i++) {
                apresentaMensagem("apresentadorMensagemMat", "", false);
                var cdTipo = gridDescontoAdt.store.objectStore.data[i].cd_tipo_desconto;
                if (cd_tipo_desconto == cdTipo) {
                    var valorDescontoContrato = dijit.byId(desc).get('value').toString().replace(',', '.');
                    valorDescontoContrato = parseFloat(valorDescontoContrato).toFixed(2);
                    gridDescontoAdt.store.objectStore.data[i].pc_desc = 0;
                    gridDescontoAdt.store.objectStore.data[i].pc_desconto = 0;
                    gridDescontoAdt.store.objectStore.data[i].vl_desconto = unmaskFixed(dijit.byId(desc).get('value'), 2);
                    gridDescontoAdt.store.objectStore.data[i].vl_desconto_contrato = parseFloat(valorDescontoContrato);
                    break;
                }
            }
        }
        gridDescontoAdt.update();
    } catch (e) {
        postGerarLog(e);
    }
}

//Valores
function formatTextValorDesconto(value, rowIndex, obj) {
    try {
        var gridDesconto = dijit.byId("gridDesconto");
        var icon;
        var desc = obj.field + '_input_' + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(desc)) || dijit.byId(desc) != null)
            dijit.byId(desc).destroy();
        if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:21px' /> ";

        //var idty = gridDesconto._by_idx[rowIndex].idty;
        setTimeout("configuraTextBoxValorDesconto('" + value + "', '" + desc + "','" + gridDesconto._by_idx[rowIndex].item.cd_tipo_desconto + "'," + rowIndex + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function formatTextValorDescontoAdt(value, rowIndex, obj) {
    try {
        var gridDescontoAdt = dijit.byId("gridDescontoAdt");
        var icon;
        var desc = obj.field + '_input_adt_' + gridDescontoAdt._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(desc)) || dijit.byId(desc) != null)
            dijit.byId(desc).destroy();
        if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:21px' /> ";

        //var idty = gridDesconto._by_idx[rowIndex].idty;
        setTimeout("configuraTextBoxValorDescontoAdt('" + value + "', '" + desc + "','" + gridDescontoAdt._by_idx[rowIndex].item.cd_tipo_desconto + "'," + rowIndex + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function formatTextValorDescontoHistAdt(value, rowIndex, obj) {
    try {
        var gridDescontoHistAdt = dijit.byId("gridDescontoHistAdt");
        var icon;
        var desc = obj.field + '_input_His_' + gridDescontoHistAdt._by_idx[rowIndex].item.cd_tipo_desconto;

        if (hasValue(dijit.byId(desc)) || dijit.byId(desc) != null)
            dijit.byId(desc).destroy();
        if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:21px' /> ";

        //var idty = gridDesconto._by_idx[rowIndex].idty;
        setTimeout("configuraTextBoxValorDescontoHistAdt('" + value + "', '" + desc + "'," + rowIndex + ")", 1);
        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraTextBoxValorDesconto(value, desc, cd_tipo_desconto, rowIndex) {
    try {
        if (value == undefined || isNaN(parseFloat(value))) value = '0,00';
        else value = value.toString().replace('.', ',');
        var desabilitar = false;
        if (dijit.byId('tipoContratoAdto').aditamento)
            desabilitar = true;
        if (!hasValue(dijit.byId(desc))) {
            require(["dijit/form/NumberTextBox", "dojo/domReady!"], function (TextBox) {
                var newTextBox = new dijit.form.NumberTextBox({
                    name: "textBox" + desc,
                    value: unmaskFixed(value, 2),
                    style: "width: 100%;",
                    maxlength: 9,
                    disabled: desabilitar,
                    onBlur: function (b) {
                        $('#' + desc).focus();
                    },
                    onChange: function (b) {
                        atualizarValoresPercentuais(desc, this, rowIndex, cd_tipo_desconto, false);
                    },
                    smallDelta: 1,
                    constraints: { min: 0, pattern: '##.00#' }
                }, desc);

                //dijit.byId(desc).set('value', unmaskFixed(value, 2));
            });
        }

        if (hasValue(dijit.byId(desc))) {
            dijit.byId(desc).on("keypress", function (e) {
                mascaraFloat(document.getElementById(desc));
            });
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraTextBoxValorDescontoAdt(value, desc, cd_tipo_desconto, rowIndex) {
    try {
        var desabilitar = false;
        if (!dojo.byId("ckManual").checked && dijit.byId('tipoContratoAdto').aditamento && hasValue(dijit.byId("gridAditamento").editAditamento) && dijit.byId("gridAditamento").editAditamento.id_ajuste_manual)
            desabilitar = true;
        if (value == undefined || isNaN(parseFloat(value))) value = '0,00';
        else value = value.toString().replace('.', ',');
        if (!hasValue(dijit.byId(desc))) {
            require(["dijit/form/NumberTextBox", "dojo/domReady!"], function (TextBox) {
                var newTextBox = new dijit.form.NumberTextBox({
                    name: "textBox" + desc,
                    value: unmaskFixed(value, 2),
                    style: "width: 100%;",
                    disabled: desabilitar,
                    maxlength: 9,
                    onBlur: function (b) {
                        $('#' + desc).focus();
                    },
                    onChange: function (b) {
                        atualizarValoresPercentuaisAdt(desc, this, rowIndex, cd_tipo_desconto, false);
                        //calcularESetarValoresDescontoAdt(ADICIONAR, null, null, true, null);
                        simuladorAditamento(false);
                    },
                    smallDelta: 1,
                    constraints: { min: 0, pattern: '##.00#' }
                }, desc);
            });
        }

        if (hasValue(dijit.byId(desc))) {
            dijit.byId(desc).on("keypress", function (e) {
                mascaraFloat(document.getElementById(desc))
            });
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraTextBoxValorDescontoHistAdt(value, desc, rowIndex) {
    try {
        if (value == undefined || isNaN(parseFloat(value))) value = '0,00';
        else value = value.toString().replace('.', ',');
        if (!hasValue(dijit.byId(desc))) {
            require(["dijit/form/NumberTextBox", "dojo/domReady!"], function (TextBox) {
                var newTextBox = new dijit.form.NumberTextBox({
                    name: "textBox_His_" + desc,
                    value: unmaskFixed(value, 2),
                    style: "width: 100%;",
                    maxlength: 9,
                    disabled: true,
                    smallDelta: 1,
                    constraints: { min: 0, pattern: '##.00#' }
                }, desc);
            });
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function formatCheckBoxAditamento(value, rowIndex, obj) {
    try {
        var gridName = 'gridAditamento';
        var grid = dijit.byId(gridName);
        var icon;
        var id = obj.field + '_Selected_' + rowIndex;
        var todos = dojo.byId('selecionaTodosAdt');

        if (hasValue(grid.itensSelecionados) && hasValue(grid._by_idx[rowIndex].item)) {
            var indice = binaryObjSearch(grid.itensSelecionados, "cd_aditamento", grid._by_idx[rowIndex].item.cd_aditamento);

            value = value || indice != null; // Item está selecionado.
        }
        if (rowIndex != -1)
            icon = "<input  class='formatCheckBox'  id='" + id + "'/> ";

        // Configura o check de todos:
        if (hasValue(todos) && todos.type == 'text')
            setTimeout("configuraCheckBox(false, 'cd_aditamento', 'selecionadoAditamento', -1, 'selecionaTodosAdt', 'selecionaTodosAdt', '" + gridName + "')", 18);

        setTimeout("configuraCheckBox(" + value + ", 'cd_aditamento', 'selecionadoAditamento', " + rowIndex + ", '" + id + "', 'selecionaTodosAdt', '" + gridName + "')", 2);

        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function formatCheckEmitidoCNAB(value, rowIndex, obj) {
    try {
        var gridTitulo = dijit.byId("gridTitulo");
        var icon;
        var id = obj.field + '_Selected_' + gridTitulo._by_idx[rowIndex].item.id + '-8';
        if (value == null || value == undefined)
            value = true;
        if (hasValue(dijit.byId(id)))
            dijit.byId(id).destroy();

        if (rowIndex != -1 && hasValue(id))
            icon = "<input class='formatCheckBox' id='" + id + "' />";
        setTimeout(function () {
            configuraCheckBoxEmitidoCNAB(value, rowIndex, id);
        }, 1);

        return icon;
    } catch (e) {
        postGerarLog(e);
    }
}

function configuraCheckBoxEmitidoCNAB(value, rowIndex, id) {
    try {
        if (!hasValue(dijit.byId(id))) {
            var checkBox = new dijit.form.CheckBox({
                disabled: true,
                name: "checkBox",
                checked: value
            }, id);
        }
    } catch (e) {
        postGerarLog(e);
    }
}

//#endregion

//#endregion
//#region selecionaTabMat - setarTabCad
function selecionaTabMat(e) {
    try {
        var tab = dojo.query(e.target).parents('.dijitTab')[0];

        if (!hasValue(tab)) // Clicou na borda da aba:
            tab = dojo.query(e.target)[0];
        if (tab.getAttribute('widgetId') == 'tabContainerNegociacao_tablist_idCheque')
            abrirTabCheque();

        if (tab.getAttribute('widgetId') == 'tabContainerMatricula_tablist_tabPrincipalMat')
            abrirTabPrincipal();

        if (tab.getAttribute('widgetId') == 'tabContainerMatricula_tablist_dvTitulo') {
            if (LOADCONTRATO) {
                LOADCONTRATO = false;
                gerar_titulo = false;
            }
            if ((!abriuTagTitulos && hasValue(dojo.byId('cd_contrato').value) && !gerar_titulo) ||
                (!abriuTagTitulos && hasValue(dojo.byId('cd_contrato').value) && dijit.byId("ckManual").checked && gerar_titulo)) {
                montarPesqTitulo(parseInt(dojo.byId('cd_contrato').value), false, null);
                dijit.byId('paBaixa').style.display = 'block';
            }
            if (gerar_titulo) {
                dijit.byId('paBaixa').style.display = '';
                abrirTabTitulo(dojo.ready, dojo.store.Memory, dijit.form.FilteringSelect, dojo.data.ObjectStore, dojo.xhr, dojox.json.ref);
            }

            var cd_tipo_financeiro = dijit.byId("tipoDocumento").value;
            
            if (hasValue(cd_tipo_financeiro))
                getLocalMovtoGeralOuCartaoMatricula(cd_tipo_financeiro);
        }
        if (tab.getAttribute('widgetId') == 'tabContainerNegociacao_tablist_cpDesconto')
            abrirDesconto();

        if (tab.getAttribute('widgetId') == 'tabContainerMatricula_tablist_tagAditivo') {

            ativarTagAditamento("none");
            var cdNomeContrato = dijit.byId("tipoContratoAdto").value;
            if (hasValue(cdNomeContrato) && cdNomeContrato > 0) {
                configurarLayouTagAditamento(cdNomeContrato);
                marcarMatriculaComLayoutAditamento(null, null, cdNomeContrato);
            }
            else {
                //dijit.byId('tipoAditamento').set("disabled", true);
                configurarLayouTagAditamento(0);
                marcarMatriculaComLayoutAditamento(null, null, null);
            }

            //if (hasValue(cdNomeContrato) && hasValue(dijit.byId('tipoAditamento').value)) {
            //    existeAditamentoMesmaDataHistorico(dijit.byId("tipoAditamento").value, false);
            //}

            //else {
            //    //Aditamento
            //    ativarDesativarCamposAditamentoOnClickNovo(true, false);
            //}
            if (dijit.byId('tipoAditamento').value == ADICIONAR_PARCELAS) {
                existeAdtAdicionarParcelaBaixado();
            } else {
                abrirDescontoAdt();
            }
        }

        if (tab.getAttribute('widgetId') == 'tabContainerNegociacao_tablist_tabTaxaMatricula') {
            var cd_taxa_matricula = dojo.byId('cd_taxa_matricula').value;
            if (parseInt(cd_taxa_matricula) <= 0)
                abrirTaxaMatricula();
        }

        if (tab.getAttribute('widgetId') == 'tabContainerNegociacao_tablist_tabMensalidade')
            abrirMensalidade();

        //Corrige o problema de não atualizar o grid de cursos
        if(hasValue(gridDataCurso) &&
            hasValue(gridDataCurso.store) &&
            hasValue(gridDataCurso.store.objectStore) &&
            hasValue(gridDataCurso.store.objectStore.data.length >= 0) && (tab.id.indexOf("selecionadoCurso_Selected") == -1)) {
            dijit.byId("gridDataCurso").update();
        }
        
    } catch (e) {
        postGerarLog(e);
    }
}

function abrirTabPrincipal() {
    var tabContainerNegociacao = dijit.byId('tabContainerNegociacao');
}

function abrirTabTitulo(ready, Memory, filteringSelect, ObjectStore, xhr, ref) {
    try {
	    ALTEROU_RESPONSAVEL = false;
	    ALTEROU_DT_VENCIMENTO = false;
        abriuTagTitulos = true;
        var atualizou = false;

        if (atualizar_desconto) {
            //TODO:Deivid
            atualizou = atualizarDescontosMensalidade();

            if (!atualizou) {
                var tabContainerMatricula = dijit.byId('tabContainerMatricula');
                var tabContainerNegociacao = dijit.byId('tabContainerNegociacao');

                tabContainerNegociacao.selectChild(tabContainerNegociacao.getChildren()[2]);

                tabContainerMatricula.selectChild(tabContainerMatricula.getChildren()[0]);
            }
            else {

                atualizar_desconto = false;
            }
        }
        else
            atualizou = true;

        if (atualizou)
            criarAtualizarTitulo(Memory, ObjectStore, xhr, ref, function () { 
                dijit.byId("gridTitulo").update();
                dijit.byId("gridBaixa").update();
            }, GERARTITULO);
        //Redimensiona a grade de título, para que a mesma não cresça:
        var gridTitulo = dojo.byId('gridTitulo');
        gridTitulo.style.height = '310px';
        dijit.byId('panelGridTitulo').resize();
        gridTitulo.style.width = '1500px';

        dijit.byId("gridTitulo").update();
        dijit.byId("gridBaixa").update();
    } catch (e) {
        postGerarLog(e);
    }
}

function abrirDesconto() {
    try {
        //gerar_titulo = true;
        dojo.byId("descontoPrimeiraParc").value = 0;
        apresentaMensagem("apresentadorMensagemMat", '', false);
        dijit.byId("gridDesconto").update();
        dojo.byId('pesquisarBD').value = false;
        /*var gridDesconto = dijit.byId("gridDesconto");
        var cd_contrato = parseInt(dojo.byId('cd_contrato').value);
        if (cd_contrato != null || cd_contrato > 0)
            if (gridDesconto != null && gridDesconto.store != null && gridDesconto.store.objectStore.data.length == 0)
                getSearchDescontoContrato(cd_contrato);*/
    } catch (e) {
        postGerarLog(e);
    }
}

function abrirTaxaMatricula() {
    try {
        apresentaMensagem("apresentadorMensagemMat", '', false);
        var hasTabOpened = true;
        var cd_contrato = parseInt(dojo.byId('cd_contrato').value);
        if ((cd_contrato != null || cd_contrato > 0))
            getSearchTaxaMatricula(cd_contrato);
    } catch (e) {
        postGerarLog(e);
    }
}

function abrirMensalidade() {
    try {
        if (atualizar_desconto) {
            //TODO:Deivid
            var atualizou = atualizarDescontosMensalidade();

            if (!atualizou) {
                var tabContainerNegociacao = dijit.byId('tabContainerNegociacao');

                tabContainerNegociacao.selectChild(tabContainerNegociacao.getChildren()[2]);
            }
            else
                atualizar_desconto = false;
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function atualizarDescontosMensalidade() {
    try {
        var valorCurso = dijit.byId("vl_contrato").get('value');
        valorCurso = unmaskFixed(valorCurso, 2);

        var valorDesconto = dijit.byId("valorDesconto").get('value');
        valorDesconto = unmaskFixed(valorDesconto, 2);

        var nroParcelas = getNroParcelas("parcelas");
        //var valorParcela = dijit.byId('valorParcela').value;
        var valorParcela = calcularRetornarValorParcela(valorCurso, nroParcelas, valorDesconto);

        apresentaMensagem("apresentadorMensagemMat", '', false);
        if ((!dijit.byId("tipoContratoAdto").aditamento) || (!hasValue(dijit.byId("tipoAditamento").value)))
            if (verificaTipoCKMatricula() === EnumTipoCKMatricula.NORMAL)
                getValoresParaDesconto(null, null, null, false);
            else
                if (verificaTipoCKMatricula() === EnumTipoCKMatricula.MULTIPLA)
                    getValoresParaDescontoCurso(null, null, null, false);
                else
                    if (verificaTipoCKMatricula() != EnumTipoCKMatricula.MULTIPLA)
                        getValoresParaDescontoProfissionalInformatica(null, null, null, false);
        //Verifica a consistência do desconto máximo e desconto na primeira parcela.
        var atualizou = true;
        if (!consistirDescontoMaximo(valorDesconto, valorCurso))
            atualizou = false;

        //Calcula valor de desconto da primeira parcela:
        var valorDescontoParcela = calcularDescontoPrimeiraParcela(valorCurso);

        if (!consistirDescontosParcela(valorParcela, valorDescontoParcela))
            atualizou = false;

        if (atualizou) {
            //Calcula e seta o valor liquido:
            var valorLiquido = calcularERetornarValorFaturar(valorCurso, nroParcelas, valorDesconto);

            dijit.byId('valorFaturar')._onChangeActive = false;
            dijit.byId('valorFaturar').set('value', unmaskFixed(valorLiquido, 2));
            dijit.byId('valorFaturar').old_value = valorLiquido;
            dijit.byId('valorFaturar')._onChangeActive = true;
            //Atribui os valores calculados:
            dijit.byId('descontoPrimeiraParcela').set('value', unmaskFixed(valorDescontoParcela, 2));
        }
        return atualizou;
    } catch (e) {
        postGerarLog(e);
    }
}

function getNroParcelas(idComp) {
    try {
        var nroParcelas = dijit.byId(idComp).get('value');
        if (isNaN(nroParcelas) || nroParcelas == "" || nroParcelas == null || nroParcelas == 0) {
            nroParcelas = 1;
            dijit.byId(idComp).set('value', 1);
        }
        return nroParcelas;
    } catch (e) {
        postGerarLog(e);
    }
}

function getNroParcelasCurso() {
    try {
        var nroParcelas = getAllNumeroParcelasCursoGrid(dijit.byId('gridDataCurso'));
        if (isNaN(nroParcelas) || nroParcelas == "" || nroParcelas == null || nroParcelas == 0) {
            nroParcelas = 1;
            dijit.byId(idComp).set('value', 1);
        }
        return nroParcelas;
    } catch (e) {
        postGerarLog(e);
    }
}

function getNroParcelasAdt(idComp) {
    try {
        var nroParcelas = dijit.byId(idComp).get('value');
        if ((hasValue(dijit.byId("tipoAditamento").value) && dijit.byId("tipoAditamento").value == ADICIONAR_PARCELAS) && (isNaN(nroParcelas) || nroParcelas == "" || nroParcelas == null || nroParcelas == 0)) {
            nroParcelas = 1;
            dijit.byId(idComp).set('value', 1);
        }
        return nroParcelas;
    } catch (e) {
        postGerarLog(e);
    }
}

function setarTabCadMatricula(validacao) {
    try {
        var tabs = dijit.byId("tabContainerMatricula");
        var pane = dijit.byId("tabPrincipalMat");
        tabs.selectChild(pane);
        if (!validacao)
            dijit.byId("tabContainerNegociacao").selectChild(dijit.byId("tabMensalidade"));
    } catch (e) {
        postGerarLog(e);
    }
}

function selecionaTabValores(e) {
    try {
        var tab = dojo.query(e.target).parents('.dijitTab')[0];

        if (!hasValue(tab)) // Clicou na borda da aba
            tab = dojo.query(e.target)[0];

        if (tab.getAttribute('widgetId') == 'tabContainerNegociacao_tablist_dijit_layout_ContentPane_2')
            abrirTabDesconto();
    } catch (e) {
        postGerarLog(e);
    }
}

function abrirTabDesconto() {
    try {
        dijit.byId('gridDesconto').update();
    } catch (e) {
        postGerarLog(e);
    }
}

function getErrorCamposPreencher() {
    var camposPreencher = "";
    if (!hasValue(dojo.byId("dia").value))
        camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", dia" : " dia";
    if (!hasValue(dojo.byId("mes").value))
        camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", mês" : " mês";
    if (!hasValue(dojo.byId("ano").value))
        camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", ano" : " ano";

    return camposPreencher;
}
//#endregion 

function formatDataHora(dataParametro) {
    if (hasValue(dataParametro)) {
        //    this.data = dojo.date.locale.parse(new Date(dataParametro),
        //        { formatLength: 'short', selector: 'date', locale: 'pt-br' });
        this.data = dojo.date.locale.format(new Date(dataParametro),
            { selector: "date", datePattern: "dd/MM/yyyy HH:mm:ss ", formatLength: "short", locale: "pt-br" });
        return this.data;
    } else {
        return "";
    }
}

function formatDataGrid(dataParametro) {
    if (hasValue(dataParametro)) {
        //    this.data = dojo.date.locale.parse(new Date(dataParametro),
        //        { formatLength: 'short', selector: 'date', locale: 'pt-br' });
        this.data = dojo.date.locale.format(new Date(dataParametro),
            { selector: "date", datePattern: "dd/MM/yyyy", formatLength: "short", locale: "pt-br" });
        return this.data;
    } else {
        return "";
    }
}

function formatTextDtVcto(value, rowIndex, obj) {
	var gridTitulo = dijit.byId("gridTitulo");
	var icon;
	var desc = obj.field + '_input_' + gridTitulo._by_idx[rowIndex].item.id;

	if (hasValue(dijit.byId(desc), true))
		dijit.byId(desc).destroy();
	if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:17px' /> ";

    setTimeout("configuraTextBoxVlDtVcto('" + value + "', '" + desc + "','" + gridTitulo._by_idx[rowIndex].item.id + "'," + rowIndex + "," + gridTitulo._by_idx[rowIndex].item.vl_titulo + "," + gridTitulo._by_idx[rowIndex].item.vl_saldo_titulo + "," + gridTitulo._by_idx[rowIndex].item.vl_liquidacao_titulo + "," + gridTitulo._by_idx[rowIndex].item.possuiBaixa + "," + gridTitulo._by_idx[rowIndex].item.id_emitido_CNAB + "," + gridTitulo._by_idx[rowIndex].item.id_cnab_contrato + "," + gridTitulo._by_idx[rowIndex].item.possuiBaixaBolsa + ")", 1);
	return icon;
}

function configuraTextBoxVlDtVcto(value, desc, id, rowIndex, vl_titulo, vl_saldo_titulo, vl_liquidacao_titulo, possuiBaixa, id_emitido_CNAB, id_cnab_contrato, possuiBaixaBolsa) {

    if ((dijit.byId(desc) == null)) {
        require(["dijit/form/DateTextBox", "dojo/domReady!"], function (DateTextBox) {
            value = value == "" ? null : value;
            var newTextBox = new DateTextBox({
                name: "data" + desc,
				value: value,
                old_value: value,
				required: true,
				disabled: ( //possui baixa
						vl_saldo_titulo != vl_titulo &&
						vl_liquidacao_titulo > 0 &&
						((possuiBaixa != undefined &&
							possuiBaixa != null &&
                        possuiBaixa === true) || (possuiBaixaBolsa != undefined &&
							possuiBaixaBolsa != null &&
							possuiBaixaBolsa === true))) ||
					(id_emitido_CNAB === true || id_cnab_contrato === true),
				style: "width: 100%;",
                onChange: function (b) {
	                atualizarValoresVlDtVcto(desc, this, rowIndex, id);
                },
				onClick: function (b) { setarFocus(this); }
            }, desc);

            if (dijit.byId(desc) != null) {
                dijit.byId(desc).set('value', value);
                dojo.byId(desc).old_value = value;
                dojo.byId(desc).value = value;
                maskDate("#" + desc);
            }
            
		});
	}
	
}

function setarFocus(obj) {
	$('#' + obj.id).focus();
}


function formatTextVlTaxaCartao(value, rowIndex, obj) {
    var gridTitulo = dijit.byId("gridTitulo");
	var icon;
    var desc = obj.field + '_input_' + gridTitulo._by_idx[rowIndex].item.id;

	if (hasValue(dijit.byId(desc), true))
		dijit.byId(desc).destroy();
	if (rowIndex != -1) icon = "<input id='" + desc + "' style='height:17px' /> ";

    setTimeout("configuraTextBoxVlTaxaCartao('" + value + "', '" + desc + "','" + gridTitulo._by_idx[rowIndex].item.id + "'," + rowIndex + "," + gridTitulo._by_idx[rowIndex].item.vl_liquidacao_titulo + "," + gridTitulo._by_idx[rowIndex].item.cd_tipo_financeiro + ")", 1);
	return icon;
}

function configuraTextBoxVlTaxaCartao(value, desc, id , rowIndex, vl_liquidacao_titulo, cd_tipo_financeiro) {
	if (value == undefined || isNaN(parseFloat(value))) value = '0,00';
	else value = value.toString().replace('.', ',');

	if (!hasValue(dijit.byId(desc))) {
		require(["dijit/form/NumberTextBox", "dojo/domReady!"], function (TextBox) {
			var newTextBox = new dijit.form.NumberTextBox({
				name: "textBox" + desc,
                //value: unmaskFixed(value, 2),
				old_value: unmaskFixed(value, 2),
                //diff_value: !vl_taxa_cartao ? 0 : unmaskFixed(value, 2),
                disabled: (cd_tipo_financeiro == CARTAO && vl_liquidacao_titulo == 0) ? false : true,
				maxlength: 9,
                style: "width: 100%;",
				onBlur: function (b) {
					$('#' + desc).focus();
				},
				onChange: function (b) {
					atualizarValoresVlTaxaCartao(desc, this, rowIndex, id);
					//calcularValorTroco();
				},
				smallDelta: 1,
				constraints: { min: 0, pattern: '##.00#' }
			}, desc);
			newTextBox._onChangeActive = false;
			newTextBox.set('value', unmaskFixed(value, 2));
			newTextBox.value = unmaskFixed(value, 2);
			newTextBox._onChangeActive = true;
			//dijit.byId(desc).set('value', unmaskFixed(value, 2));
		});
	}
	if (hasValue(dijit.byId(desc))) {
		dijit.byId(desc).on("keypress", function (e) {
			mascaraFloat(document.getElementById(desc));
		});
	}
}

function atualizarValoresVlTaxaCartao(desc, obj, rowIndex, id) {
	try {

        var gridTitulo = dijit.byId('gridTitulo');
        var item = getItemStoreTaxaCartao(gridTitulo, id);
		var objDijit = dijit.byId(obj.id);

		apresentaMensagem("apresentadorMensagemCadBaixa", '');
		consisteVlTaxaCartao(item, objDijit.old_value, objDijit.value);
		gridTitulo.update();
	}
	catch (e) {
		postGerarLog(e);
	}
}

function getItemStoreTaxaCartao(grid, id) {
	try {
		for (var i = 0; i < grid.store.objectStore.data.length; i++) {

			var _id = grid.store.objectStore.data[i].id;
            if (_id == id)
				return grid.store.objectStore.data[i];
		}
		return null;
	}
	catch (e) {
		postGerarLog(e);
	}
}



function consisteVlTaxaCartao(item, valorAntigo, valorAtual) {
    try {
        

        if (isNaN(valorAtual) || !hasValue(valorAtual, true)) {


            item.vl_taxa_cartao = valorAntigo;
            item.vlTaxaCartao = maskFixed(item.vl_taxa_cartao + "", 2);
            item.pc_taxa_cartao = calculaPcTaxaCartao(item);
            


            return;
        }
        
        item.vl_taxa_cartao = valorAtual;
        item.vlTaxaCartao = maskFixed(item.vl_taxa_cartao + "", 2);
        item.pc_taxa_cartao = calculaPcTaxaCartao(item);
        item.tituloEdit = true;
        
        //var total = dijit.byId("vlTotal").value - valorAntigo + valorAtual;
        //unmaskFixed(dijit.byId("vlTotal").set("value", total) + "", 2);
    }
    catch (e) {
        postGerarLog(e);
    }
}

function calculaPcTaxaCartao(item) {
	try {
		var vl_taxa_cartao = item.vl_taxa_cartao;
		var vl_titulo = item.vl_titulo;
        var pc_taxa_cartao = vl_taxa_cartao / (vl_titulo / 100);

        return unmaskFixed(pc_taxa_cartao, 2);
	} catch (e) {
		postGerarLog(e);
	} 
	
}


function atualizarValoresVlDtVcto(desc, obj, rowIndex, id) {
	try {

		var gridTitulo = dijit.byId('gridTitulo');
        var item = getItemStoreVlDtVcto(gridTitulo, id);

        var objdijit = dijit.byId(obj.id);
        var objDojo = dojo.byId(obj.id);

        var dataMin = new Date(1899, 12, 01);
        var dataMax = new Date(2079, 05, 06);
        if (dojo.date.compare(dataMin, objdijit.value) > 0) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaMatMin);
            apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
            consisteVlDtVcto(item, objDojo.old_value, "");
        }
        else if (dojo.date.compare(objdijit.value, dataMax) > 0) {
	        var mensagensWeb = new Array();
	        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaMatMax);
	        apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
	        consisteVlDtVcto(item, objDojo.old_value, "");

        } else {

	        
	        consisteVlDtVcto(item, objDojo.old_value, objDojo.value);

	        
        }

        apresentaMensagem("apresentadorMensagemCadBaixa", '');
        gridTitulo.update();
		

		
	}
	catch (e) {
		postGerarLog(e);
	}
}

function getItemStoreVlDtVcto(grid, id) {
	try {
		for (var i = 0; i < grid.store.objectStore.data.length; i++) {

			var _id = grid.store.objectStore.data[i].id;
			if (_id == id)
				return grid.store.objectStore.data[i];
		}
		return null;
	}
	catch (e) {
		postGerarLog(e);
	}
}



function consisteVlDtVcto(item, valorAntigo, valorAtual) {
	try {


		if (!hasValue(valorAtual)) {

            item.dt_vcto = valorAntigo;
            item.dt_vcto_titulo = dojo.date.locale.parse(valorAntigo, { formatLength: 'short', selector: 'date', locale: 'pt-br' });

            return;
		}

        item.dt_vcto = valorAtual;
        item.dt_vcto_titulo = dojo.date.locale.parse(valorAtual, { formatLength: 'short', selector: 'date', locale: 'pt-br' });
        item.alterou_dt_vcto_titulo = true;
        ALTEROU_DT_VENCIMENTO = true;

	}
	catch (e) {
		postGerarLog(e);
	}
}


//#region montarCadastroMatriculaPartial
function montarCadastroMatriculaPartial(pFuncao, Permissoes) {
    require([
    "dojo/_base/xhr",
    "dojo/dom",
    "dojox/grid/EnhancedGrid",
    "dojox/grid/enhanced/plugins/Pagination",
    "dojo/store/JsonRest",
    "dojox/data/JsonRestStore",
    "dojo/data/ObjectStore",
    "dojo/store/Cache",
    "dojo/store/Memory",
    "dojo/query",
    "dijit/form/Button",
    "dojox/grid/enhanced/plugins/NestedSorting",
    "dojo/ready",
    "dojo/on",
    "dijit/form/DropDownButton",
    "dijit/DropDownMenu",
    "dijit/MenuItem",
    "dijit/form/FilteringSelect",
    "dojox/json/ref",
    "dojo/window",
    "dojo/date",
    "dijit/Tooltip",
    "dijit/Dialog",
    "dojo/domReady!"
    ], function (xhr, dom, EnhancedGrid, Pagination, JsonRest, JsonRestStore, ObjectStore, Cache, Memory, query, Button, NestedSorting, ready, on, DropDownButton, DropDownMenu, MenuItem, filteringSelect, ref, window, date, Tooltip) {
        ready(function () {
            try {

                dijit.byId('dtaInicioMat').set('disabled', false);
                dijit.byId('dtaFinalMat').set('disabled', false);
                dijit.byId('tipoMatricula').set('disabled', false);
                dijit.byId('vl_pre_matricula').set('disabled', false);
                dijit.byId('ckTransfCad').set('disabled', false);
                dijit.byId('id_venda_pacote').set('disabled', false);
                //dijit.byId('ckManual').set('disabled', false);
                dijit.byId('ckCertificado').set('disabled', false);
                dojo.byId("id_motivo_aditamento").value = false;

                //habilita a ação relacionada Editar da grid dos titulos
                require([
                        "dojo/on",
                        "dijit/registry",
                        "dojo/ready",
                        "dojo/require"
                    ],
                    function (on, registry, ready) {
                        ready(function () {

                            if (hasValue(registry.byId("acoesRelacionadasTit"))) {
                                registry.byId("acoesRelacionadasTit").dropDown._getFirst().set("disabled", false);
                            }
                                
                           
                        });
                    });

                dijit.byId("tipoContratoAdto").aditamento = false;
                dojo.byId('telaMensagem').value = CONTRATO;
                dijit.byId("cd_curso_atual").set("required", true);
                dijit.byId("cd_produto_atual").set("required", true);
                dijit.byId("cd_duracao_atual").set("required", true);
                dijit.byId("cd_regime_atual").set("required", true);
                dijit.byId("valorFaturar").set("required", false);
                dijit.byId('valorCurso').set('disabled', false);
                dojo.byId('pesquisarBD').value = true;
                changeFieldsMensalidade(false);
                clearVariablesAssitValores();
                getParametros(xhr);
                criarCamposCadPessoaResponsavel(Button, on);
                // Corrige o tamanho do pane que o dojo cria para o dialog com scroll no ie7:
                if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) {
                    var ieversion = new Number(RegExp.$1);
                    if (ieversion == 7)
                    // Para IE7
                        dojo.byId('cadMatricula').childNodes[1].style.height = '100%';
                }

                var dataTurma = [];
                var gridTurmaMat = new EnhancedGrid({
                    store: new ObjectStore({ objectStore: new Memory({ data: dataTurma }) }),
                    structure:
                    [
                        { name: "<input id='selecionaTodosTurma' style='display:none'/>", field: "selecionadoTurma", width: "5%", styles: "text-align:center; min-width:15px; max-width:20px;", formatter: formatCheckBoxTurma },
                        { name: "Turma", field: "no_turma", width: "50%" },
                        { name: "Produto", field: "no_produto", width: "10%" },
                        { name: "Professor", field: "no_professor", width: "20%" },
                        { name: "Situação", field: "situacaoAlunoTurma", width: "15%" }
                    ],
                    canSort: true,
                    noDataMessage: "Nenhum registro encontrado."
                }, "gridTurmaMat");
                gridTurmaMat.startup();

                //TODO Rever esse código
                var dataDesconto = [];

                var gridDesconto = new EnhancedGrid({
                    store: new ObjectStore({ objectStore: new Memory({ data: dataDesconto }) }),
                    structure:
                    [
                        { name: "<input id='selecionaTodosDesc' style='display:none'/>", field: "selecionadoDesc", width: "5%", styles: "text-align:center; min-width:15px; max-width:20px;", formatter: formatCheckBoxDesc },
                        { name: "Desconto", field: "dc_tipo_desconto", width: "26%" },
                        { name: "Desc(%)", field: "pc_desconto", width: "12%", styles: "text-align:center;", formatter: formatTextPecentualDesconto },
                        { name: "Desc(R$)", field: "vl_desconto_contrato", width: "13%", styles: "text-align:center;", formatter: formatTextValorDesconto },
                        { name: "Parc.Ini", field: "nm_parcela_ini", width: "12%", styles: "text-align:center;", formatter: formatTextValorDescontoParIni },
                        { name: "Parc.Fim", field: "nm_parcela_fim", width: "12%", styles: "text-align:center;", formatter: formatTextValorDescontoParFim },
                        { name: "Baixa", field: "id_incide_baixa", width: "10%", styles: "text-align:center; min-width:15px; max-width:20px;", formatter: formatCheckDesconto },
                        { name: "Ativo", field: "id_desconto_ativo", width: "10%", styles: "text-align:center; min-width:15px; max-width:20px;", formatter: formatCheckDescontoAtivo }
                    ],
                    canSort: true,
                    noDataMessage: "Nenhum registro encontrado."
                }, "gridDesconto");
                gridDesconto.startup();
                gridDesconto.listaTitulosDescontos = [];

                //var dataCurso = [
                //    { cd_curso: 1, no_curso: 'Essentials 1', nm_dia: '5', nm_mes: '01', nm_ano: '2019', nm_parcelas: '6', vl_curso: '1.200,00', no_tipo: 'Cheque', id_liberar: 'Não' },
                //    { cd_curso: 2, no_curso: 'Essentials 2', nm_dia: '5', nm_mes: '07', nm_ano: '2019', nm_parcelas: '6', vl_curso: '1.500,00', no_tipo: 'Boleto', id_liberar: 'Não' },
                //];

                var gridDataCurso = new EnhancedGrid({
                    store: new ObjectStore({ objectStore: new Memory({ data: null }) }),
                    structure:
                    [
                        { name: "<input id='selecionaTodosCurso' style='display:none'/>", field: "selecionadoCurso", width: "5%", styles: "text-align:center; min-width:15px; max-width:20px;", formatter: formatCheckBoxDataCurso },
                        { name: "Curso", field: "no_curso", width: "15%" },
                        { name: "Dia", field: "nm_dia", width: "5%", styles: "text-align:center;" },
                        { name: "Mês", field: "nm_mes", width: "5%", styles: "text-align:center;" },
                        { name: "Ano", field: "nm_ano", width: "5%", styles: "text-align:center; min-width:15px; max-width:20px;" },
                        { name: "Parcelas", field: "nm_parcelas", width: "6%", styles: "text-align:center; min-width:15px; max-width:20px;" },
                        { name: "Vl.Curso", field: "vl_curso", width: "6%", styles: "text-align:right; min-width:15px; max-width:20px;", formatter: valorCursoFormatter },
                        { name: "Tipo Financeiro", field: "no_tipo", width: "10%", styles: "text-align:left; min-width:15px; max-width:20px;" },
                        { name: "Lib.Certif.", field: "id_liberar", width: "7%", styles: "text-align:center; min-width:15px; max-width:20px;", formatter: certificadoFormatter }
                    ],
                    canSort: true,
                    noDataMessage: "Nenhum registro encontrado.",
                    contentEditable: false
                }, "gridDataCurso");

                //gridDataCurso.pagination.plugin._paginator.plugin.connect(gridDataCurso.pagination.plugin._paginator, 'onSwitchPageSize', function (evt) {
                //    verificaMostrarTodos(evt, gridDataCurso, 'cd_curso', 'selecionaTodosCurso');
                //});
                require(["dojo/aspect"],
                    function(aspect) {
                        aspect.after(gridDataCurso,
                            "_onFetchComplete",
                            function() {
                                // Configura o check de todos:
                                if (dojo.byId('selecionaTodosCurso').type == 'text')
                                    setTimeout(
                                        "configuraCheckBox(false, 'cd_curso', 'selecionadoCurso', -1, 'selecionaTodosCurso', 'selecionaTodosCurso', 'gridDataCurso')",
                                        gridDataCurso.rowsPerPage * 3);
                            });
                    });

                gridDataCurso.canSort = function(col) { return false };
                gridDataCurso.startup();

                gridDataCurso.on("RowClick", function (evt) {
                //    if (dijit.byId(evt.grid.id)._by_idx[evt.rowIndex].item.no_tipo == "Cheque")
                //        dijit.byId('idCheque').set('disabled', false);
                //    else
                //        dijit.byId('idCheque').set('disabled', true);
                }, true);

                gridDataCurso.on("RowDblClick",
                    function(evt) {
                        try {
                            var idx = evt.rowIndex,
                                item = this.getItem(idx),
                                store = this.store;
                            //if (item.vl_liquidacao_titulo > 0) {
                            //    var mensagensWeb = new Array();
                            //    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroTituloBaixado);
                            //    apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                            //    return false;
                            //}

                            apresentaMensagem('apresentadorMensagem', '');
                            gridDataCurso.itemSelecionado = item;
                            dijit.byId("cadMensalidade").show();
                            keepValuesDataCurso(item, gridDataCurso);

                            //keepValuesTitulos(gridTitulo.itemSelecionado);
                            IncluirAlterar(0,
                                'divAlterarDataCurso',
                                'divIncluirDataCurso',
                                'divExcluirDataCurso',
                                'apresentadorMensagemsDataCurso',
                                'divCancelarDataCurso',
                                'divLimparDataCurso');
                            //document.getElementById("divExcluirTitulo").style.display = "none";
                            //dijit.byId("dialogTitulo").show();


                        } catch (e) {
                            postGerarLog(e);
                        }
                    },
                    true);

                require(["dojo/aspect"],
                    function (aspect) {
                        aspect.after(gridDataCurso,
                            "_onFetchComplete",
                            function () {
                                // Configura o check de todos:
                                if (dojo.byId('selecionaTodosCurso').type == 'text')
                                    setTimeout(
                                        "configuraCheckBox(false, 'cd_curso', 'selecionadoCurso', -1, 'selecionaTodosCurso', 'selecionaTodosCurso', 'gridDataCurso')",
                                        gridDataCurso.rowsPerPage * 3);
                            });
                    });
                new Button({
                        label: "Incluir",
                        iconClass: 'dijitEditorIcon dijitEditorIconRedo',
                        onClick: function() {

                            addGridItemCurso(Memory, ObjectStore, xhr, ref);
                            calculaValorContrato();
                            calculaValorMaterialContrato();
                            //Não há necessidade pois na entrada do curso já jogou o valor
                            //if ((dijit.byId('ckMultipla').checked ||
                            //        dijit.byId('ckProfissional').checked ||
                            //        dijit.byId('ckInformatica').checked) &&
                            //    (dijit.byId('valorTaxaMatricula').value > 0.0)) {
                            //    dijit.byId('valorMatriculaGrid').set('value', dijit.byId('valorTaxaMatricula').value);
                            //    //dijit.byId('valorMatriculaTotal').set('value', dijit.byId('parcelas').value);
                            //} else if ((dijit.byId('ckMultipla').checked ||
                            //        dijit.byId('ckProfissional').checked ||
                            //        dijit.byId('ckInformatica').checked) &&
                            //    (dijit.byId('valorTaxaMatricula').value == 0.0)) {
                            //    dijit.byId('valorMatriculaGrid').set('value', 0.0);
                            //}
                            dijit.byId('idCheque').setAttribute('disabled', desabilitar_cheque);
                            if (!desabilitar_cheque)
                                populaBanco(0, 'banco');
                            calculaValorMatriculaTotal();
                        }
                    },
                    "incluirCurso");
                new Button({
                        label: "Alterar",
                        iconClass: 'dijitEditorIcon dijitEditorIconCancel',
                        onClick: function() {
                            dijit.byId('idCheque').setAttribute('disabled', desabilitar_cheque);
                            if (!desabilitar_cheque)
                                populaBanco(0, 'banco');
                            LOADCONTRATO = LOADCONTRATO ? !ATUALIZOU_CURSO : LOADCONTRATO;
                            alterarGridItemCurso();
                            if (ATUALIZOU_CURSO) {
                                calculaValorContrato();
                                calculaValorMaterialContrato();
                                calculaValorMatriculaTotal();
                            }
                        }
                    },
                    "alterarCurso");
                new Button({
                        label: "Apagar",
                        iconClass: 'dijitEditorIcon dijitEditorIconDelete',
                        onClick: function() {
                            caixaDialogo(DIALOGO_CONFIRMAR, '', function executaRetorno() { Deletar() });
                        }
                    },
                    "deleteCurso");
                new Button({
                        label: "Fechar",
                        iconClass: 'dijitEditorIcon dijitEditorIconCancel',
                        onClick: function() { 
                            ALTERAR_LIBERAR_CERTIFICADO_C = false;
                            ATUALIZOU_CURSO = false;
                            dijit.byId("cadMensalidade").hide();
                        }
                    },
                    "fecharCurso");
                new Button({
                        label: "Limpar",
                        iconClass: 'dijitEditorIcon dijitEditorIconCancel',
                        onClick: function() {
                            ALTERAR_LIBERAR_CERTIFICADO_C = false;
                            ATUALIZOU_CURSO = true;
                            limparDataCurso(xhr, ref);
                        }
                    },
                    "limparCurso");

                new Button({
                    label: "Gerar", iconClass: 'dijitEditorIcon dijitEditorIconNewPage', onClick: function () {
                        postVincularMaterial(Memory, ObjectStore);

                    }
                }, "btnVincularMaterial");

                new Button({
                    label: "Fechar", iconClass: 'dijitEditorIcon dijitEditorIconCancel', onClick: function () {
                        dijit.byId('dialogVincularMaterial').hide();
                    }
                }, "fecharDialogVincularMaterial");

                //Botao Incluir Curso
                var button = new Button({
                    label: "Incluir",
                    name: "itensDC",
                    id: "itensDC",
                    onClick: function() {
                        ATUALIZOU_CURSO = gerar_titulo;
                        if (!verificaCheckedMatriculaMultipla() && !hasValue(dijit.byId('tipoDocumento').value)) {

                            var mensagensWeb = new Array();
                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, msgValidaCampoTipoFinanceiro);
                            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, false);
                        } else {
                            if (!verificaSeExistAlunoParteMsg(dojo.byId('cd_pessoa_aluno_mat').value,
                                dojo.byId('cd_aluno_mat').value,
                                'Para incluir um curso')) {
                                dijit.byId('cd_produto_atual').setValue("");
                                return false;
                            } else {
                                if (dijit.byId("gridTurmaMat").store.objectStore.data.length === 0 &&
                                (dijit.byId("cd_produto_atual").validate() == false ||
                                    dijit.byId("cd_curso_atual").validate() == false ||
                                    dijit.byId("cd_regime_atual").validate() == false ||
                                    dijit.byId("cd_duracao_atual").validate() == false)) {
                                    dijit.byId("formSemTurmaMat").validate();
                                    dijit.byId("tagSemTurma").set("open", true);

                                    var mensagensWeb = new Array();
                                    mensagensWeb[0] =
                                        new MensagensWeb(MENSAGEM_AVISO, msgValidaCamposMatriculaSemTurma);
                                    apresentaMensagem("apresentadorMensagemMat", mensagensWeb, false);
                                } else {
                                    if (dijit.byId('ckMultipla').checked &&
                                    (hasValue(gridDataCurso) &&
                                        hasValue(gridDataCurso.store) &&
                                        hasValue(gridDataCurso.store.objectStore) &&
                                        hasValue(gridDataCurso.store.objectStore.data.length == 0))) {
                                        dijit.byId("cd_curso_atualCurso").set("disabled", true);
                                        dijit.byId('diaCurso').set('disabled', false);
                                        dijit.byId('mesCurso').set('disabled', false);
                                        dijit.byId('anoCurso').set('disabled', false);

                                        dijit.byId('anoInicialCurso').set('disabled', false);
                                        dijit.byId('anoFinalCurso').set('disabled', false);

                                        dijit.byId('mesInicialCurso').set('disabled', false);
                                        dijit.byId('mesFinalCurso').set('disabled', false);

                                        dijit.byId('parcelasCurso').set('disabled', false);
                                        dijit.byId('tipoDocumentoCurso').set('disabled', false);
                                        //dojo.byId('tipoDocumentoCurso').set('disabled', true);
                                        //dojo.byId('cd_responsavel_mensCurso').set('disabled', true);
                                        dijit.byId('cadPessoaResponsavelCurso').set('disabled', false);
                                        dijit.byId('pessoaResponsavelCurso').set('disabled', false);
                                        dijit.byId('percentualResponsavelCurso').set('disabled', false);
                                        dijit.byId('ckCertificadoCurso').set('disabled', false);
                                        //Curso Atual, Duração Atual,cd_proximo_curso,Pessoa Responsável e Bolsa do Aluno Material se houver
                                        getProximoCursoPorProdutoSemMatriculaSimultaneaPrimeiraTurma(
                                            dijit.byId("cd_produto_atual").value,
                                            dijit.byId("cd_curso_atual").value,
                                            xhr,
                                            ref);
                                        //Valores da Tabela de Preço, inclusive a taxa de matricula
                                        getValoresTabelaPrecoCursoGrid(xhr, dijit.byId('cd_curso_atual').get('value'), dijit.byId('cd_duracao_atual').get('value'), 0, false);
                                    } else if (dijit.byId('ckMultipla').checked &&
                                    (hasValue(gridDataCurso) &&
                                        hasValue(gridDataCurso.store) &&
                                        hasValue(gridDataCurso.store.objectStore) &&
                                        hasValue(gridDataCurso.store.objectStore.data) &&
                                        hasValue(gridDataCurso.store.objectStore.data.length >= 1))) {
                                        dijit.byId("cd_curso_atualCurso").set("disabled", true);
                                        dijit.byId('diaCurso').set('disabled', false);
                                        dijit.byId('mesCurso').set('disabled', false);
                                        dijit.byId('anoCurso').set('disabled', false);

                                        dijit.byId('anoInicialCurso').set('disabled', false);
                                        dijit.byId('anoFinalCurso').set('disabled', false);

                                        dijit.byId('mesInicialCurso').set('disabled', false);
                                        dijit.byId('mesFinalCurso').set('disabled', false);

                                        dijit.byId('parcelasCurso').set('disabled', false);
                                        dijit.byId('tipoDocumentoCurso').set('disabled', false);
                                        //dojo.byId('tipoDocumentoCurso').set('disabled', true);
                                        //dojo.byId('cd_responsavel_mensCurso').set('disabled', true);
                                        dijit.byId('cadPessoaResponsavelCurso').set('disabled', false);
                                        dijit.byId('pessoaResponsavelCurso').set('disabled', false);
                                        dijit.byId('percentualResponsavelCurso').set('disabled', false);
                                        dijit.byId('ckCertificadoCurso').set('disabled', false);
                                        if (getMaxIdProximoCurso(gridDataCurso) == true) {
                                            var posicao = getUltimoCursoInserido(gridDataCurso);
                                            //LBM Vai consultar tabela de preço também para o próximo curso.    
                                            getProximoCursoPorProdutoSemMatriculaSimultanea(dijit.byId("cd_produto_atual").value, (posicao >= 0) ? dijit.byId("gridDataCurso").store.objectStore.data[posicao].cd_proximo_curso : 0, xhr, ref);
                                        } else {
                                            var mensagensWeb = new Array();
                                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "Não há próximo curso para incluir");
                                            apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                                        }
                                    }
                                    else if (dijit.byId('ckProfissional').checked || dijit.byId('ckInformatica').checked) {
                                        if (dijit.byId('dia').validate() === true &&
                                            dijit.byId('mes').validate() === true &&
                                            dijit.byId('ano').validate() === true &&
                                            dijit.byId('parcelas').validate() === true &&
                                            dijit.byId('tipoDocumento').validate() === true &&
                                            hasValue(dojo.byId('tipoDocumento').value) &&
                                            hasValue(dojo.byId('cd_responsavel_mens')) &&
                                            hasValue(dijit.byId('pessoaResponsavel')) &&
                                            (dijit.byId('percentualResponsavel').value > 0)) {

                                            dijit.byId("cadMensalidade").show();
                                            limparItemCurso();

                                            //LBM Vai seguir a tabela de Preço
                                            //if (parseFloat(dojo.byId('valorTaxaMatricula').value) > 0) {
                                            //    dijit.byId('valorMatriculaGrid').set("value", dijit.byId('valorTaxaMatricula').value);
                                            //}

                                            dijit.byId('diaCurso').set("value", dijit.byId('dia').value);
                                            dijit.byId('mesCurso').set("value", dijit.byId('mes').value);
                                            dijit.byId('anoCurso').set("value", dijit.byId('ano').value);

                                            dijit.byId('anoInicialCurso').set("value", dijit.byId('anoInicial').value);
                                            dijit.byId('anoFinalCurso').set("value", dijit.byId('anoFinal').value);

                                            dijit.byId('mesInicialCurso').set("value", dijit.byId('mesInicial').value);
                                            dijit.byId('mesFinalCurso').set("value", dijit.byId('mesFinal').value);


                                            dijit.byId('parcelasCurso').set("value", dijit.byId('parcelas').value);
                                            dijit.byId('tipoDocumentoCurso').set('value', dijit.byId('tipoDocumento').value);
                                            dojo.byId('tipoDocumentoCurso').value = dojo.byId('tipoDocumento').value;
                                            dojo.byId('cd_responsavel_mensCurso').value = dojo.byId('cd_responsavel_mens').value;
                                            dijit.byId('pessoaResponsavelCurso').set("value", dojo.byId('pessoaResponsavel').value);
                                            dijit.byId('percentualResponsavelCurso').value = dijit.byId('percentualResponsavel').value;
                                            dijit.byId('ckCertificadoCurso').set('disabled', false);
                                            dijit.byId('ckCertificadoCurso').set('checked', dijit.byId('ckCertificado').checked);
                                            dijit.byId('ckCertificadoCurso').set('disabled', true);

                                            dijit.byId('anoInicialCurso').set('disabled', true);
                                            dijit.byId('anoFinalCurso').set('disabled', true);
                                            dijit.byId('mesInicialCurso').set('disabled', true);
                                            dijit.byId('mesFinalCurso').set('disabled', true);
                                            dijit.byId('diaCurso').set('disabled', true);
                                            dijit.byId('mesCurso').set('disabled', true);
                                            dijit.byId('anoCurso').set('disabled', true);
                                            dijit.byId('parcelasCurso').set('disabled', true);
                                            dijit.byId('tipoDocumentoCurso').set('disabled', true);
                                            dijit.byId('cadPessoaResponsavelCurso').set('disabled', true);
                                            dijit.byId('pessoaResponsavelCurso').set('disabled', true);
                                            dijit.byId('percentualResponsavelCurso').set('disabled', true);

                                            dijit.byId("cd_curso_atualCurso").set("disabled", false);
                                            if ((hasValue(gridDataCurso) &&
                                                hasValue(gridDataCurso.store) &&
                                                hasValue(gridDataCurso.store.objectStore) &&
                                                hasValue(gridDataCurso.store.objectStore.data) &&
                                                hasValue(gridDataCurso.store.objectStore.data.length >= 1))) {
                                                dijit.byId("cd_curso_atualCurso").reset();
                                            } else {
                                                dijit.byId("cd_curso_atualCurso").set("value",
                                                    dijit.byId("cd_curso_atual").value);
                                            }
                                            dijit.byId("cd_duracao_atual_curso").set("value",
                                                dijit.byId("cd_duracao_atual").value);
                                            IncluirAlterar(1,
                                                'divAlterarDataCurso',
                                                'divIncluirDataCurso',
                                                'divExcluirDataCurso',
                                                'apresentadorMensagemsDataCurso',
                                                'divCancelarDataCurso',
                                                'divLimparDataCurso');

                                        }
                                        getValoresTabelaPrecoCursoGrid(xhr, dijit.byId('cd_curso_atual').get('value'), dijit.byId('cd_duracao_atual').get('value'), 0, false);
                                    } else {
                                        dijit.byId("cadMensalidade").show();
                                        limparItemCurso();
                                        sugereDiaOpcoesPgto(xhr, ref, 0, 0, 0, 0);
                                        dijit.byId("cd_curso_atualCurso").set("disabled", false);
                                        dijit.byId("cd_curso_atualCurso")
                                            .set("value", dijit.byId("cd_curso_atual").value);
                                        dijit.byId("cd_duracao_atual_curso").set("value",
                                            dijit.byId("cd_duracao_atual").value);

                                        IncluirAlterar(1,
                                            'divAlterarDataCurso',
                                            'divIncluirDataCurso',
                                            'divExcluirDataCurso',
                                            'apresentadorMensagemsDataCurso',
                                            'divCancelarDataCurso',
                                            'divLimparDataCurso');
                                    }
                                    if (dojo.byId("pc_bolsa_material_aluno").value > 0 && hasValue(dijit.byId("dt_inicio_bolsa_aluno").value)) {
                                        if (dojo.date.compare(dijit.byId('dtaMatricula').value, dijit.byId("dt_inicio_bolsa_aluno").value, "date") >= 0) {
                                            dijit.byId("pcBolsaMaterialC").set("disabled", false);
                                            dijit.byId("vlMaterialContratoCDescontoC").set("disabled", false);
                                            dijit.byId("pcBolsaMaterialC").set("value", unmaskFixed(dojo.byId("pc_bolsa_material_aluno").value, 2));
                                        } else {
                                            dijit.byId("vlMaterialContratoCDescontoC").set("disabled", true);
                                            dijit.byId("pcBolsaMaterialC").set("disabled", true);
                                            dijit.byId("pcBolsaMaterialC").reset();
                                        }
                                    } else {
                                        dijit.byId("vlMaterialContratoCDescontoC").set("disabled", false);
                                        dijit.byId("pcBolsaMaterialC").set("disabled", false);
                                    }
                                }
                            }
                        }
                    }
                });
                dom.byId("btnaddDataCurso").appendChild(button.domNode);
                //Ações Relacionadas Desconto
                var menuD = new DropDownMenu({ style: "height: 25px" });

                var acaoRemover = new MenuItem({
                    label: "Excluir",
                    onClick: function() {}
                });
                menuD.addChild(acaoRemover);


                //Ações Relacionadas Data Curso
                var menuD = new DropDownMenu({ style: "height: 25px" });

                var acaoEditar = new MenuItem({
                    label: "Editar",
                    onClick: function() {
                        eventoEditarCurso(dijit.byId("gridDataCurso").itensSelecionados);
                        //calculaValorContrato();
                        //calculaValorMaterialContrato();
                        //calculaValorMatriculaTotal();
                    }
                });
                menuD.addChild(acaoEditar);

                var acaoRemover = new MenuItem({
                    label: "Excluir",
                    onClick: function() {
                        deletarItemCurso(Memory, ObjectStore);
                        calculaValorContrato();
                        calculaValorMaterialContrato();
                        calculaValorMatriculaTotal();
                    }
                });

                menuD.addChild(acaoRemover);

                var acaoIncluirTurma = new MenuItem({
                    label: "Incluir Turma",
                    onClick: function() {
                        incluirTurmaItemSelecionadoCursoGrid(Memory, ObjectStore, 'id', dijit.byId("gridDataCurso"));
                    }
                });

                menuD.addChild(acaoIncluirTurma);

                var acaoGerarMovimento = new MenuItem({
                    label: "Venda de Material",
                    onClick: function () {
                        gerarVendaItemSelecionadoCursoGrid(Memory, ObjectStore, 'id', dijit.byId("gridDataCurso"), false);
                    }
                });
                menuD.addChild(acaoGerarMovimento);

                var acaoGerarMovimentoF = new MenuItem({
                    label: "Venda de Material Futura",
                    onClick: function () {
                        gerarVendaItemSelecionadoCursoGrid(Memory, ObjectStore, 'id', dijit.byId("gridDataCurso"), true);
                    }
                });
                menuD.addChild(acaoGerarMovimentoF);

                var buttonD = new DropDownButton({
                    label: "Ações Relacionadas",
                    name: "acoesRelacionadasCurso",
                    dropDown: menuD,
                    id: "acoesRelacionadasCurso"
                });
                dom.byId("linkDataCurso").appendChild(buttonD.domNode);

                // Grade aditamento
                var gridDescontoAdt = new EnhancedGrid({
                        store: new ObjectStore({ objectStore: new Memory({ data: dataDesconto }) }),
                        structure:
                        [
                            {
                                name: "<input id='selecionaTodosDescAdt' style='display:none'/>",
                                field: "selecionadoDescAdt",
                                width: "5%",
                                styles: "text-align:center; min-width:15px; max-width:20px;",
                                formatter: formatCheckBoxDescAdt
                            },
                            { name: "Desconto", field: "dc_tipo_desconto", width: "26%" },
                            {
                                name: "Desc(%)",
                                field: "pc_desconto",
                                width: "12%",
                                styles: "text-align:center;",
                                formatter: formatTextPecentualDescontoAdt
                            },
                            {
                                name: "Desc(R$)",
                                field: "vl_desconto_contrato",
                                width: "13%",
                                styles: "text-align:center;",
                                formatter: formatTextValorDescontoAdt
                            },
                            {
                                name: "Parc.Ini",
                                field: "nm_parcela_ini",
                                width: "12%",
                                styles: "text-align:center;",
                                formatter: formatTextValorDescontoParAdtIni
                            },
                            {
                                name: "Parc.Fim",
                                field: "nm_parcela_fim",
                                width: "12%",
                                styles: "text-align:center;",
                                formatter: formatTextValorDescontoParAdtFim
                            },
                            {
                                name: "Baixa",
                                field: "id_incide_baixa",
                                width: "10%",
                                styles: "text-align:center; min-width:15px; max-width:20px;",
                                formatter: formatCheckDescontoAdt
                            },
                            {
                                name: "Ativo",
                                field: "id_desconto_ativo",
                                width: "10%",
                                styles: "text-align:center; min-width:15px; max-width:20px;",
                                formatter: formatCheckDescontoAtivoAdt
                            }
                        ],
                        canSort: true,
                        noDataMessage: "Nenhum registro encontrado."
                    },
                    "gridDescontoAdt");
                gridDescontoAdt.startup();
                gridDescontoAdt.cloneItensDesconto = new Array();
                gridDescontoAdt.listaTodosTitulos = new Array();
                // Grade descontos histórico aditamento
                var gridDescontoHistAdt = new EnhancedGrid({
                        store: new ObjectStore({ objectStore: new Memory({ data: dataDesconto }) }),
                        structure:
                        [
                            { name: "Desconto", field: "dc_tipo_desconto", width: "35%" },
                            {
                                name: "Desc(%)",
                                field: "pc_desconto",
                                width: "12%",
                                styles: "text-align:center;",
                                formatter: formatTextPecentualDescontoHistAdt
                            },
                            {
                                name: "Desc(R$)",
                                field: "vl_desconto_contrato",
                                width: "13%",
                                styles: "text-align:center;",
                                formatter: formatTextValorDescontoHistAdt
                            },
                            {
                                name: "Parc.Ini",
                                field: "nm_parcela_ini",
                                width: "10%",
                                styles: "text-align:center;",
                                formatter: formatTextValorDescontoParHistAdtIni
                            },
                            {
                                name: "Parc.Fim",
                                field: "nm_parcela_fim",
                                width: "10%",
                                styles: "text-align:center;",
                                formatter: formatTextValorDescontoParHistAdtFim
                            },
                            {
                                name: "Baixa",
                                field: "id_incide_baixa",
                                width: "10%",
                                styles: "text-align:center; min-width:15px; max-width:20px;",
                                formatter: formatCheckDescontoHistAdt
                            },
                            {
                                name: "Ativo",
                                field: "id_desconto_ativo",
                                width: "10%",
                                styles: "text-align:center; min-width:15px; max-width:20px;",
                                formatter: formatCheckDescontoAtivoHistAdt
                            }
                        ],
                        canSort: true,
                        noDataMessage: "Nenhum registro encontrado."
                    },
                    "gridDescontoHistAdt");
                gridDescontoHistAdt.startup();

                var dataTitulo = new Array();

                var gridTitulo = new EnhancedGrid({
                        store: new ObjectStore({ objectStore: new Memory({ data: dataTitulo }) }),
                        structure:
                        [
                            {
                                name: "<input id='selecionaTodosTit' style='display:none'/>",
                                field: "selecionadoTit",
                                width: "25px",
                                styles: "text-align:center; min-width:15px; max-width:20px;",
                                formatter: formatCheckBoxTit
                            },
                            {
                                name: "TP",
                                field: "dc_tipo_titulo",
                                width: "4%",
                                styles: "text-align:center; min-width:15px; max-width:20px;",
                                id: 'iTP'
                            },
                            {
                                name: "Parc.",
                                field: "nm_parcela_titulo",
                                width: "5%",
                                styles: "min-width:40px;text-align:center;"
                            },
                            {
                                name: "Tipo Financeiro",
                                field: "tipoDoc",
                                width: "8%",
                                styles: "text-align:center;min-width:50px;"
                            },
                            {
                                name: "Nro Doc.",
                                field: "dc_num_documento_titulo",
                                width: "6%",
                                styles: "min-width:60px;"
                            },
                            {
                                name: "Emissão",
                                field: "dt_emissao",
                                width: "6%",
                                styles: "min-width:60px; max-width:60px;"
                            },
                            {
                                name: "Vencimento",
                                field: "dt_vcto",
                                width: "6%",
                                styles: "min-width:60px; max-width:60px;"
                                //formatter: formatTextDtVcto

                            },
                            {
                                name: "Emitido CNAB",
                                field: "id_emitido_CNAB",
                                width: "8%",
                                styles: "text-align:center;min-width:60px; max-width:60px;",
                                formatter: formatCheckEmitidoCNAB
                            },
                            {
                                name: "Valor",
                                field: "vlTitulo",
                                width: "6%",
                                styles: "text-align:right; min-width:60px;"
                            },
	                        {
		                        name: "Taxa Cartão",
		                        field: "vl_taxa_cartao",
		                        width: "6%",
                                styles: "text-align:right; min-width:60px;",
                                formatter: formatTextVlTaxaCartao
	                        },

                            {
                                name: "Saldo",
                                field: "vlSaldoTitulo",
                                width: "6%",
                                styles: "text-align:right; min-width:60px;"
                            },
                            { name: "Responsável", field: "nomeResponsavel", width: "15%", styles: "min-width:70px;" },
                            {
                                name: "Local de Movimento",
                                field: "descLocalMovto",
                                width: "25%",
                                styles: "min-width:70px;"
                            }
                        ],
                        canSort: true,
                        noDataMessage: "Nenhum registro encontrado.",
                        plugins: {
                            pagination: {
                                pageSizes: ["11", "22", "44", "100", "All"],
                                description: true,
                                sizeSwitch: true,
                                pageStepper: true,
                                defaultPageSize: "11",
                                gotoButton: true,
                                /*page step to be displayed*/
                                maxPageStep: 5,
                                /*position of the pagination bar*/
                                position: "button",
                                plugins: { nestedSorting: true }
                            }
                        }
                    },
                    "gridTitulo");
                dojo.byId('gridTitulo').style.width = '1500px';
                gridTitulo.canSort = function(col) { return col == 100 };
                //dojo.byId('gridTitulo').style.height = '200px';
                //dojo.byId('gridTitulo').children[2].style = "margin-top: 133px;position: relative;";
                gridTitulo.startup();

                gridTitulo.on("RowDblClick",
                    function(evt) {
                        try {
                            if (!hasValue(dojo.byId('id_motivo_aditamento').value) ||
                                dojo.byId('id_motivo_aditamento').value == "true") {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                                    "Não é permitido editar títulos com aditamento");
                                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                                return false;
                            }

                            var idx = evt.rowIndex,
                                item = this.getItem(idx),
                                store = this.store;
                            if (item.vl_liquidacao_titulo > 0) {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroTituloBaixado);
                                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                                return false;
                            }

                            apresentaMensagem('apresentadorMensagem', '');
                            gridTitulo.itemSelecionado = item;
                            keepValuesTitulos(gridTitulo.itemSelecionado);
                            //TODO VERIFICAR DEPOIS
                            IncluirAlterar(0,
                                'divAlterarTitulo',
                                'divIncluirTitulo',
                                'divExcluirTitulo',
                                'apresentadorMensagemTitulo',
                                'divCancelarTitulo',
                                'divClearTitulo');
                            document.getElementById("divExcluirTitulo").style.display = "none";
                            dijit.byId("dialogTitulo").show();
                        } catch (e) {
                            postGerarLog(e);
                        }
                    },
                    true);

                gridTitulo.on("RowClick",
                    function(evt) {
                        try {
                            var idx = evt.rowIndex, item = this.getItem(idx), store = this.store;
                            //if (hasValue(gridTitulo.itemSelecionado) && gridTitulo.itemSelecionado.cd_titulo == item.cd_titulo)
                            //    return false;

                            if (hasValue(item) &&
                                (!hasValue(item.cd_titulo) || item.cd_titulo == 0) &&
                                !item.possuiBaixa &&
                                !item.possuiBaixaBolsa) {
                                limparGridBaixas();
                                return false;
                            }
                            showCarregando();
                            gridTitulo.itemSelecionado = item;
                            dijit.byId("gridBaixa").itenSelecionado = item;

                            if (hasValue(item) && hasValue(item.cd_titulo) && item.cd_titulo > 0) {

                                xhr.get({
                                    url: Endereco() +
                                        "/api/financeiro/getBaixaTituloByCodTitulo?cd_titulo=" +
                                        item.cd_titulo,
                                    preventCache: true,
                                    handleAs: "json",
                                    headers: {
                                        "Accept": "application/json",
                                        "Content-Type": "application/json",
                                        "Authorization": Token()
                                    }
                                }).then(function(data) {
                                        try {
                                            limparGridBaixas();
                                            apresentaMensagem("apresentadorMensagem", null);
                                            var gridBaixa = dijit.byId("gridBaixa");
                                            data = jQuery.parseJSON(data).retorno;
                                            if (!hasValue(data) || data.length <= 0)
                                                data = null;
                                            gridBaixa.setStore(new dojo.data.ObjectStore({
                                                objectStore: new Memory({ data: data })
                                            }));
                                            showCarregando();
                                            //dijit.byId("vl_taxa_cartao_input_" + item.id).focus();
                                            //dojo.byId("cpf").focus();
                                        } catch (e) {
                                            postGerarLog(e);
                                        }
                                    },
                                    function(error) {
                                        apresentaMensagem('apresentadorMensagem', error);
                                        showCarregando();
                                    });
                            }
                        } catch (e) {
                            postGerarLog(e);
                        }
                    },
                    true);

                //Baixa Financeira 
                var gridBaixa = new EnhancedGrid({
                        store: new ObjectStore({ objectStore: new Memory({ data: null }) }),
                        structure:
                        [
                            {
                                name: "<input id='selecionaTodosBaixa' style='display:none'/>",
                                field: "selecionadoBaixa",
                                width: "5%",
                                styles: "text-align:center; min-width:15px; max-width:20px;",
                                formatter: formatCheckBoxBaixa
                            },
                            { name: "Data", field: "dta_baixa", width: "10%", styles: "min-width:60px;" },
                            {
                                name: "Valor",
                                field: "VLLiquidacaoBaixa",
                                width: "10%",
                                styles: "text-align:right; min-width:60px;"
                            },
                            {
                                name: "Multa",
                                field: "VLMultaBaixa",
                                width: "10%",
                                styles: "text-align:right; min-width:60px;"
                            },
                            {
                                name: "Juros",
                                field: "VLJurosBaixa",
                                width: "10%",
                                styles: "text-align:right; min-width:60px;"
                            },
                            {
                                name: "Desconto",
                                field: "VLDescontoBaixa",
                                width: "10%",
                                styles: "text-align:right; min-width:60px;"
                            },
                            {
                                name: "Tipo Baixa",
                                field: "dc_tipo_liqui",
                                width: "20%",
                                styles: "text-align:center;min-width:50px;"
                            },
                            { name: "Banco", field: "no_banco_baixa", width: "30%", styles: "min-width:70px;" }
                        ],
                        canSort: true,
                        noDataMessage: "Nenhum registro encontrado."
                    },
                    "gridBaixa");
                dojo.byId('gridBaixa').style.width = '1000px';
                gridBaixa.startup();


                var gridAditamento = new EnhancedGrid({
                        store: new ObjectStore({ objectStore: new Memory({ data: null }) }),
                        structure:
                        [
                            {
                                name: "<input id='selecionaTodosAdt' style='display:none'/>",
                                field: "selecionadoAditamento",
                                width: "5%",
                                styles: "text-align:center; min-width:15px; max-width:20px;",
                                formatter: formatCheckBoxAditamento
                            },
                            {
                                name: "Data/Hora",
                                field: "dt_aditamento",
                                width: "12%",
                                styles: "text-align:center;",
                                formatter: formatDataHora
                            },
                            {
                                name: "Data",
                                field: "dt_inicio_aditamento",
                                width: "8%",
                                styles: "text-align:center;",
                                formatter: formatDataGrid
                            },
                            {
                                name: "Vcto.Ini",
                                field: "dt_vencto_inicial",
                                width: "9%",
                                styles: "text-align:center; min-width:15px; max-width:20px;",
                                formatter: formatDataGrid
                            },
                            { name: "TDI", field: "dc_tipo_data", width: "9%", styles: "text-align:center;" },
                            {
                                name: "Dias",
                                field: "nm_dia_vcto_desconto",
                                width: "5%",
                                styles: "text-align:center; min-width:15px; max-width:20px;"
                            },
                            {
                                name: "Nome",
                                field: "no_contrato",
                                width: "9%",
                                styles: "text-align:center; min-width:15px; max-width:20px;"
                            },
                            {
                                name: "Aditamento",
                                field: "dc_tipo_aditamento",
                                width: "9%",
                                styles: "text-align:center; min-width:15px; max-width:20px;"
                            },
                            {
                                name: "Prev",
                                field: "nm_previsao_inicial",
                                width: "5%",
                                styles: "text-align:center; min-width:15px; max-width:20px;"
                            },
                            {
                                name: "Aula",
                                field: "val_aula_hora",
                                width: "5%",
                                styles: "text-align:center; min-width:15px; max-width:20px;"
                            },
                            {
                                name: "Tipo",
                                field: "dc_tipo_pagamento",
                                width: "6%",
                                styles: "text-align:center; min-width:15px; max-width:20px;"
                            },
                            {
                                name: "Nº Titulos",
                                field: "nm_titulos_aditamento",
                                width: "7%",
                                styles: "text-align:center; min-width:15px; max-width:20px;"
                            },
                            {
                                name: "Val. Parcela",
                                field: "vlParcelaTituloAditamento",
                                width: "8%",
                                styles: "text-align:center; min-width:15px; max-width:20px;"
                            },
                            {
                                name: "Vcto. 1º",
                                field: "dtaVctoAditamento",
                                width: "9%",
                                styles: "text-align:center; min-width:15px; max-width:20px;"
                            },
                            {
                                name: "Val. Aditivo",
                                field: "valor_aditivo",
                                width: "7%",
                                styles: "text-align:center; min-width:15px; max-width:20px;"
                            },
                            {
                                name: "Val. Material",
                                field: "valor_material",
                                width: "8%",
                                styles: "text-align:center; min-width:15px; max-width:20px;"
                            },
                            {
                                name: "Usuário",
                                field: "no_usuario",
                                width: "9%",
                                styles: "text-align:left; min-width:15px; max-width:20px;"
                            }
                        ],
                        canSort: true,
                        noDataMessage: "Nenhum registro encontrado."
                    },
                    "gridAditamento");
                gridAditamento.startup();
                gridAditamento.editAditamento = null;
                dojo.byId('gridAditamento').style.width = '1200px';

                //Botão Novo Aditamento
                new Button({
                        label: "Novo",
                        iconClass: 'dijitEditorIcon dijitEditorIconNewSGF',
                        onClick: function() {

                    try {
                            //var cdNomeContrato = dijit.byId("tipoContratoAdto").value;
                            //var tipoContratoAdto = dijit.byId("tipoContratoAdto");
                            //var nomeContrato = null;

                            if (dijit.byId("ckManual").checked == true) {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroRealizarAditamentoAjusteManualMarcado);
                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                return false;
                            }

                            // LBM Desabilitado em 17/06/21 por estar repetido
                            //ativarDesativarCamposAditamentoOnClickNovo(false, true);
                            //resetAditamento();
                            //
                            //if (verificarMatriculaValorZerado()) {
                            //    var mensagensWeb = new Array();
                            //    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroRealizarAditamentoAjusteManualMarcado);
                            //    apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                            //    return false;
                            //}

                                ativarDesativarCamposAditamentoOnClickNovo(false, true);
                                resetAditamento();

                                if (verificarMatriculaValorZerado()) {
                                    var mensagensWeb = new Array();
                                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroMatriculaValorZerado);
                                    apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                    dijit.byId('tipoContratoAdto')._onChangeActive = false;
                                    dijit.byId('tipoContratoAdto').reset();
                                    ativarTagAditamento("none");
                                    dijit.byId('tipoContratoAdto')._onChangeActive = true;
                                    return false;
                                } else if (verificarAlteracaoMensalidadeContrato()) {

                                    var mensagensWeb = new Array();
                                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                                        msgErroEditMensalidadesAditamentoContrato);
                                    apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                    dijit.byId('tipoContratoAdto')._onChangeActive = false;
                                    dijit.byId('tipoContratoAdto').reset();
                                    ativarTagAditamento("none");
                                    dijit.byId('tipoContratoAdto')._onChangeActive = true;
                                    return false;
                                }

                                //var data = hasValue(tipoContratoAdto) && hasValue(tipoContratoAdto.store.data) ? tipoContratoAdto.store.data : null;
                                //if (hasValue(data)) {
                                //    $.each(data, function (index, val) {
                                //        if (cdNomeContrato == val.id)
                                //            nomeContrato = val;
                                //    });

                                //    var dtInicioAditamento = dijit.byId('dtInicioAditamento').value;
                                //    if (nomeContrato && nomeContrato.id_motivo_aditamento) {
                                //        if (hasValue(dtInicioAditamento)) {

                                //            validarDataInicioAditamento(dijit.byId("tipoAditamento").value);

                                //            gerar_titulo = true;
                                //            verificarDatasAditamento(dtInicioAditamento);
                                //            habilitarAditamentoBaixado();
                                //        }
                                //    }
                                //}
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "btnNovoAdto");

                new Button({
                        label: "Contrato",
                        iconClass: "dijitEditorIcon dijitEditorIconPrint",
                        onClick: function() {
                            if (hasValue(dojo.byId("cd_contrato").value)) {
                                imprimirContrato(dojo.byId("cd_contrato").value);
                            }

                        }
                    },
                    "btnImprimirC");

                //Upload-Download(contrato digitalizado)
                new Button({
                    label: "",
                    iconClass: 'dijitEditorIcon dijitEditorIconDownload',
                    onClick: function () { }
                }, "btnDownContratoDigitalizado");

                //new Button({
                //    label: "",
                //    iconClass: 'dijitEditorIcon dijitEditorIconUpload',
                //    onClick: function () { crudContratoDigitalizadoEArquivo(xhr, "") }
                //}, "btnUp");

                var buttonFkArray = ['uploaderContratoDigitalizado', 'btnDownContratoDigitalizado'];
                for (var p = 0; p < buttonFkArray.length; p++) {
                    var buttonFk = document.getElementById(buttonFkArray[p]);

                    if (hasValue(buttonFk)) {
                        buttonFk.parentNode.style.minWidth = '18px';
                        buttonFk.parentNode.style.width = '18px';
                    }
                }

                new Tooltip({
                    connectId: ["uploaderContratoDigitalizado"],
                    label: "Upload",
                    position: ['above']
                });
                new Tooltip({
                    connectId: ["btnDownContratoDigitalizado"],
                    label: "Download",
                    position: ['above']
                });

                dijit.byId('uploaderContratoDigitalizado').on("change", function (evt) {
                    try {
                        var mensagensWeb = new Array();
                        if (dojo.byId('cd_contrato').value == "0") {
                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, msgAvisoSalvarContratoparadigitalizar);
                            apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                            dijit.byId("uploaderContratoDigitalizado")._files = [];
                            return false;
                        }
                        var files = dijit.byId("uploaderContratoDigitalizado")._files;
                        if (hasValue(files) && files.length > 0) {
                            if (dijit.byId("uploaderContratoDigitalizado")._files[0].name.length > 128) {
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErrorNomeExcedeuTamanho);
                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                dijit.byId("uploaderContratoDigitalizado")._files = [];
                                return false;
                            } else {
                                if (hasValue(files[0]) && (files[0].size > 500000)) {
                                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErrorArquivoDigitalizadoExcedeuTamanho);
                                    apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                    dijit.byId("uploaderContratoDigitalizado")._files = [];
                                    return false;
                                }
                                var nomeArquivo = files[0].name;
                                var extArquivo = nomeArquivo.substr(nomeArquivo.length - 4, nomeArquivo.length);
                                if (hasValue(extArquivo) && (extArquivo.toLowerCase().indexOf(".dotx") === -1) &&
                                    (extArquivo.toLowerCase().indexOf(".png") === -1) && (extArquivo.toLowerCase().indexOf(".jpeg") === -1) &&
                                    (extArquivo.toLowerCase().indexOf(".pdf") === -1) && (extArquivo.toLowerCase().indexOf(".jpg") === -1)) {
                                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroExtensaoContratoDigitalizadoInvalida);
                                    apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                    dijit.byId("uploaderContratoDigitalizado")._files = [];
                                    return false;
                                }
                                ALTEROU_IMAGEM_DIGITALIZADA = true;
                                apresentaMensagem('apresentadorMensagemMat', null);
                                dojo.byId("edlayoutContratoDigitalizado").value = files[0].name;
                            }
                        }
                    }
                    catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('id_venda_pacote').on("change", function (evt) {
                    try {
                        ALTEROU_VENDA_PACOTE = true;
                    }
                    catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('btnDownContratoDigitalizado').on("click", function (evt) {
                    try {
                        var noArquivo = dojo.byId("edlayoutContratoDigitalizado").value;
                        var cd_contrato = dojo.byId('cd_contrato').value;
                        if (hasValue(noArquivo) && hasValue(cd_contrato)) {
                            var url = Endereco() + "/secretaria/getArquivoDocumentoDigitalizado?noArquivo=" + noArquivo + "&cd_contrato=" + cd_contrato;
                            openDocument(url);
                            
                        } else {
                            var mensagensWeb = new Array();
                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, msgAvisoNotFoundArquivoDigitalizado);
                            apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                        }
                    }
                    catch (e) {
                        postGerarLog(e);
                    }
                });
                //Fim Upload-Download(contrato digitalizado)


                //Crud Matricula
                new Button({
                        label: "Salvar",
                        iconClass: 'dijitEditorIcon dijitEditorIconSave',
                        onClick: function() {
                            //Da um delay de 10 milisegundos para que o cálculo de descontos ocorra antes:
                            //setTimeout(function () { IncluirMatricula(); }, 10);

                            IncluirMatricula();
                        }
                    },
                    "incluirMatricula");
                new Button({
                        label: "Cancelar",
                        iconClass: 'dijitEditorIcon dijitEditorIconTabIndent',
                        onClick: function() {
                            try {
                                showCarregando();
                                ALTEROU_IMAGEM_DIGITALIZADA = false;
                                ALTEROU_VENDA_PACOTE = false;
                                ALTEROU_LIBERAR_CERTIFICADO = false;
                                ALTEROU_LIBERAR_CERTIFICADO_C = false;
                                dijit.byId('btnNovoAdto').set("disabled", false);
                                dijit.byId("acoesRelacionadasT").set("disabled", false);
                                setarTabCadMatricula(true);
                                dijit.byId('tabContainerMatricula').resize();
                                hideTagMatriculaTurma();
                                dijit.byId('tabContainerMatricula').resize();
                                habilitarOnChange("ckAula", false);
                                habilitarOnChange("ckCertificado", false);
                                var grade = hasValue(dijit.byId("gridMatricula")) ? dijit.byId("gridMatricula") : null;
                                var val = !hasValue(grade) ? { cd_contrato: dojo.byId('cd_contrato').value } : null;
                                keepValuesMatricula(val,
                                    grade,
                                    false,
                                    dojo.xhr,
                                    dojo.ready,
                                    dojo.store.Memory,
                                    dijit.form.FilteringSelect,
                                    dojo.data.ObjectStore);
                                habilitarOnChange("ckAula", true);
                                habilitarOnChange("ckCertificado", true);
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "cancelarMatricula");
                new Button({
                        label: "Fechar",
                        iconClass: 'dijitEditorIcon dijitEditorIconCancel',
                        onClick: function() { dijit.byId("cadMatricula").hide(); }
                    },
                    "fecharMatricula");
                // new Button({ label: "Contrato", iconClass: 'dijitEditorIcon dijitEditorIconNewPage', onClick: function () { imprimirContrato(dijit.byId('gridMatricula').itemSelecionado.cd_contrato); } }, "imprimirContrato");
                new Button({
                        label: "Salvar",
                        iconClass: 'dijitEditorIcon dijitEditorIconSave',
                        onClick: function() {}
                    },
                    "alterarMatricula");
                new Button({
                        label: "Excluir",
                        iconClass: 'dijitEditorIcon dijitEditorIconDelete',
                        onClick: function() {
                            caixaDialogo(DIALOGO_CONFIRMAR, '', function executaRetorno() { DeletarMatricula(); });
                        }
                    },
                    "deleteMatricula");
                new Button({
                        label: "Limpar",
                        iconClass: 'dijitEditorIcon dijitEditorIconRemoveFormat',
                        type: "reset",
                        onClick: function() {
                            limparCadMatricula(xhr, ObjectStore, Memory, true);

                        }
                    },
                    "limparMatricula");
                //new Button({ label: "Simular Aditamento", iconClass: 'dijitEditorIcon dijitEditorIconCancel', onClick: function () { gerar_titulo = false; simuladorAditamento(gerar_titulo); } }, "simularAditamento");
                //Fim

                //MODAL TITULO
                new Button({
                    label: "Salvar", iconClass: 'dijitEditorIcon dijitEditorIconSave', onClick: function () {
                        incluirTitulo();
                    }
                }, "incluirTitulo");
                new Button({
                        label: "Cancelar",
                        iconClass: 'dijitEditorIcon dijitEditorIconTabIndent',
                        onClick: function() { keepValuesTitulos(gridTitulo.itemSelecionado); }
                    },
                    "cancelarTitulo");
                new Button({
                        label: "Fechar",
                        iconClass: 'dijitEditorIcon dijitEditorIconCancel',
                        onClick: function() {
                            //marcar_ajuste_manual = false;
                            dijit.byId("dialogTitulo").hide();
                        }
                    },
                    "fecharTitulo");
                new Button({
		                label: "Fechar",
		                iconClass: 'dijitEditorIcon dijitEditorIconCancel',
		                onClick: function () {
			                //marcar_ajuste_manual = false;
                            dijit.byId("dialogAlterarResponsavel").hide();
		                }
	                },
                    "fecharAlterarResponsavel");

                new Button({
                        label: "Alterar",
                        iconClass: 'dijitEditorIcon dijitEditorIconRedo',
                        onClick: function() { alterarTitulo(); }
                    },
                    "alterarTitulo");

                new Button({
		                label: "Alterar",
		                iconClass: 'dijitEditorIcon dijitEditorIconRedo',
                    onClick: function () {
                        alterarResponsavelTitulos(Memory, ObjectStore, xhr, ref);
                        dijit.byId("dialogAlterarResponsavel").hide();
                    }
	                },
                    "alterarResponsavel");

                new Button({
                        label: "Excluir",
                        iconClass: 'dijitEditorIcon dijitEditorIconDelete',
                        onClick: function() {}
                    },
                    "deleteTitulo");
                new Button({
                        label: "Limpar",
                        iconClass: 'dijitEditorIcon dijitEditorIconRemoveFormat',
                        type: "reset",
                        onClick: function() { limparTitulos(); }
                    },
                    "limparTitulo");
                new Button({
                        label: "",
                        iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
                        onClick: function() {
                            try {
                                limparPesquisaPessoaRelFK();
                                dijit.byId("proPessoaRel").show();
                                if (hasValue(dijit.byId("gridPesquisaPessoaRel")))
                                    dijit.byId("gridPesquisaPessoaRel")
                                        .setStore(new ObjectStore({ objectStore: new Memory({ data: null }) }));
                                pesquisaPessoaResponsavelFK();
                                HAS_RESPONSAVEL_TIT = 3;
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "cadPessoaResponsavelTit");

                new Button({
		                label: "",
		                iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
		                onClick: function () {
                            try {
	                            
				                limparPesquisaPessoaRelFK();
				                dijit.byId("proPessoaRel").show();
				                if (hasValue(dijit.byId("gridPesquisaPessoaRel")))
					                dijit.byId("gridPesquisaPessoaRel")
						                .setStore(new ObjectStore({ objectStore: new Memory({ data: null }) }));
				                pesquisaPessoaResponsavelFK();
				                HAS_RESPONSAVEL_TIT = 4;
			                } catch (e) {
				                postGerarLog(e);
			                }
		                }
	                },
	                "cadPessoaResponsavelTitAlterarResponsavel");

                new Button({
                        label: "",
                        iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
                        onClick: function() {}
                    },
                    "cadBancoBaixa");

                new Button({
                        label: "",
                        iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
                        onClick: function() {
                            try {
                                limparPesquisaPessoaRelFK();
                                dijit.byId("proPessoaRel").show();
                                if (hasValue(dijit.byId("gridPesquisaPessoaRel")))
                                    dijit.byId("gridPesquisaPessoaRel")
                                        .setStore(new ObjectStore({ objectStore: new Memory({ data: null }) }));
                                pesquisaPessoaResponsavelFK();
                                HAS_RESPONSAVEL_TIT = 2;
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "cadPessoaResponsavel");

                new Button({
                        label: "",
                        iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
                        onClick: function() {
                            try {
                                limparPesquisaPessoaRelFK();
                                dijit.byId("proPessoaRel").show();
                                if (hasValue(dijit.byId("gridPesquisaPessoaRel")))
                                    dijit.byId("gridPesquisaPessoaRel")
                                        .setStore(new ObjectStore({ objectStore: new Memory({ data: null }) }));
                                pesquisaPessoaResponsavelFK();
                                HAS_RESPONSAVEL_TIT = 2;
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "cadPessoaResponsavelCurso");

                new Button({
                        label: "",
                        iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
                        onClick: function() {
                            try {
                                limparPesquisaPessoaRelFK();
                                dijit.byId("proPessoaRel").show();
                                if (hasValue(dijit.byId("gridPesquisaPessoaRel")))
                                    dijit.byId("gridPesquisaPessoaRel")
                                        .setStore(new ObjectStore({ objectStore: new Memory({ data: null }) }));
                                pesquisaPessoaResponsavelFK();
                                HAS_RESPONSAVEL_TIT = 1;
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "cadPessoaResponsavelTax");

                new Button({
                        label: "",
                        iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
                        onClick: function() {}
                    },
                    "emissorCheque");

                new Button({
                        label: "",
                        iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
                        onClick: function() {}
                    },
                    "cadBanco");

                new Button({
                        label: "",
                        iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
                        onClick: function() {
                            try {
                                if (!hasValue(dijit.byId("gridPesquisaAluno"))) {
                                    montarGridPesquisaAluno(false,
                                        function() {
                                            abrirAlunoFKMatriculaCad();
                                        });
                                } else
                                    abrirAlunoFKMatriculaCad();
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "fkAluno");
                loadNaturezaPessoaCadastroMat(Memory);
                new Button({
                        label: "Incluir",
                        iconClass: 'dijitEditorIcon dijitEditorIconInsert',
                        onClick: function() { incluirNewRelacMat(); }
                    },
                    "incluirPessoaRelacMat");
                new Button({
                        label: "Limpar",
                        iconClass: 'dijitEditorIcon dijitEditorIconRemoveFormat',
                        onClick: function() { limparNewRelacMat(); }
                    },
                    "cleanPessoaRelacMat");
                new Button({
                        label: "Fechar",
                        iconClass: 'dijitEditorIcon dijitEditorIconCancel',
                        onClick: function() { dijit.byId("DialogRelacionamento").hide(); }
                    },
                    "fecharPessoaRelacMat");
                new Button({
                        label: "",
                        iconClass: 'dijitEditorIcon dijitEditorIconNewSGF',
                        disabled: true,
                        onClick: function(e) {
                            if (!dijit.byId("cadResponsavel").incluidoResponsavel &&
                                !hasValue(parseInt(dojo.byId("cd_endereco_aluno").value))) {
                                limparNewRelacMat();
                                pesquisarEnderecoAluno();
                            }

                            dijit.byId("panelEnderecoRelacMat").set("open", true);
                            montarDialog("DialogRelacionamento", e);
                        }
                    },
                    "cadResponsavel");
                dijit.byId("cadResponsavel").incluidoResponsavel = false;
                loadSexoMat('sexoRelacMat', Memory);
                new Button({
                        label: "",
                        iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
                        disabled: true,
                        onClick: function() {
                            try {
                                if (!hasValue(dijit.byId("gridPesquisaPessoa")))
                                    montargridPesquisaPessoa(function() {
                                        abrirPessoaFKRelacMat();
                                        dojo.query("#_nomePessoaFK").on("keyup",
                                            function(e) { if (e.keyCode == 13) montarPesquisaPessoaFKPorTipoMat(); });
                                        dijit.byId("pesqPessoa").on("click",
                                            function(e) {
                                                montarPesquisaPessoaFKPorTipoMat();
                                            });
                                    });
                                else
                                    abrirPessoaFKRelacMat();
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "buscaPessoaRelacMat");
                dijit.byId("naturezaPessoaRelacMat").on("change",
                    function(e) {
                        try {
                            if (e == PESSOAFISICA) {
                                dojo.byId("laCPfCnpjMat").innerHTML = "CPF:";
                                $("#inputRelacMat").mask("999.999.999-99");
                                dojo.byId('tdSexo').style.display = '';
                                dojo.byId('tdSexo2').style.display = '';
                            }
                            if (e == PESSOAJURIDICA) {
                                dojo.byId("laCPfCnpjMat").innerHTML = "CNPJ:";
                                $("#inputRelacMat").mask("99.999.999/9999-99");
                                dojo.byId('tdSexo').style.display = 'none';
                                dojo.byId('tdSexo2').style.display = 'none';
                            }
                        } catch (e) {
                            postGerarLog(e);
                        }
                    });

                dijit.byId("cd_curso_atualCurso").on("change",
                    function (e) {
                        try {
                            if (hasValue(e)) // && (dijit.byId('ckProfissional').checked || dijit.byId('ckInformatica').checked))
                                GetCursoOrdem(e, xhr, ref);
                        } catch (e) {
                            postGerarLog(e);
                        }
                    });

                new Button({
                        label: "",
                        iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
                        onClick: function() {
                            try {
                                if (!hasValue(dijit.byId("gridPesquisaPlanoContas")))
                                    montarFKPlanoContas(
                                        function() { funcaoFKPlanoContas(xhr, ObjectStore, Memory, false); },
                                        'apresentadorMensagemMat',
                                        PRINCIPAL_MATRICULA);
                                else
                                    funcaoFKPlanoContas(xhr, ObjectStore, Memory, true, PRINCIPAL_MATRICULA);
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "fkPlanoContasMat");


                new Button({
                        label: "",
                        iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
                        onClick: function() {
                            try {
                                var planoContasTaxa = dojo.byId('planoContasTaxa').id;
                                var cd_plano_contas_tx = dojo.byId('cd_plano_contas_tx').id;

                                if (!hasValue(dijit.byId("gridPesquisaPlanoContas")))
                                    montarFKPlanoContas(
                                        function() { funcaoFKPlanoContas(xhr, ObjectStore, Memory, false); },
                                        'apresentadorMensagemMat',
                                        TAXA_MATRICULA);
                                else
                                    funcaoFKPlanoContas(xhr, ObjectStore, Memory, true, TAXA_MATRICULA);
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "fkTaxaMatricula");
                //Botao Incluir Turma
                new Button({
                        label: "Incluir",
                        iconClass: 'dijitEditorIcon dijitEditorIconInsert',
                        onClick: function() {
                            try {
                                if (!hasValue(dijit.byId("gridPesquisaTurmaFK"), true)) {
                                    dojo.byId("idOrigemCadastro").value = TELAMATRICULA;
                                    montarGridPesquisaTurmaFK(function() {
                                        funcaoFKTurma();
                                        dijit.byId("pesAlunoTurmaFK").on("click",
                                            function(e) {
                                                if (!hasValue(dijit.byId("gridPesquisaAluno"))) {
                                                    montarGridPesquisaAluno(false,
                                                        function() {
                                                            abrirAlunoFKTurmaFK(true);
                                                        });
                                                } else
                                                    abrirAlunoFKTurmaFK(true);
                                            });
                                    });
                                } else
                                    funcaoFKTurma();
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "btnAddTurma");

                verificaMatriculaNormal()
                    ? dijit.byId("btnAddTurma").set("disabled", false)
                    : dijit.byId("btnAddTurma").set("disabled", true);

                new Button({
                        label: "",
                        iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
                        onClick: function() {
                            try {
                                if (dojo.byId("cd_pessoa_aluno_mat").value > 0) {
                                    if (!hasValue(dijit.byId("gridPesquisaMailMarketing")))
                                        montargridPesquisaMailMarketingFK(
                                            function() { abrirMailMarketingFk(); });
                                    else
                                        abrirMailMarketingFk();
                                } else {
                                    var mensagensWeb = new Array();
                                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgSelecionaAlunoMalaDireta);
                                    apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                                }
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "fkEmailMarketing");

                new Button({
                    label: "Limpar", iconClass: '', Disabled: true, onClick: function () {
                        dojo.byId("cd_nfDev").value = 0;
                        dojo.byId("id_tipo_movimento").value = 0;
                        dijit.byId("tpNfDev").set("value", "");
                        dijit.byId('limparNFDev').set("disabled", true);
                        dijit.byId("cbMovtoFK").reset();
                        dijit.byId("cbMovtoFK").set("disabled", false);
                        dojo.byId("id_tipo_movimento").value = 0;
                        if (hasValue(gridItem)) {
                            gridItem.setStore(dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: null }) }));
                            gridItem.itensSelecionados = [];
                        }
                        dojo.byId("cdPessoaMvtoCad").value = 0;
                        dijit.byId("noPessoaMovto").set("value", "");
                    }
                }, "limparNFDev");
                if (hasValue(document.getElementById("limparNFDev"))) {
                    document.getElementById("limparNFDev").parentNode.style.minWidth = '40px';
                    document.getElementById("limparNFDev").parentNode.style.width = '40px';
                }
                new Button({
                    label: "", iconClass: 'dijitEditorIcon dijitEditorIconFindSGF',
                    onClick: function () {
                        try {
                            if (!hasValue(dijit.byId("selecionaMovimentoFK"))) {
                                montarGridPesquisaMovtoFK(function () {
                                    limparFiltrosTurmaFK();
                                    dojo.byId("trVincularMaterialMovimento").style.display = "";
                                    dijit.byId("ckMaterialDidaticoFiltroVincularMaterial").set("checked", true);
                                    dijit.byId("ckMaterialDidaticoFiltroVincularMaterial").set("disabled", true);
                                    dijit.byId("ckNotaFiscalFiltroVincularMaterial").set("checked", true);
                                    pesquisarMovimentoFKVincularMaterial(true);
                                    dijit.byId("proMvtoFK").show();
                                    dijit.byId("pesquisarMovimentoFK").on("click", function (e) {
                                        apresentaMensagem('apresentadorMensagem', null);
                                        pesquisarMovimentoFKVincularMaterial(true);
                                    });
                                });
                            }
                            else {
                                limparFiltrosTurmaFK();
                                dijit.byId("pesquisarMovimentoFK").on("click", function (e) {
                                    apresentaMensagem('apresentadorMensagem', null);
                                    pesquisarMovimentoFKVincularMaterial(true);
                                });
                                pesquisarMovimentoFKVincularMaterial(true);
                                dijit.byId("proMvtoFK").show();
                            }
                        }
                        catch (e) {
                            postGerarLog(e);
                        }
                    }
                }, "pesNFDev");

                // Adiciona link de ações:
                var menuT = new DropDownMenu({ style: "height: 25px" });

                var acaoRemover = new MenuItem({
                    label: "Excluir",
                    onClick: function() {
                        deletarItemSelecionadoTurmaGrid(Memory, ObjectStore, 'id', dijit.byId("gridTurmaMat"));
                    }
                });
                menuT.addChild(acaoRemover);

                var acaoGerarVenda = new MenuItem({
                    label: "Gerar Venda de Material",
                    onClick: function () {
                        gerarVendaContrato(Memory, ObjectStore, false);
                    }
                });
                menuT.addChild(acaoGerarVenda);

                var acaoGerarVendaF = new MenuItem({
                    label: "Gerar Venda de Material Futura",
                    onClick: function () {
                        gerarVendaContrato(Memory, ObjectStore, true);
                    }
                });
                menuT.addChild(acaoGerarVendaF);

                //Existe o problema de vincular notas que foram desvinculadas por desistencia de carga horaria.
                //var acaoVincularVendaMaterial = new MenuItem({
                //    label: "Vincular Venda de Material",
                //    onClick: function () {
                //        vincularVendaMaterial(Memory, ObjectStore, xhr, ref);
                //    }
                //});
                //menuT.addChild(acaoVincularVendaMaterial);

                var buttonR = new DropDownButton({
                    label: "Ações Relacionadas",
                    name: "acoesRelacionadasT",
                    dropDown: menuT,
                    id: "acoesRelacionadasT"
                });
                dom.byId("linkTurma").appendChild(buttonR.domNode);

                //Botao Incluir Desconto
                new Button({
                        label: "Incluir",
                        iconClass: 'dijitEditorIcon dijitEditorIconInsert',
                        onClick: function() {
                            try {
                                apresentaMensagem("apresentadorMensagemTipoDescontoFK", "");
                                if (!hasValue(dijit.byId('selecionaTipoDescontoFK'))) {
                                    montarTipoDescontoFK(true,
                                        function() {
                                            abrirTipoDescFK(ORIGEMDESCMENSALMATRICULA);
                                        });
                                } else
                                    abrirTipoDescFK(ORIGEMDESCMENSALMATRICULA);
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "btnAddDesconto");

                //Ações Relacionadas Desconto
                var menuD = new DropDownMenu({ style: "height: 25px" });

                var acaoRemover = new MenuItem({
                    label: "Excluir",
                    onClick: function() {
                        try {
                            if (hasValue(dijit.byId("gridDesconto").itensSelecionados) &&
                                dijit.byId("gridDesconto").itensSelecionados.length > 1) {
                                caixaDialogo(DIALOGO_ERRO, 'Selecione apenas um registro para excluir.', null);
                            } else {
                                if (dijit.byId("tipoContratoAdto").aditamento) {
                                    caixaDialogo(DIALOGO_ERRO, msgErroDeleteDescontoContratoAditado, null);

                                } else {
                                    apresentaMensagem("apresentadorMensagemMat", null);
                                    gerar_titulo = true;
                                    atualizar_desconto = true;
                                    LOADCONTRATO = false;
                                    deletarItemSelecionadoGrid(Memory,
                                        ObjectStore,
                                        'cd_tipo_desconto',
                                        dijit.byId("gridDesconto"));
                                }
                            }
                        } catch (e) {
                            postGerarLog(e);
                        }
                    }
                });
                menuD.addChild(acaoRemover);

                var buttonD = new DropDownButton({
                    label: "Ações Relacionadas",
                    name: "acoesRelacionadasD",
                    dropDown: menuD,
                    id: "acoesRelacionadasD"
                });
                dom.byId("linkDesconto").appendChild(buttonD.domNode);

                //Botao Incluir Titulo
                new Button({
                        label: "Incluir",
                        iconClass: 'dijitEditorIcon dijitEditorIconInsert',
                        onClick: function() {
                            keepValuesTitulos();
                            dijit.byId("dialogTitulo").show();
                        }
                    },
                    "btnaddTitulo");

                //Ações Relacionadas Titulos
                var menuT = new DropDownMenu({ style: "height: 25px" });

                var acaoEditar = new MenuItem({
                    label: "Editar",
                    onClick: function() {
                        eventoEditarTitulo(dijit.byId("gridTitulo").itensSelecionados);
                    }
                });
                menuT.addChild(acaoEditar);

                var acaoRemover = new MenuItem({
                    label: "Excluir",
                    onClick: function() { deletarItemSelecionadoTitulo(Memory, ObjectStore); }
                });
                menuT.addChild(acaoRemover);

                var acaoBanco = new MenuItem({
                    label: "Local de Movimento",
                    onClick: function() { alterarLocalMovtoTitulos(Memory, ObjectStore, xhr, ref); }
                });
                menuT.addChild(acaoBanco);

                var acaoBaixaTitulo = new MenuItem({
                    label: "Baixa Título",
                    onClick: function() {
                        try {
                            if (!hasValue(dijit.byId('incluirBaixa')))
                                montaCadastroBaixaFinanceira(function() {
                                        setarEventosBotoesPrincipaisCadTransacao(dojo.xhr,
                                            dojo.on,
                                            dojo.ready,
                                            dojo.store.Memory,
                                            dijit.form.FilteringSelect,
                                            dojo.data.ObjectStore);
                                        abrirBaixa();
                                    },
                                    Permissoes);
                            else
                                abrirBaixa();
                        } catch (e) {
                            postGerarLog(e);
                        }
                    }
                });

                menuT.addChild(acaoBaixaTitulo);

                var acaoBaixaTitulo = new MenuItem({
	                label: "Responsável",
	                onClick: function () {
                        eventoAlterarResponsavel(dijit.byId("gridTitulo").itensSelecionados, Memory, ObjectStore, xhr, ref);
	                }
                });

                menuT.addChild(acaoBaixaTitulo);

                var buttonT = new DropDownButton({
                    label: "Ações Relacionadas",
                    name: "acoesRelacionadasTit",
                    dropDown: menuT,
                    id: "acoesRelacionadasTit"
                });
                dom.byId("linkTitulo").appendChild(buttonT.domNode);

                //Ações Relacionadas Baixa
                var menuB = new DropDownMenu({ style: "height: 25px" });

                var acaoEditar = new MenuItem({
                    label: "Editar",
                    onClick: function() {
                        eventoEditarBaixaTitulo(gridBaixa.itensSelecionados, xhr, ready, Memory, filteringSelect, on);
                    }
                });
                menuB.addChild(acaoEditar);

                var acaoRecibo = new MenuItem({
                    label: "Recibo",
                    onClick: function() {
                        if (!hasValue(gridBaixa.itensSelecionados) || gridBaixa.itensSelecionados.length <= 0)
                            caixaDialogo(DIALOGO_AVISO, 'Selecione alguma baixa para emitir o recibo.', null);
                        else if (gridBaixa.itensSelecionados.length > 1)
                            caixaDialogo(DIALOGO_ERRO, 'Selecione somente uma baixa para emitir o recibo.', null);
                        else {
                            apresentaMensagem('apresentadorMensagem', null);
                            var cdBaixaTitulo = gridBaixa.itensSelecionados[0].cd_baixa_titulo;
                            xhr.get({
                                url: Endereco() +
                                    "/api/financeiro/getUrlRelatorioRecibo?cd_baixa_titulo=" +
                                    cdBaixaTitulo +
                                    "&id_origem_titulo=" +
                                    22,
                                preventCache: true,
                                handleAs: "json",
                                headers: {
                                    "Accept": "application/json",
                                    "Content-Type": "application/json",
                                    "Authorization": Token()
                                }
                            }).then(function(data) {
                                    var endereco = Endereco() + '/Relatorio/RelatorioRecibo?';
                                    abrePopUp(endereco + data,
                                        '765px',
                                        '771px',
                                        'popRelatorio');
                                },
                                function(error) {
                                    apresentaMensagem('apresentadorMensagem', error);
                                });
                        }
                    }
                });
                menuB.addChild(acaoRecibo);
                var buttonB = new DropDownButton({
                    label: "Ações Relacionadas",
                    name: "acoesRelacionadasBax",
                    dropDown: menuB,
                    id: "acoesRelacionadasBax"
                });
                dom.byId("linkBaixa").appendChild(buttonB.domNode);

                //Fim ações baixa

                //Ações relacionadas da grade de aditamento
                var menuAdt = new DropDownMenu({ style: "height: 25px" });

                var acaoExcluirAditamento = new MenuItem({
                    label: "Excluir",
                    onClick: function() { deletarAditamento(dijit.byId("gridAditamento").itensSelecionados, xhr, ref) }
                });

                menuAdt.addChild(acaoExcluirAditamento);

                var acaoObservacao = new MenuItem({
                    label: "Observação",
                    onClick: function() { montarDialogoObservacaoAditamento(); }
                });
                menuAdt.addChild(acaoObservacao);

                var acaoDescontos = new MenuItem({
                    label: "Mostrar Descontos",
                    onClick: function() { mostarDescontosAditamento(); }
                });
                menuAdt.addChild(acaoDescontos);

                var acaoAditamentoBolsas = new MenuItem({
                    label: "Mostrar Bolsa",
                    onClick: function() { mostarAditamentoBolsa(); }
                });
                menuAdt.addChild(acaoAditamentoBolsas);

                var buttonAdt = new DropDownButton({
                    label: "Ações Relacionadas",
                    name: "acoesRelacionadas",
                    dropDown: menuAdt,
                    id: "acoesRelacionadasAdt"
                });
                dom.byId("linkAcoesAdt").appendChild(buttonAdt.domNode);

                var buttonFkArray = [
                    'pesquisarPessoa', 'cadPessoaResponsavel', 'cadPessoaResponsavelCurso', 'emissorCheque', 'cadBanco',
                    'fkAluno', 'cadResponsavel', 'buscaPessoaRelacMat', 'cadPessoaResponsavelTax', 'fkPlanoContasMat',
                    'fkEmailMarketing', 'cadPessoaResponsavelTit', 'cadPessoaResponsavelTitAlterarResponsavel', 'cadBancoBaixa', 'fkTaxaMatricula', 'pesNFDev'
                ];

                for (var p = 0; p < buttonFkArray.length; p++) {
                    var buttonFk = document.getElementById(buttonFkArray[p]);

                    if (hasValue(buttonFk)) {
                        buttonFk.parentNode.style.minWidth = '18px';
                        buttonFk.parentNode.style.width = '18px';
                    }
                }

                var menuMatricula = new DropDownMenu({ style: "height: 25px" });
                var acaoExcluirMatricula = new MenuItem({
                    label: "Editar",
                    onClick: function() {}
                });

                menuMatricula.addChild(acaoExcluirMatricula);
                //Botões desconto tag aditamento
                var menuDescAdt = new DropDownMenu({ style: "height: 25px" });

                var acaoRemoverDescAdt = new MenuItem({
                    label: "Excluir",
                    id: "btnExcluirDesscAdt",
                    onClick: function() {
                        try {
                            if (dijit.byId("gridDescontoAdt").itensSelecionados.length <= 0) {
                                caixaDialogo(DIALOGO_ERRO, msgNotSelectReg, null);
                            } else {
                                if (!dojo.byId("ckManual").checked &&
                                    dijit.byId('tipoContratoAdto').aditamento &&
                                    hasValue(dijit.byId("gridAditamento").editAditamento) &&
                                    dijit.byId("gridAditamento").editAditamento.id_ajuste_manual) {
                                    caixaDialogo(DIALOGO_ERRO, msgErroDeleteDescontoContratoAditadoAjusteManual, null);
                                } else {
                                    excluirDescontoAdt();
                                }
                            }
                        } catch (e) {
                            postGerarLog(e);
                        }
                    }
                });
                menuDescAdt.addChild(acaoRemoverDescAdt);

                var buttonD = new DropDownButton({
                    label: "Ações Relacionadas",
                    name: "acoesRelacionadasD",
                    dropDown: menuDescAdt,
                    id: "acoesRelacionadasDescAdt"
                });
                dom.byId("linkDescontoAdt").appendChild(buttonD.domNode);

                new Button({
                        label: "Incluir",
                        iconClass: 'dijitEditorIcon dijitEditorIconInsert',
                        onClick: function() {
                            try {
                                apresentaMensagem("apresentadorMensagemTipoDescontoFK", "");
                                if (!hasValue(dijit.byId('selecionaTipoDescontoFK'))) {
                                    montarTipoDescontoFK(true,
                                        function() {
                                            abrirTipoDescFK(ORIGEMDESCADITAMENTO);
                                        });
                                } else
                                    abrirTipoDescFK(ORIGEMDESCADITAMENTO);
                            } catch (e) {
                                postGerarLog(e);
                            }
                        }
                    },
                    "btnAddDescontoAdt");

                //fim adt

                dijit.byId('dtInicioAdto').setAttribute('disabled', true);
                //dijit.byId('dtAdtVencInicial').setAttribute('disabled', true);
                dijit.byId('idCheque').setAttribute('disabled', true);

                criarOuCarregarCompFiltering("tipoMatricula",
                    [{ name: "Matrícula", id: "1" }, { name: "Rematrícula", id: "2" }],
                    "",
                    null,
                    dojo.ready,
                    dojo.store.Memory,
                    dijit.form.FilteringSelect,
                    'id',
                    'name');
                montarTipoContrato('tipoDataContratoAdto', true, Memory, filteringSelect);
                montarTipoPagto("tipoPagto", true, Memory, filteringSelect);
                montarTipoDocumento(xhr);
                montarTipoFinanceiroAditamento(xhr);
                montarTipoAditamento(Memory);

                dijit.byId('tipoPagto').setAttribute('disabled', true);
                //dijit.byId('tipoAditamento').setAttribute('disabled', true);

                dijit.byId("dvTitulo").on("show",
                    function(e) {
                        dijit.byId('panelGridTitulo').resize();
                        dojo.byId('gridTitulo').style.width = '1500px';
                    });


                dijit.byId("tipoDataContratoAdto").on("change",
                    function(e) {
                        if (e == 4)
                            dijit.byId('dtInicioAdto').setAttribute('disabled', false);
                        else {
                            dijit.byId('dtInicioAdto').setAttribute('value', 0);
                            dijit.byId('dtInicioAdto').setAttribute('disabled', true);
                            dijit.byId('dtInicioAdto').Value;
                        }
                    });

                dijit.byId("dtaInicioMat").on("change",
                    function(e) {
                        try {
                            var dataMin = new Date(1899, 12, 01);
                            if (date.compare(dataMin, e) > 0) {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaIniMatMin);
                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                return false;
                            } else {
                                var dataMax = new Date(2079, 05, 06);
                                if (date.compare(e, dataMax) > 0) {
                                    var mensagensWeb = new Array();
                                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaIniMatMax);
                                    apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                    return false;
                                } else {
	                                if (dijit.byId("dtaMatricula").getValue() != null && dijit.byId("dtaInicioMat").getValue() != null && dojo.date.compare(dijit.byId("dtaMatricula").getValue(), dijit.byId("dtaInicioMat").getValue(), "date") > 0) {
		                                var mensagensWeb = new Array();
		                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "A data de início não pode ser inferior a data da matrícula.");
		                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
		                                return false;
                                    }

                                    if (dijit.byId("dtaInicioMat").getValue() != null && dijit.byId("dtaFinalMat").getValue() != null && dojo.date.compare(dijit.byId("dtaInicioMat").getValue(), dijit.byId("dtaFinalMat").getValue(), "date") > 0) {
		                                var mensagensWeb = new Array();
                                        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "A data de final não pode ser inferior a data de início matrícula.");
		                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
		                                return false;
	                                }

                                    // Verifica se a data escolhida e maior que a data de início 
                                    // do aditamento(quando o layout escolhido é do tipo aditamento).
                                    apresentaMensagem('apresentadorMensagemMat', null);
                                    if (hasValue(dijit.byId('dtaInicioMat').value)) {
                                        dijit.byId('anoInicial').set("value", dijit.byId("dtaInicioMat").value.getFullYear());
                                        dijit.byId('mesInicial').set("value", dijit.byId("dtaInicioMat").value.getMonth() + 1);
                                        dijit.byId('anoFinal').set("value", dijit.byId("dtaInicioMat").value.getFullYear());
                                        dijit.byId('mesFinal').set("value", dijit.byId("dtaInicioMat").value.getMonth() + 1);
                                        if (dijit.byId('parcelas').value > 0 && !hasValue(dojo.byId('dtaFinalMat').value)) { 
                                            mesI = dijit.byId('mesInicial').value + dijit.byId('parcelas').value - 1;
                                            anoI = dijit.byId("dtaInicioMat").value.getFullYear();
                                            if (mesI > 12) {
                                                while (mesI > 12) {
                                                    dijit.byId('mesFinal').set("value", mesI - 12);
                                                    dijit.byId('anoFinal').set("value", anoI + 1);
                                                    mesI = mesI - 12;
                                                    anoI = anoI + 1;
                                                }
                                            }
                                            else {
                                                dijit.byId('mesFinal').set("value", mesI);
                                                dijit.byId('anoFinal').set("value", anoI);
                                            }
                                        }
                                        if (!verificaMatriculaNormal()) {
                                            dijit.byId('anoInicialCurso').set("value", dijit.byId("dtaInicioMat").value.getFullYear());
                                            dijit.byId('mesInicialCurso').set("value", dijit.byId("dtaInicioMat").value.getMonth() + 1);
                                            dijit.byId('anoFinalCurso').set("value", dijit.byId("anoFinal").value);
                                            dijit.byId('mesFinalCurso').set("value", dijit.byId("mesFinal").value);
                                        }
                                        var dtInicioAdto = dijit.byId("dtInicioAdto");
                                        var validado = true;
                                        var mensagensWeb = new Array();
                                        if (dijit.byId('tipoContratoAdto').aditamento) {
                                            if (hasValue(dtInicioAdto.get("value")) &&
                                                dojo.date.compare(e, dtInicioAdto.get("value")) > 0) {
                                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                                                    msgErrorDataInicioOuDataMatriculaMaiorDtaInicioAditamento);
                                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                                validado = false;
                                            }
                                            if (!validado) {
                                                dijit.byId('dtaInicioMat')._onChangeActive = false;
                                                dijit.byId('dtaInicioMat').reset();
                                                dijit.byId('dtaInicioMat')._onChangeActive = true;
                                            } else
                                                apresentaMensagem('apresentadorMensagemMat', null);
                                        }
                                    }
                                }
                            }
                        } catch (e) {
                            postGerarLog(e);
                        }
                    });

                dijit.byId("dtaFinalMat").on("change",
                    function(e) {
                        try {
                            var dataMin = new Date(1899, 12, 01);
                            if (date.compare(dataMin, e) > 0) {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaFimMatMin);
                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                return false;
                            } else {
                                var dataMax = new Date(2079, 05, 06);
                                if (date.compare(e, dataMax) > 0) {
                                    var mensagensWeb = new Array();
                                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaFimMatMax);
                                    apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                    return false;
                                } else {

                                    if (dijit.byId("dtaInicioMat").getValue() != null && dijit.byId("dtaFinalMat").getValue() != null && dojo.date.compare(dijit.byId("dtaInicioMat").getValue(), dijit.byId("dtaFinalMat").getValue(), "date") > 0) {
                                        var mensagensWeb = new Array();
                                        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "A data final não pode ser inferior a data de início matrícula.");
                                        apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                        return false;
                                    }

                                    apresentaMensagem('apresentadorMensagemMat', null);
                                    if (hasValue(dijit.byId('dtaFinalMat').value)) {
                                        dijit.byId('anoFinal').set("value", dijit.byId("dtaFinalMat").value.getFullYear());
                                        dijit.byId('mesFinal').set("value", dijit.byId("dtaFinalMat").value.getMonth() + 1);
                                        var dtInicioAdto = dijit.byId("dtInicioAdto");
                                        var validado = true;
                                        var mensagensWeb = new Array();
                                        if (dijit.byId('tipoContratoAdto').aditamento) {
                                            if (hasValue(dtInicioAdto.get("value")) &&
                                                dojo.date.compare(dtInicioAdto.get("value"), e) > 0) {
                                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                                                    msgErroDtaInicioAdtMaiorQueDataFimMatricula);
                                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                                validado = false;
                                            }
                                            if (!validado) {
                                                dijit.byId('dtaFinalMat')._onChangeActive = false;
                                                dijit.byId('dtaFinalMat').reset();
                                                dijit.byId('dtaFinalMat')._onChangeActive = true;
                                            } else
                                                apresentaMensagem('apresentadorMensagemMat', null);
                                        }
                                    }
                                }
                            }
                        } catch (e) {
                            postGerarLog(e);
                        }
                    });

                dijit.byId("dtaMatricula").on("change",
                    function(e) {
                        try {
                            var dataMin = new Date(1899, 12, 01);
                            if (date.compare(dataMin, e) > 0) {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaMatMin);
                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                return false;
                            }
                            var dataMax = new Date(2079, 05, 06);
                            if (date.compare(e, dataMax) > 0) {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaMatMax);
                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                return false;
                            }
                            
                            
                            if (dijit.byId("dtaMatricula").getValue() != null && dijit.byId("dtaInicioMat").getValue() != null && dojo.date.compare(dijit.byId("dtaMatricula").getValue(), dijit.byId("dtaInicioMat").getValue(), "date") > 0) {
	                            var mensagensWeb = new Array();
	                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "A data de início não pode ser inferior a data da matrícula.");
	                            apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
	                            return false;
                            }
                            //Verificar aplicação bolsa do aluno
                            if (hasValue(dojo.byId("pc_bolsa_aluno").value) &&
                                dojo.byId("pc_bolsa_aluno").value >= 0 &&
                                hasValue(dijit.byId("dt_inicio_bolsa_aluno").value)) {
                                if (dojo.date.compare(e, dijit.byId("dt_inicio_bolsa_aluno").value, "date") >= 0) {
                                    dijit.byId("perc_bolsa").set("value",
                                        unmaskFixed(dojo.byId("pc_bolsa_aluno").value, 2));
                                } else {
                                    dijit.byId("perc_bolsa").reset();
                                }
                            }
                            if (dojo.byId("pc_bolsa_material_aluno").value > 0 && hasValue(dijit.byId("dt_inicio_bolsa_aluno").value)) {
                                if (dojo.date.compare(dijit.byId('dtaMatricula').value, dijit.byId("dt_inicio_bolsa_aluno").value, "date") >= 0) {
                                    dijit.byId("pcBolsaMaterial").set("disabled", false);
                                    dijit.byId("vlMaterialContratoCDesconto").set("disabled", false);
                                    dijit.byId("pcBolsaMaterial").set("value", unmaskFixed(dojo.byId("pc_bolsa_material_aluno").value, 2));
                                    dijit.byId("pcBolsaMaterialC").set("disabled", false);
                                    dijit.byId("vlMaterialContratoCDescontoC").set("disabled", false);
                                    dijit.byId("pcBolsaMaterialC").set("value", unmaskFixed(dojo.byId("pc_bolsa_material_aluno").value, 2));
                                } else {
                                    dijit.byId("vlMaterialContratoCDesconto").set("disabled", true);
                                    dijit.byId("pcBolsaMaterial").set("disabled", true);
                                    dijit.byId("pcBolsaMaterial").reset();
                                    dijit.byId("vlMaterialContratoCDescontoC").set("disabled", true);
                                    dijit.byId("pcBolsaMaterialC").set("disabled", true);
                                    dijit.byId("pcBolsaMaterialC").reset();
                                }
                            } else {
                                dijit.byId("vlMaterialContratoCDescontoC").set("disabled", false);
                                dijit.byId("pcBolsaMaterialC").set("disabled", false);
                            }
                            var curso = hasValue(dijit.byId('cd_curso_atual'))
                                ? dijit.byId('cd_curso_atual').get('value')
                                : 0;
                            var duracao = hasValue(dijit.byId('cd_duracao_atual'))
                                ? dijit.byId('cd_duracao_atual').get('value')
                                : 0;
                            if (hasValue(dijit.byId('dtaMatricula').value) && dojo.byId('cd_contrato').value == 0) {
                                sugereDiaOpcoesPgto(xhr, ref, 0, 0, 0, 0);
                                if (curso > 0 && duracao > 0) {
                                    getValoresForMatricula(xhr, curso, duracao, 0, false);
                                    gerar_titulo = true;
                                }
                            }
                            if (hasValue(dijit.byId('dtaMatricula').value) && dijit.byId('dtaMatricula').focused && dojo.byId('cd_contrato').value > 0)
                                caixaDialogo(DIALOGO_CONFIRMAR, 'Você deseja manter os valores do curso, descontos e titulos?', function () { }, function () { alterarValores(xhr, ref, curso, duracao) });
                            dojo.byId('dtaMatricula').old_value = dojo.byId('dtaMatricula').value;
                            //Verifica se a data escolhida e maior que a data de início do aditamento(quando o layout escolhido é do tipo aditamento).
                            apresentaMensagem('apresentadorMensagemMat', null);
                            if (hasValue(dijit.byId('dtaMatricula').value)) {
                                var dtInicioAdto = dijit.byId("dtInicioAdto");
                                var validado = true;
                                var mensagensWeb = new Array();
                                if (dijit.byId('tipoContratoAdto').aditamento) {
                                    if (hasValue(dtInicioAdto.get("value")) &&
                                        dojo.date.compare(e, dtInicioAdto.get("value")) > 0) {
                                        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                                            msgErrorDataInicioOuDataMatriculaMaiorDtaInicioAditamento);
                                        apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                        validado = false;
                                    }
                                    if (!validado) {
                                        dijit.byId('dtaMatricula')._onChangeActive = false;
                                        dijit.byId('dtaMatricula').reset();
                                        dijit.byId('dtaMatricula')._onChangeActive = true;
                                    } else
                                        apresentaMensagem('apresentadorMensagemMat', null);
                                }
                            }
                        } catch (e) {
                            postGerarLog(e);
                        }

                    });

                dijit.byId("vencimentoTaxa").on("change",
                    function(e) {
                        try {
                            var dataMin = new Date(1899, 12, 01);
                            if (date.compare(dataMin, e) > 0) {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaTxMatMin);
                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                return false;
                            } else {
                                var dataMax = new Date(2079, 05, 06);
                                if (date.compare(e, dataMax) > 0) {
                                    var mensagensWeb = new Array();
                                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaTxMatMax);
                                    apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                    return false;
                                } else
                                    apresentaMensagem('apresentadorMensagemMat', null);
                                if (hasValue(dijit.byId("vencimentoTaxa").value) &&
                                    (dojo.byId('vencimentoTaxa').value != dojo.byId('vencimentoTaxa').old_value)) {
                                    gerar_titulo = true;
                                    dojo.byId('vencimentoTaxa').old_value = dojo.byId('vencimentoTaxa').value;

                                    var aluno = "";
                                    var cdAluno = 0;
                                    aluno = dijit.byId('nomeAlunoMat').get('value');
                                    cdAluno = dojo.byId("cd_pessoa_aluno_mat").value;
                                    if (hasValue(dojo.byId("cd_responsavel_mens").pessoaCPF) && dojo.byId("pessoaResponsavel").pessoaCPF > 0) {
                                        dijit.byId('pessoaResponsavelTax').set("value", dojo.byId("pessoaResponsavel").pessoaCPF);
                                        dojo.byId('cd_responsavel_tax').value = dojo.byId("cd_responsavel_mens").pessoaCPF;
                                    }
                                    else {
                                        dijit.byId('pessoaResponsavelTax').set("value", aluno);
                                        dojo.byId('cd_responsavel_tax').value = cdAluno;
                                    }
                                }

                            }
                        } catch (e) {
                            postGerarLog(e);
                        }
                    });
                dijit.byId("dtaVencTit").on("change",
                    function(e) {
                        try {
                            var dataMin = new Date(1899, 12, 01);
                            if (date.compare(dataMin, e) > 0) {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaVencMatMin);
                                apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
                                return false;
                            } else {
                                var dataMax = new Date(2079, 05, 06);
                                if (date.compare(e, dataMax) > 0) {
                                    var mensagensWeb = new Array();
                                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaVencMatMax);
                                    apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
                                    return false;
                                } else
                                    apresentaMensagem('apresentadorMensagemTitulo', null);
                            }
                        } catch (e) {
                            postGerarLog(e);
                        }
                    });
                dijit.byId("dtaEmisTit").on("change",
                    function(e) {
                        try {
                            var dataMin = new Date(1899, 12, 01);
                            if (date.compare(dataMin, e) > 0) {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaEmisMatMin);
                                apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
                                return false;
                            } else {
                                var dataMax = new Date(2079, 05, 06);
                                if (date.compare(e, dataMax) > 0) {
                                    var mensagensWeb = new Array();
                                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaEmisMatMax);
                                    apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
                                    return false;
                                } else
                                    apresentaMensagem('apresentadorMensagemTitulo', null);
                            }
                        } catch (e) {
                            postGerarLog(e);
                        }
                    });

                dijit.byId("ckManual").on("change", function (e) {
                    try {

                        apresentaMensagem("apresentadorMensagemMat", null);
                        if (dijit.byId("ckManual").checked == true) {
                            dijit.byId('btnaddTitulo').set('disabled', false);

                            if (dijit.byId('tipoContratoAdto').aditamento == true) {
                                dijit.byId('tipoContratoAdto').reset();
                            }

                        } else {
                            dijit.byId('btnaddTitulo').set('disabled', true);
                            gerar_titulo = true;

                            RowBackTipoTitulosAjusteManual();
                        }
                        verificarContratoComAditamentoEVoltarUltimoAditivo(e);
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('ckRetornoCad').on("change",
                    function(e) {
                        if (dijit.byId('ckRetornoCad').checked)
                            dijit.byId("tipoMatricula").set("value", 2);
                        else
                            dijit.byId("tipoMatricula").set("value", 1);
                    });
                //dijit.byId('tipoTurmaFK').on("change",
                //    function(e) {
                //        if (dijit.byId('tipoTurmaFK').value == 3) {
                //            dijit.byId("pesTurmasFilhasFK").set("checked", true);
                //            dijit.byId("pesTurmasFilhasFK").set("disabled", true);
                //        }
                //    });
                dijit.byId('tipoDocumento').on("change",
                    function(e) {
                        if (e != CHEQUE && dijit.byId("tipoDocumentoTax").value != CHEQUE) {
                            clearForm("formChequeMat");
                            dijit.byId('idCheque').setAttribute('disabled', true);
                        } else {
                            dijit.byId('idCheque').setAttribute('disabled', false);
                            populaBanco(0, 'banco');
                        }
                    });


                dijit.byId('ckProfissional').on("change",
                    function(e) {
                        //zera tag valores
                        dijit.byId("valorCurso").set('value', 0);
                        dijit.byId("valorParcela").set('value', 0);
                        dijit.byId("desconto")._onChangeActive = false;
                        dijit.byId("desconto").set('value', 0);
                        dijit.byId("desconto")._onChangeActive = true;
                        dijit.byId("vl_contrato").set('value', 0);
                        dijit.byId("divida").set('value', 0);

                        if (dijit.byId('ckProfissional').checked) {
                            dijit.byId('vl_contrato').set('value', 0);
                            dijit.byId('valorMatriculaTotal').set('value', 0);
                            dijit.byId('valorTaxaMatricula').set('value', 0);
                            dijit.byId('valorFaturar').set('value', 0);
                            dijit.byId('valorCurso').set('value', 0);

                            if (!hasValue(storeProdutoAtual)) {
                                storeProdutoAtual = dijit.byId("cd_produto_atual").store.data;
                            }
                            if (!hasValue(storeProdutoAtualSemProfissionalizanteInformatica)) {
                                storeProdutoAtualSemProfissionalizanteInformatica =
                                    retornaMapProfissionalizanteInformatica(dijit.byId("cd_produto_atual").store.data);
                            }

                            dijit.byId("cd_produto_atual").store.data = storeProdutoAtual;

                            //dijit.byId("btnAddTurma").set("disabled", true);

                            dijit.byId('desconto').set('value', 0);

                            if (dijit.byId('ckMultipla').checked) {

                                dijit.byId('ckMultipla')._onChangeActive = false;
                                dijit.byId("ckMultipla").set("checked", false);
                                dijit.byId('ckMultipla')._onChangeActive = true;
                            }

                            if (dijit.byId('ckInformatica').checked) {

                                dijit.byId('ckInformatica')._onChangeActive = false;
                                dijit.byId("ckInformatica").set("checked", false);
                                dijit.byId('ckInformatica')._onChangeActive = true;
                            }

                            dojo.byId('opcoes').style.display = 'block';
                            dojo.byId('opcoesDC').style.display = 'block';
                            dojo.byId('tgValCurso').style.display = 'none';
                            dojo.byId("tagTurma").style.display = "none";

                            //zera o grid de turmas
                            zerarGridTurmas(Memory, ObjectStore);

                            this.valueProfissionalizante = filterItemByName("cd_produto_atual", "Profissionalizante");
                            if (hasValue(this.valueProfissionalizante)) {
                                dijit.byId("cd_produto_atual").set("value", this.valueProfissionalizante[0].id);
                                dijit.byId("cd_produto_atual").set("disabled", true);
                            }

                        } else {
                            if (dijit.byId("ckMultipla").checked === false &&
                                dijit.byId("ckProfissional").checked === false &&
                                dijit.byId("ckInformatica").checked === false) {
                                dojo.byId('tgValCurso').style.display = 'block';
                                dojo.byId("tagTurma").style.display = "none";
                                if (!hasValue(storeProdutoAtual)) {
                                    storeProdutoAtual = dijit.byId("cd_produto_atual").store.data;
                                }
                                if (!hasValue(storeProdutoAtualSemProfissionalizanteInformatica)) {
                                    storeProdutoAtualSemProfissionalizanteInformatica =
                                        retornaMapProfissionalizanteInformatica(dijit.byId("cd_produto_atual").store
                                            .data);
                                }

                                dijit.byId("cd_produto_atual").store.data =
                                    storeProdutoAtualSemProfissionalizanteInformatica;

                                //dijit.byId("btnAddTurma").set("disabled", false);
                            }


                            dojo.byId('opcoes').style.display = 'block';
                            dojo.byId('opcoesDC').style.display = 'none';
                            dojo.byId('tgValCurso').style.display = 'block';

                            dijit.byId("cd_produto_atual").set("value", "");
                            dijit.byId("cd_produto_atual").set("disabled", false);
                        }

                        //zera o grid de cursos
                        dijit.byId("gridDataCurso")
                            .setStore(dojo.data.ObjectStore({ objectStore: new Memory({ data: null }) }));
                        dijit.byId('gridDataCurso').itensSelecionados = [];
                        dijit.byId('itensDC').set('disabled', false);
                        verificaMatriculaNormal() ? dijit.byId("btnAddTurma").set("disabled", false): dijit.byId("btnAddTurma").set("disabled", true);
                    });

              


                dijit.byId("tabContainerNegociacao_tablist_tabMensalidade").on("change", function(e)
                {
                    try {
                        dijit.byId('gridDataCurso').update();
                    } catch (e) {

                    }
                });
                
                dijit.byId('ckMultipla').on("change", function (e) {
                    //zera tag valores
                    dijit.byId("valorCurso").set('value', 0);
                    dijit.byId("valorParcela").set('value', 0);
                    dijit.byId("desconto")._onChangeActive = false;
                    dijit.byId("desconto").set('value', 0);
                    dijit.byId("desconto")._onChangeActive = true;
                    dijit.byId("vl_contrato").set('value', 0);
                    dijit.byId("divida").set('value', 0);

                    

                    if (dijit.byId('ckMultipla').checked) {
                        if (!hasValue(storeProdutoAtual)) {
                            storeProdutoAtual = dijit.byId("cd_produto_atual").store.data;
                        }
                        if (!hasValue(storeProdutoAtualSemProfissionalizanteInformatica)) {
                            storeProdutoAtualSemProfissionalizanteInformatica = retornaMapProfissionalizanteInformatica(dijit.byId("cd_produto_atual").store.data);
                        }
                        dijit.byId("cd_produto_atual").store.data = storeProdutoAtualSemProfissionalizanteInformatica;

                        //dijit.byId("btnAddTurma").set("disabled", true);

                        dijit.byId('vl_contrato').set('value', 0);
                        dijit.byId('valorMatriculaTotal').set('value', 0);
                        dijit.byId('valorTaxaMatricula').set('value', 0);
                        
                        dijit.byId('valorFaturar').set('value', 0);
                        dijit.byId('valorCurso').set('value', 0);
                        
                        dijit.byId('desconto').set('value', 0);
                        dojo.byId("tagTurma").style.display = "none";

                        if (dijit.byId('ckProfissional').checked) {
                            dijit.byId('ckProfissional')._onChangeActive = false;
                            dijit.byId("ckProfissional").set("checked", false);
                            dijit.byId('ckProfissional')._onChangeActive = true;
                        }

                        if (dijit.byId('ckInformatica').checked) {
                            dijit.byId('ckInformatica')._onChangeActive = false;
                            dijit.byId("ckInformatica").set("checked", false);
                            dijit.byId('ckInformatica')._onChangeActive = true;
                        }

                        dojo.byId('opcoes').style.display = 'none';
                        dojo.byId('opcoesDC').style.display = 'block';
                    } else {
                        if (dijit.byId("ckMultipla").checked === false &&
                            dijit.byId("ckProfissional").checked === false &&
                            dijit.byId("ckInformatica").checked === false) {
                            dojo.byId("tagTurma").style.display = "";
                            dojo.byId('tgValCurso').style.display = 'block';
                            if (!hasValue(storeProdutoAtual)) {
                                storeProdutoAtual = dijit.byId("cd_produto_atual").store.data;
                            }
                            if (!hasValue(storeProdutoAtualSemProfissionalizanteInformatica)) {
                                storeProdutoAtualSemProfissionalizanteInformatica = retornaMapProfissionalizanteInformatica(dijit.byId("cd_produto_atual").store.data);
                            }

                            dijit.byId("cd_produto_atual").store.data = storeProdutoAtualSemProfissionalizanteInformatica;

                            //dijit.byId("btnAddTurma").set("disabled", false);
                        }

                        dojo.byId('opcoes').style.display = 'block';
                        dojo.byId('opcoesDC').style.display = 'none';
                    }

                    //zera o grid de cursos
                    dijit.byId("gridDataCurso").setStore(dojo.data.ObjectStore({ objectStore: new Memory({ data: null }) }));
                    dijit.byId('gridDataCurso').itensSelecionados = [];
                    dijit.byId('itensDC').set('disabled', false);

                    //zera o grid de turmas
                    zerarGridTurmas(Memory, ObjectStore);

                    if (dijit.byId("gridTurmaMat").store.objectStore.data.length === 0) {
                        if (hasValue(dijit.byId("cd_produto_atual").value)) {
                            dijit.byId("cd_produto_atual").reset();
                        }

                        if (dijit.byId("cd_produto_atual").disabled == true) {
                            dijit.byId("cd_produto_atual").set("disabled", false);
                        }
                    }

                    //atualiza os cursos quando é matricula múltipla para não trazer registros com matricula simuntanea
                    if (dijit.byId('ckMultipla').checked && dijit.byId("cd_produto_atual").value > 0) {
                        configuraCursoPorProdutoMatriculaSemMatriculaSimultanea(dijit.byId("cd_produto_atual").value, 0, xhr, Memory);
                    } else {
                        configuraCursoPorProdutoMatricula(dijit.byId("cd_produto_atual").value, 0, xhr, Memory);
                    }
                    verificaMatriculaNormal() ? dijit.byId("btnAddTurma").set("disabled", false) : dijit.byId("btnAddTurma").set("disabled", true);
                });

                dijit.byId('ckInformatica').on("change", function (e) {
                    //zera tag valores
                    dijit.byId("valorCurso").set('value', 0);
                    dijit.byId("valorParcela").set('value', 0);
                    dijit.byId("desconto")._onChangeActive = false;
                    dijit.byId("desconto").set('value', 0);
                    dijit.byId("desconto")._onChangeActive = true;
                    dijit.byId("vl_contrato").set('value', 0);
                    dijit.byId("divida").set('value', 0);

                    if (dijit.byId('ckInformatica').checked) {
                        dijit.byId('vl_contrato').set('value', 0);
                        dijit.byId('valorMatriculaTotal').set('value', 0);
                        dijit.byId('valorTaxaMatricula').set('value', 0);
                        dijit.byId('valorFaturar').set('value', 0);
                        dijit.byId('valorCurso').set('value', 0);

                        dijit.byId('desconto').set('value', 0);

                        if (!hasValue(storeProdutoAtual)) {
                            storeProdutoAtual = dijit.byId("cd_produto_atual").store.data;
                        }
                        if (!hasValue(storeProdutoAtualSemProfissionalizanteInformatica)) {
                            storeProdutoAtualSemProfissionalizanteInformatica = retornaMapProfissionalizanteInformatica(dijit.byId("cd_produto_atual").store.data);
                        }
                        dijit.byId("cd_produto_atual").store.data = storeProdutoAtual;

                        //dijit.byId("btnAddTurma").set("disabled", true);

                        if (dijit.byId('ckMultipla').checked) {

                            dijit.byId('ckMultipla')._onChangeActive = false;
                            dijit.byId("ckMultipla").set("checked", false);
                            dijit.byId('ckMultipla')._onChangeActive = true;
                        }

                        if (dijit.byId('ckProfissional').checked) {

                            dijit.byId('ckProfissional')._onChangeActive = false;
                            dijit.byId("ckProfissional").set("checked", false);
                            dijit.byId('ckProfissional')._onChangeActive = true;
                        }

                        dojo.byId('opcoes').style.display = 'block';
                        dojo.byId('opcoesDC').style.display = 'block';
                        dojo.byId('tgValCurso').style.display = 'none';
                        dojo.byId("tagTurma").style.display = "none";

                        //zera o grid de turmas
                        zerarGridTurmas(Memory, ObjectStore);

                        this.valueProfissionalizante = filterItemByName("cd_produto_atual", "Informática");
                        if (hasValue(this.valueProfissionalizante)) {
                            dijit.byId("cd_produto_atual").set("value", this.valueProfissionalizante[0].id);
                            dijit.byId("cd_produto_atual").set("disabled", true);
                        }

                    } else {
                        if (dijit.byId("ckMultipla").checked === false &&
                            dijit.byId("ckProfissional").checked === false &&
                            dijit.byId("ckInformatica").checked === false) {
                            dojo.byId('tgValCurso').style.display = 'block';
                            dojo.byId("tagTurma").style.display = "";
                            if (!hasValue(storeProdutoAtual)) {
                                storeProdutoAtual = dijit.byId("cd_produto_atual").store.data;
                            }
                            if (!hasValue(storeProdutoAtualSemProfissionalizanteInformatica)) {
                                storeProdutoAtualSemProfissionalizanteInformatica = retornaMapProfissionalizanteInformatica(dijit.byId("cd_produto_atual").store.data);
                            }

                            dijit.byId("cd_produto_atual").store.data = storeProdutoAtualSemProfissionalizanteInformatica;

                            //dijit.byId("btnAddTurma").set("disabled", false);
                        }

                        dojo.byId('opcoes').style.display = 'block';
                        dojo.byId('opcoesDC').style.display = 'none';
                        dojo.byId('tgValCurso').style.display = 'block';

                        dijit.byId("cd_produto_atual").set("value", "");
                        dijit.byId("cd_produto_atual").set("disabled", false);
                    }

                    //zera o grid de cursos
                    dijit.byId("gridDataCurso").setStore(dojo.data.ObjectStore({ objectStore: new Memory({ data: null }) }));
                    dijit.byId('gridDataCurso').itensSelecionados = [];
                    dijit.byId('itensDC').set('disabled', false);
                    verificaMatriculaNormal() ? dijit.byId("btnAddTurma").set("disabled", false) : dijit.byId("btnAddTurma").set("disabled", true);
                });
                

                dijit.byId("pesqPessoaRel").on("click", function (e) {
                    apresentaMensagem(dojo.byId("apresentadorMensagemProPessoaRel").value, null);
                    pesquisaPessoaResponsavelFK();
                });

                dijit.byId("cd_produto_atual").on("change", function (e) {

                    //Se for matricula Múltipla e já tiver selecionado um curso e alterar o produto limpa o grid (*Matricula anual tem que ser o mesmo produto para os 2 cursos)
                    if (dijit.byId('ckMultipla').checked &&
                    (hasValue(gridDataCurso) &&
                        hasValue(gridDataCurso.store) &&
                        hasValue(gridDataCurso.store.objectStore) &&
                        hasValue(gridDataCurso.store.objectStore.data) &&
                        hasValue(gridDataCurso.store.objectStore.data.length >= 1))) {

                        dijit.byId("gridDataCurso").setStore(dojo.data.ObjectStore({ objectStore: new Memory({ data: null }) }));
                        dijit.byId('gridDataCurso').itensSelecionados = [];
                        var gridDataTurma = dijit.byId("gridTurmaMat");
                        if (hasValue(gridDataTurma) &&
                            hasValue(gridDataTurma.store) &&
                            hasValue(gridDataTurma.store.objectStore) &&
                            hasValue(gridDataTurma.store.objectStore.data) &&
                            hasValue(gridDataTurma.store.objectStore.data.length >= 1)) {

                            dijit.byId("gridTurmaMat").setStore(dojo.data.ObjectStore({ objectStore: new Memory({ data: null }) }));
                            dijit.byId('gridTurmaMat').itensSelecionados = [];
                        }
                    }
                    if (dijit.byId('ckMultipla').checked) {


                        var valorProfissionalizante = filterItemByName("cd_produto_atual", "Profissionalizante");
                        var valorInformatica = filterItemByName("cd_produto_atual", "Informática");

                        if (hasValue(valorProfissionalizante)) {
                            if (valorProfissionalizante[0].id === dijit.byId("cd_produto_atual").value ||
                                valorInformatica[0].id === dijit.byId("cd_produto_atual").value) {
                                dijit.byId("cd_produto_atual")._onChangeActive = false;
                                dijit.byId("cd_produto_atual").reset();
                                dijit.byId("cd_produto_atual")._onChangeActive = true;
                                dijit.byId("cd_curso_atual").reset();
                                dijit.byId("cd_curso_atual").store.data = [];

                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                                    msgErroSelectedInfProfMatriculaMultipla);
                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                            } else {
                                configuraCursoPorProdutoMatriculaSemMatriculaSimultanea(e, 0, xhr, Memory);
                            }
                        } else {
                            configuraCursoPorProdutoMatriculaSemMatriculaSimultanea(e, 0, xhr, Memory);
                        }
                    } else {
                        configuraCursoPorProdutoMatricula(e, 0, xhr, Memory);
                    }

                });

                //Tag turma
                dijit.byId("tagTurma").on("show", function (e) {
                    dijit.byId("gridTurmaMat").update();
                });

                dijit.byId('tipoDocumentoTax').on("change", function (e) {
                    try {
                        if (dojo.byId('tipoDocumentoTax').value != dojo.byId('tipoDocumentoTax').old_value) {
                            if (e != CHEQUE && dijit.byId("tipoDocumento").value != CHEQUE) {
                                clearForm("formChequeMat");
                                dijit.byId('idCheque').setAttribute('disabled', true);
                            }
                            else {
                                dijit.byId('idCheque').setAttribute('disabled', false);
                                populaBanco(0, 'banco');
                            }
                            if (hasValue(dijit.byId("tipoDocumentoTax").value)) {
                                gerar_titulo = true;
                            }
                            dojo.byId('tipoDocumentoTax').old_value = dojo.byId('tipoDocumentoTax').value;
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('valorTaxaMatricula').on('change', function (e) {
                    try {
                        if (isNaN(e)) {
                            dijit.byId('valorTaxaMatricula').set('value', 0);
                            return false;
                        }
                        if (dojo.byId('valorTaxaMatricula').value != dojo.byId('valorTaxaMatricula').old_value) {
                            if (!hasValue(dojo.byId('valorTaxaMatricula').old_value) || dojo.byId('valorTaxaMatricula').old_value == 0)
                                verificaTxMatricula();
                            gerar_titulo = true;
                            dojo.byId('valorTaxaMatricula').old_value = dojo.byId('valorTaxaMatricula').value;
                            var aluno = "";
                            var cdAluno = 0;
                            if (parseFloat(dojo.byId('valorTaxaMatricula').value) > 0) {
                                aluno = dijit.byId('nomeAlunoMat').get('value');
                                cdAluno = dojo.byId("cd_pessoa_aluno_mat").value;
                                dijit.byId('vencimentoTaxa').set("value", new Date(ano, mes, dia));
                                dojo.byId('vencimentoTaxa').old_value = dojo.byId('vencimentoTaxa').value;
                                //
                                if (hasValue(dojo.byId("cd_responsavel_mens").pessoaCPF) && dojo.byId("pessoaResponsavel").pessoaCPF > 0) {
                                    dijit.byId('pessoaResponsavelTax').set("value", dojo.byId("pessoaResponsavel").pessoaCPF);
                                    dojo.byId('cd_responsavel_tax').value = dojo.byId("cd_responsavel_mens").pessoaCPF;
                                }
                                else {
                                    dijit.byId('pessoaResponsavelTax').set("value", aluno);
                                    dojo.byId('cd_responsavel_tax').value = cdAluno;
                                }
                                dijit.byId('percentualResponsavelTax').set("value", 100);

                                if (!dijit.byId('ckMultipla').checked && !dijit.byId('ckProfissional').checked && !dijit.byId('ckInformatica').checked) {
                                    dijit.byId('valorMatricula').set("value", e);
                                } else if (dijit.byId('ckMultipla').checked || dijit.byId('ckProfissional').checked || dijit.byId('ckInformatica').checked) {
                                    dijit.byId('valorMatriculaTotal').set('value', unmaskFixed(e, 2));
                                    //atualizaValorTaxaMatriculaGridCurso(dijit.byId("gridDataCurso"), e);
                                    //calculaValorMatriculaTotal();
                                }



                                dijit.byId('numeroParcelasTaxa').set("value", 1);
                                dojo.byId("numeroParcelasTaxa").old_value = dojo.byId("numeroParcelasTaxa").value;
                            } else {

                                dijit.byId('tipoDocumentoTax').reset();
                                dojo.byId('tipoDocumentoTax').old_value = 0;
                                dijit.byId('vencimentoTaxa').set("value", "");
                                dojo.byId('vencimentoTaxa').value = "";
                                dojo.byId('vencimentoTaxa').old_value = dojo.byId('vencimentoTaxa').value;
                                dijit.byId('valorMatricula').set("value", 0);
                            }
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('cd_curso_atual').on('change', function (e) {
                    try {
                        var duracao = hasValue(dijit.byId('cd_duracao_atual')) ? dijit.byId('cd_duracao_atual').get('value') : 0;
                        var dataMatricula = hasValue(dijit.byId('dtaMatricula').value) ? dojo.byId('dtaMatricula').value : 0;
                        limparValores(false);
                        if (verificaMatriculaNormal() && e > 0 && duracao > 0 && dataMatricula && hasValue(dataMatricula)) {
                            //Limpar descontos das parcelas
                            getValoresParaDesconto(null, null, null, false);
                            getValoresForMatricula(xhr, e, duracao, 0, false);
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('cd_duracao_atual').on('change', function (e) {
                    try {
                        var curso = hasValue(dijit.byId('cd_curso_atual')) ? dijit.byId('cd_curso_atual').get('value') : 0;
                        var dataMatricula = hasValue(dijit.byId('dtaMatricula').value) ? dojo.byId('dtaMatricula').value : 0;
                        limparValores(false);
                        if (verificaMatriculaNormal() && e > 0 && curso > 0 && hasValue(dataMatricula)) {
                            getValoresParaDesconto(null, null, null, false);
                            getValoresForMatricula(xhr, curso, e, 0, false);
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('cd_regime_atual').on('change', function (e) {
                    try {
                        if(EDITAR)
                        dijit.byId('btnAddTurma').set("disabled", (e != null && e != ""))
                        limparValores(false);
                        var curso = hasValue(dijit.byId('cd_curso_atual')) ? dijit.byId('cd_curso_atual').get('value') : 0;
                        var duracao = hasValue(dijit.byId('cd_duracao_atual')) ? dijit.byId('cd_duracao_atual').get('value') : 0;
                        var dataMatricula = hasValue(dijit.byId('dtaMatricula').value) ? dojo.byId('dtaMatricula').value : 0;
                        if (verificaMatriculaNormal() && curso > 0 && duracao > 0 && hasValue(dataMatricula)) {
                            getValoresParaDesconto(null, null, null, false);
                            getValoresForMatricula(xhr, curso, duracao, e, false);
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('ckAula').on('change', function (e) {
                    try {
                        var curso = hasValue(dijit.byId('cd_curso_atual')) ? dijit.byId('cd_curso_atual').get('value') : 0;
                        var duracao = hasValue(dijit.byId('cd_duracao_atual')) ? dijit.byId('cd_duracao_atual').get('value') : 0;
                        var dataMatricula = hasValue(dijit.byId('dtaMatricula').value) ? dojo.byId('dtaMatricula').value : 0;
                        limparValores(false);
                        changeFieldsMensalidade(e);
                        if (curso > 0 && duracao > 0 && hasValue(dataMatricula)) {
                            getValoresParaDesconto(null, null, null, false);
                            getValoresForMatricula(xhr, curso, duracao, 0, false);
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                // Valores
                dijit.byId('valorCurso').on('change', function (e) {
                    try {
                        var valorCurso = e;

                        if (!hasValue(valorCurso) || isNaN(valorCurso)) {
                            dijit.byId('valorCurso')._onChangeActive = false;
                            dijit.byId('valorCurso').set('value', 0);
                            dijit.byId('valorCurso')._onChangeActive = true;
                            valorCurso = 0;
                        }

                        if (!dijit.byId('ckProfissional').checked &&
                            !dijit.byId('ckMultipla').checked &&
                            !dijit.byId('ckInformatica').checked) {
                            dijit.byId('vl_contrato').set('value', dijit.byId('valorCurso').value);
                            dijit.byId('valorMatriculaTotal').set('value', dijit.byId('valorMatricula').value);
                        }

                        if (dijit.byId("ckMultipla").checked === false &&
                            dijit.byId("ckProfissional").checked === false &&
                            dijit.byId("ckInformatica").checked === false) {
                            calcularValoresMatricula(valorCurso, null, null, null, null, null);
                        }

                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('vl_contrato').on('change', function (e) {
                    try {
                        var valorContrato = e;

                        //if (!hasValue(valorContrato) || isNaN(valorContrato)) {
                        //    dijit.byId('vl_contrato')._onChangeActive = false;
                        //    dijit.byId('vl_contrato').set('value', 0);
                        //    dijit.byId('vl_contrato')._onChangeActive = true;
                        //    valorContrato = 0;
                        //}

                        //if (!dijit.byId('ckProfissional').checked &&
                        //    !dijit.byId('ckMultipla').checked &&
                        //    !dijit.byId('ckInformatica').checked) {
                        //    dijit.byId('vl_contrato').set('value', dijit.byId('valorCurso').value);
                        //    dijit.byId('nm_parcela').set('value', dijit.byId('parcelas').value);
                        //}


                        //if (dijit.byId("ckMultipla").checked === true ||
                        //    dijit.byId("ckProfissional").checked === true ||
                        //    dijit.byId("ckInformatica").checked === true) {
                        //    calcularValoresMatriculaProfissionalInformatica(valorContrato, null, null, null, null, null);
                        //} else {
                        //    calcularValoresMatriculaProfissionalInformatica(valorContrato, null, null, null, null, null);
                        //}
                        calcularValoresMatriculaProfissionalInformatica(valorContrato, null, null, null, null, null);


                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('parcelas').on('change', function (e) {
                    try {
                        apresentaMensagem("apresentadorMensagemMat", "", true);
                        var parcelas = e;
                        LOADCONTRATO = false;

                        //Verificação para ser 1 parcela como default.
                        if (!hasValue(e) || isNaN(e)) {
                            dijit.byId('parcelas').set("value", 1);
                            dijit.byId('parcelas').old_value = 1;
                            return false;
                        }

                        if (!dijit.byId('ckProfissional').checked &&
                            !dijit.byId('ckMultipla').checked &&
                            !dijit.byId('ckInformatica').checked) {
                            dijit.byId('vl_contrato').set('value', dijit.byId('valorCurso').value);
                            dijit.byId('valorMatriculaTotal').set('value', dijit.byId('valorMatricula').value);
                        }


                        if (dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidades(dijit.byId("gridDataCurso"));
                            //dijit.byId('nm_parcela').set('value', dijit.byId('parcelas').value);
                        }

                        if (dijit.byId("ckMultipla").checked === true ||
                            dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {

                            if (dijit.byId("ckMultipla").checked === true) {

                                calcularValoresMatriculaProfissionalInformatica(null, calculaNumeroParcela(), null, null, null, null);
                            } else {
                                calcularValoresMatriculaProfissionalInformatica(null, parcelas, null, null, null, null);
                            }
                            

                        } else {
                            calcularValoresMatricula(null, parcelas, null, null, null, null);
                        }
                        if (hasValue(dijit.byId('mesInicial').value) && !hasValue(dojo.byId('dtaFinalMat').value)) {
                            mesI = dijit.byId('mesInicial').value + dijit.byId('parcelas').value - 1;
                            anoI = dijit.byId("dtaInicioMat").value.getFullYear();
                            if (mesI > 12) {
                                while (mesI > 12) {
                                    dijit.byId('mesFinal').set("value", mesI - 12);
                                    dijit.byId('anoFinal').set("value", anoI + 1);
                                    mesI = mesI - 12;
                                    anoI = anoI + 1;
                                }
                            }
                            else {
                                dijit.byId('mesFinal').set("value", mesI);
                                dijit.byId('anoFinal').set("value", anoI);
                            }
                            if (!verificaMatriculaNormal()) {
                                dijit.byId('anoInicialCurso').set("value", dijit.byId("dtaInicioMat").value.getFullYear());
                                dijit.byId('mesInicialCurso').set("value", dijit.byId("dtaInicioMat").value.getMonth() + 1);
                                dijit.byId('anoFinalCurso').set("value", dijit.byId("anoFinal").value);
                                dijit.byId('mesFinalCurso').set("value", dijit.byId("mesFinal").value);
                            }
                        }

                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('valorParcela').on('change', function (e) {
                    try {
                        if (e != unmaskFixed(dijit.byId('valorParcela').old_value, 2)) {
                            apresentaMensagem("apresentadorMensagemMat", null);

                            LOADCONTRATO = false;
                            var valorParcela = e;
                            if (isNaN(e)) {
                                dijit.byId('valorParcela')._onChangeActive = false;
                                dijit.byId('valorParcela').set('value', 0);
                                dijit.byId('valorParcela')._onChangeActive = true;

                                dijit.byId('edValParcela')._onChangeActive = false;
                                dijit.byId('edValParcela').set('value', 0);
                                dijit.byId('edValParcela')._onChangeActive = true;

                                valorParcela = 0;


                            }


                            //var nroParcelas = getNroParcelas("parcelas");
                            //var valorCurso = dijit.byId('valorCurso').get('value');
                            //var valorDesconto = dijit.byId('valorDesconto').get('value');

                            //// verifica o valor da parcela é maior que o valor do curso quando este é maior que zero.
                            //if (!consistirValorParcela(e, nroParcelas, valorCurso)) {
                            //    dijit.byId('valorParcela').set('value', unmaskFixed(dijit.byId('valorParcela').old_value, 2));
                            //    dijit.byId('valorParcela').value = dijit.byId('valorParcela').old_value;

                            //    dijit.byId('edValParcela').set('value', unmaskFixed(dijit.byId('edValParcela').old_value, 2));
                            //    dijit.byId('edValParcela').value = dijit.byId('edValParcela').old_value;
                            //    return false;
                            //}

                            if (dijit.byId("ckMultipla").checked === true ||
                                dijit.byId("ckProfissional").checked === true ||
                                dijit.byId("ckInformatica").checked === true) {

                                var nroParcelas = getNroParcelas("parcelas");
                                var valorContrato = dijit.byId('vl_contrato').get('value');
                                var valorDesconto = dijit.byId('valorDesconto').get('value');

                                // verifica o valor da parcela é maior que o valor do curso quando este é maior que zero.
                                if (!consistirValorParcela(e, nroParcelas, valorContrato)) {
                                    dijit.byId('valorParcela').set('value', unmaskFixed(dijit.byId('valorParcela').old_value, 2));
                                    dijit.byId('valorParcela').value = dijit.byId('valorParcela').old_value;

                                    dijit.byId('edValParcela').set('value', unmaskFixed(dijit.byId('valorParcela').old_value, 2));
                                    dijit.byId('edValParcela').value = dijit.byId('valorParcela').old_value;
                                    return false;
                                }



                                calcularValoresMatriculaProfissionalInformatica(null, null, null, null, valorParcela, null);
                            } else {

                                var nroParcelas = getNroParcelas("parcelas");
                                var valorCurso = dijit.byId('valorCurso').get('value');
                                var valorDesconto = dijit.byId('valorDesconto').get('value');

                                // verifica o valor da parcela é maior que o valor do curso quando este é maior que zero.
                                if (!consistirValorParcela(e, nroParcelas, valorCurso)) {
                                    dijit.byId('valorParcela').set('value', unmaskFixed(dijit.byId('valorParcela').old_value, 2));
                                    dijit.byId('valorParcela').value = dijit.byId('valorParcela').old_value;

                                    dijit.byId('edValParcela').set('value', unmaskFixed(dijit.byId('edValParcela').old_value, 2));
                                    dijit.byId('edValParcela').value = dijit.byId('edValParcela').old_value;
                                    return false;
                                }

                                calcularValoresMatricula(null, null, null, null, valorParcela, null);
                            }
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                //Desconto da primeira parcela deve ser modificado e controlado na grade de descontos, pois em dois lugares fica complicado de controlar.
                dijit.byId('descontoPrimeiraParcela').on('change', function (e) {
                });

                dijit.byId('desconto').on('change', function (e) {
                    try {

                        apresentaMensagem("apresentadorMensagemMat", "");
                        apresentaMensagem("apresentadorMensagemsDataCurso", "");
                        var desconto = 0;
                        var valorDescontoReais = 0;
                        var valorCurso = dijit.byId('valorCurso').get('value');
                        //valorCurso = unmaskFixed(valorCurso, 2);

                        if (isNaN(e)) {
                            dijit.byId('desconto')._onChangeActive = false;
                            dijit.byId('desconto').set('value', 0);
                            dijit.byId('desconto').old_value = 0;
                            dijit.byId('desconto')._onChangeActive = true;
                        }
                        else
                            desconto = e;

                        if (dijit.byId("ckMultipla").checked === true ||
                            dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            calcularValoresMatriculaProfissionalInformatica(null, null, desconto, null, null, null);
                        } else {
                            calcularValoresMatricula(null, null, desconto, null, null, null);
                        }

                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('valorDesconto').on('change', function (e) {
                    try {
                        apresentaMensagem("apresentadorMensagemMat", "");
                        apresentaMensagem("apresentadorMensagemsDataCurso", "");
                        var valorDescontoReais = 0;
                        var desconto = 0;
                        if (isNaN(e)) {
                            dijit.byId('valorDesconto')._onChangeActive = false;
                            dijit.byId('valorDesconto').set('value', 0);
                            dijit.byId('valorDesconto').old_value = 0;
                            dijit.byId('valorDesconto')._onChangeActive = true;
                        }
                        else
                            valorDescontoReais = e;

                        if (dijit.byId("ckMultipla").checked === true ||
                            dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            calcularValoresMatriculaProfissionalInformatica(null, null, null, valorDescontoReais, null, null);
                        } else {
                            calcularValoresMatricula(null, null, null, valorDescontoReais, null, null);
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('divida').on('change', function (e) {
                    try {
                        apresentaMensagem("apresentadorMensagemMat", null);
                        gerar_titulo = true;
                        var divida = 0;

                        if (isNaN(e)) {
                            dijit.byId('divida')._onChangeActive = false;
                            dijit.byId('divida').set('value', 0);
                            dijit.byId('divida')._onChangeActive = true;
                        }
                        else
                            divida = e;

                        if (dijit.byId("ckMultipla").checked === true ||
                            dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            calcularValoresMatriculaProfissionalInformatica(null, null, null, null, null, null, divida);
                        } else {
                            calcularValoresMatricula(null, null, null, null, null, null, divida);
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('ckPrimeiraParcela').on('change', function (e) {
                    try {
                        apresentaMensagem("apresentadorMensagemMat", null);
                        gerar_titulo = true;
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('valorFaturar').on('change', function (e) {
                    try {
                        var valorFaturar = 0;
                        if (isNaN(e)) {
                            dijit.byId('valorFaturar')._onChangeActive = false;
                            dijit.byId('valorFaturar').set('value', 0);
                            dijit.byId('valorFaturar')._onChangeActive = true;
                        }
                        else
                            valorFaturar = e;
                        if (dijit.byId("ckMultipla").checked === true ||
                            dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            calcularValoresMatriculaProfissionalInformatica(null, null, null, null, null, valorFaturar);
                        } else {
                            calcularValoresMatricula(null, null, null, null, null, valorFaturar);
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('tipoContratoAdto').on('change', function (cdNomeContrato) {
                    try {

                        //Novas implementações Aditamento
                        dojo.byId('trDataAdto').style.display = "none";

                        if (hasValue(cdNomeContrato) && cdNomeContrato > 0) {
                            configurarLayouTagAditamento(cdNomeContrato);
                            marcarMatriculaComLayoutAditamento(null, null, cdNomeContrato);
                        }
                        else {
                            configurarLayouTagAditamento(0);
                            marcarMatriculaComLayoutAditamento(null, null, null);
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('tipoAditamento').on('change', function (cdAditamento) {
                    try {
                        var erro = false
                        var tipoAditamento = dijit.byId('tipoAditamento');
                        var valorAditivo = dijit.byId("valorAditivo");
                        if (hasValue(cdAditamento) && cdAditamento > 0) {
                            apresentaMensagem('apresentadorMensagemMat', null);
                            gerar_titulo = true;

                            //existeAditamentoMesmaDataHistorico(dijit.byId("tipoAditamento").value, true);

                            switch (parseInt(cdAditamento)) {
                                case TRANSFERENCIA_TURMA:
                                case MAIORIDADE:
                                case PERDA_DESCONTO:
                                case CONCESSAO_DESCONTO:
                                case ADITIVO_BOLSA:

                                    dojo.byId('tdLabelTifpoFinanceiro').style.display = "none";
                                    dojo.byId('tdTifpoFinanceiro').style.display = "none";
                                    dijit.byId("tipoFinanceiroAditamento").set("required", false);

                                    dojo.byId('tdLabelTifpoFinanceiroDisabled').style.display = "";
                                    dojo.byId('tdTifpoFinanceiroDisabled').style.display = "";

                                    if (parseInt(cdAditamento) != ADITIVO_BOLSA && parseInt(cdAditamento) != PERDA_DESCONTO &&
                                        (!hasValue(dijit.byId("vl_saldo_matricula").value) || parseInt(dijit.byId("vl_saldo_matricula").value) <= 0)) {
                                        var mensagensWeb = new Array();
                                        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroNotExistParcelaAbertaParaAditamento + " " + retornarTipoAditamento() + ".");
                                        apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                        tipoAditamento._onChangeActive = false;
                                        tipoAditamento.reset();
                                        tipoAditamento._onChangeActive = true;
                                        erro = true;                                       
                                    }
                                    //if (parseInt(cdAditamento) == ADITIVO_BOLSA && !verificarAditamentoBolsa(false, msgErroAditamentoBolsaTipo, true))
                                    //    return false;                                    

                                    valorAditivo._onChangeActive = false;
                                    valorAditivo.reset();
                                    valorAditivo.oldValue = 0;
                                    valorAditivo._onChangeActive = true;
                                    if (erro)
                                        return false;
                                    montarEstruturaAditamentoDifAddParcelas(cdAditamento);
                                    break;
                                case ADICIONAR_PARCELAS:
                                    valorAditivo._onChangeActive = false;
                                    valorAditivo.reset();
                                    valorAditivo.oldValue = 0;
                                    valorAditivo._onChangeActive = true;
                                    alternarHabilitacaoValorAditivo(null);

                                    dojo.byId('tdLabelTifpoFinanceiro').style.display = "";
                                    dojo.byId('tdTifpoFinanceiro').style.display = "";
                                    dijit.byId("tipoFinanceiroAditamento").set("required", true);

                                    dojo.byId('tdLabelTifpoFinanceiroDisabled').style.display = "none";
                                    dojo.byId('tdTifpoFinanceiroDisabled').style.display = "none";

                                    //dijit.byId('lblDtVencOuEmissaoAdt').value = "";
                                    //verificarDatasAditamento();
                                    break;
                                case REAJUSTE_ANUAL_ADITIVO:
                                    var mensagensWeb = new Array();
                                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "Tipo de Aditamento exclusivo do sistema.");
                                    apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                    //tipoAditamento._onChangeActive = false;
                                    tipoAditamento.reset();
                                    //tipoAditamento._onChangeActive = true;

                                    dojo.byId('tdLabelTifpoFinanceiro').style.display = "none";
                                    dojo.byId('tdTifpoFinanceiro').style.display = "none";
                                    dijit.byId("tipoFinanceiroAditamento").set("required", false);

                                    dojo.byId('tdLabelTifpoFinanceiroDisabled').style.display = "";
                                    dojo.byId('tdTifpoFinanceiroDisabled').style.display = "";

                                    break;
                            }
                            habilitarCamposPorTipoAditamento(cdAditamento);
                            //verificarAditamentoBolsa(false, msgErroAditamentoBolsaParaOutroTipo, false);
                        } else {
                            //Quando der erro e setar o valor desabilitando o evento de "change", verificar se tem valor antes.
                            if (!hasValue(dijit.byId('tipoAditamento').value)) {
                                dijit.byId("NroTitAdt").set("disabled", true);
                                //dijit.byId("VctoAdt").set("disabled", true);
                                dijit.byId("NroTitAdt").set("required", false);
                                dijit.byId("VctoAdt").set("required", false);
                            }
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('dia').on('change', function (e) {
                    if (hasValue(dijit.byId('dia').value)) {
                        gerar_titulo = true;
                        atualizar_data_aditivo = true;

                        if (dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidades(dijit.byId("gridDataCurso"));
                        }
                    }
                });
                dijit.byId('mes').on('change', function (e) {
                    if (hasValue(dijit.byId('mes').value)) {
                        gerar_titulo = true;
                        atualizar_data_aditivo = true;

                        if (dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {

                            var dataVencimento = new Date(dijit.byId("ano").value, (dijit.byId("mes").value - 1), dijit.byId("dia").value);
                            //var dataEmissao = new Date();
                            var dataEmissao = hasValue(dijit.byId('dtaMatricula').value) ? dijit.byId('dtaMatricula').value : 0;
                            var dataEmissaoFormatada = dojo.date.locale.format(dataEmissao, { selector: "date", datePattern: "dd/MM/yyyy", formatLength: "short", locale: "pt-br" });

                             if (dojo.date.compare(dataEmissao, dataVencimento, "date") === 1) {
                                var mensagensWeb = [];
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroDataVencimentoTituloPersonalizadaInformatica + dataEmissaoFormatada + ").");
                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                return false;
            
                            }
                            changeOpcoesMensalidades(dijit.byId("gridDataCurso"));
                        }
                    }
                });
                dijit.byId('ano').on('change', function (e) {
                    if (hasValue(dijit.byId('ano').value)) {
                        gerar_titulo = true;
                        atualizar_data_aditivo = true;

                        if (dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidades(dijit.byId("gridDataCurso"));
                        }
                    }
                });
                dijit.byId('tipoDocumento').on('change', function (e) {
                    if (hasValue(dijit.byId('tipoDocumento').value)) {
                        gerar_titulo = true;

                        if (dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidades(dijit.byId("gridDataCurso"));
                        }
                    }


                });

                dijit.byId('mesInicial').on('change', function (e) {
                    if (hasValue(dijit.byId('mesInicial').value)) {
                        //gerar_titulo = true;
                        atualizar_data_aditivo = true;

                        if (dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidades(dijit.byId("gridDataCurso"));
                        }
                    } else {
                        if (dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidadesMesCursoInicialResetValue(dijit.byId("gridDataCurso"));
                        }
                    }
                });

                dijit.byId('anoInicial').on('change', function (e) {
                    if (hasValue(dijit.byId('anoInicial').value)) {
                        //gerar_titulo = true;
                        atualizar_data_aditivo = true;

                        if (dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidades(dijit.byId("gridDataCurso"));
                        }
                    } else {
                        if (dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidadesAnoCursoInicialResetValue(dijit.byId("gridDataCurso"));
                        }
                    }
                });

                dijit.byId('mesFinal').on('change', function (e) {
                    if (hasValue(dijit.byId('mesFinal').value)) {
                        //gerar_titulo = true;
                        atualizar_data_aditivo = true;

                        if (dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidades(dijit.byId("gridDataCurso"));
                        }
                    } else {
                        if (dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidadesMesCursoFinalResetValue(dijit.byId("gridDataCurso"));
                        }
                    }
                });

                dijit.byId('anoFinal').on('change', function (e) {
                    if (hasValue(dijit.byId('anoFinal').value)) {
                        //gerar_titulo = true;
                        atualizar_data_aditivo = true;

                        if (dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidades(dijit.byId("gridDataCurso"));
                        }
                    } else {
                        if (dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidadesAnoCursoInicialResetValue(dijit.byId("gridDataCurso"));
                        }
                    }
                });

                /**
                 * Cursos input
                 */
                dijit.byId('diaCurso').on('change', function (e) {
                    if (hasValue(dijit.byId('diaCurso').value)) {
                        gerar_titulo = true;
                        ATUALIZOU_CURSO = true;
                        atualizar_data_aditivo = true;
                    }
                });
                dijit.byId('mesCurso').on('change', function (e) {
                    if (hasValue(dijit.byId('mesCurso').value)) {
                        gerar_titulo = true;
                        ATUALIZOU_CURSO = true;
                        atualizar_data_aditivo = true;
                    }
                });
                dijit.byId('anoCurso').on('change', function (e) {
                    if (hasValue(dijit.byId('anoCurso').value)) {
                        gerar_titulo = true;
                        ATUALIZOU_CURSO = true;
                        atualizar_data_aditivo = true;
                    }
                });
                dijit.byId('tipoDocumentoCurso').on('change', function (e) {
                    desabilitar_cheque = !(hasValue(dijit.byId('tipoDocumentoCurso').value) && dijit.byId('tipoDocumentoCurso').value == CHEQUE);
                    if (hasValue(dijit.byId('tipoDocumentoCurso').value)) {
                        ATUALIZOU_CURSO = true;
                        gerar_titulo = true;
                    }
                });

                dijit.byId('mesInicialCurso').on('change', function (e) {
                    if (hasValue(dijit.byId('mesInicialCurso').value)) {
                        if (dijit.byId('mesInicialCurso').focused) gerar_titulo = true;
                        atualizar_data_aditivo = true;
                        
                    }
                });

                dijit.byId('anoInicialCurso').on('change', function (e) {
                    if (hasValue(dijit.byId('anoInicialCurso').value)) {
                        if (dijit.byId('anoInicialCurso').focused) gerar_titulo = true;
                        atualizar_data_aditivo = true;

                    }
                });

                dijit.byId('mesFinalCurso').on('change', function (e) {
                    if (hasValue(dijit.byId('mesFinalCurso').value)) {
                        if (dijit.byId('mesFinalCurso').focused) gerar_titulo = true;
                        atualizar_data_aditivo = true;

                    }
                });

                dijit.byId('anoFinalCurso').on('change', function (e) {
                    if (hasValue(dijit.byId('anoFinalCurso').value)) {
                        if (dijit.byId('anoFinalCurso').focused) gerar_titulo = true;
                        atualizar_data_aditivo = true;

                    }
                });

                dijit.byId('pessoaResponsavelCurso').on('change', function (e) {
                    if (hasValue(dijit.byId('pessoaResponsavelCurso').value)) {
                        ATUALIZOU_CURSO = true;
                        gerar_titulo = true;
                    }
                });

                dijit.byId('percentualResponsavelCurso').on('change', function (e) {
                    if (dojo.byId('percentualResponsavelCurso').value != dojo.byId('percentualResponsavelCurso').old_value && dijit.byId('percentualResponsavelCurso').value >= 0) {
                        ATUALIZOU_CURSO = true;
                        gerar_titulo = true;
                        dojo.byId('percentualResponsavelCurso').old_value = dojo.byId('percentualResponsavelCurso').value;
                    }
                });
                // Valores
                dijit.byId('valorCursoGrid').on('change', function (e) {
                    try {
                        var valorCurso = e;

                        if (!hasValue(valorCurso) || isNaN(valorCurso)) {
                            dijit.byId('valorCursoGrid')._onChangeActive = false;
                            dijit.byId('valorCursoGrid').set('value', 0);
                            dijit.byId('valorCursoGrid')._onChangeActive = true;
                            valorCurso = 0;
                        }
                        calcularValoresMatriculaCurso(valorCurso, null, null, null, null, null);
                        ATUALIZOU_CURSO = true;

                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('parcelasCurso').on('change', function (e) {
                    try {
                        apresentaMensagem("apresentadorMensagemMat", "", true);
                        var parcelas = e;
                        //Verificação para ser 1 parcela como default.
                        if (!hasValue(e) || isNaN(e)) {
                            dijit.byId('parcelasCurso').set("value", 1);
                            dijit.byId('parcelasCurso').old_value = 1;
                            return false;
                        }
                        if (hasValue(dijit.byId('mesInicial').value) && !hasValue(dojo.byId('dtaFinalMat').value)) {
                            mesI = dijit.byId('mesInicialCurso').value + dijit.byId('parcelasCurso').value - 1;
                            anoI = hasValue(dijit.byId('anoInicialCurso').value) ? dijit.byId('anoInicialCurso').value : dijit.byId("dtaInicioMat").value.getFullYear();
                            if (mesI > 12) {
                                while (mesI > 12) {
                                    dijit.byId('mesFinalCurso').set("value", mesI - 12);
                                    dijit.byId('anoFinalCurso').set("value", anoI + 1);
                                    mesI = mesI - 12;
                                    anoI = anoI + 1;
                                }
                            }
                            else {
                                dijit.byId('mesFinalCurso').set("value", mesI);
                                dijit.byId('anoFinalCurso').set("value", anoI);
                            }
                        }
                        calcularValoresMatriculaCurso(null, parcelas, null, null, null, null);
                        ATUALIZOU_CURSO = true;
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('valorDescontoGrid').on('change', function (e) {
                    try {
                        apresentaMensagem("apresentadorMensagemMat", "", true);
                        var parcelas = e;
                        //Verificação para ser 1 parcela como default.
                        if (!hasValue(e) || isNaN(e)) {
                            dijit.byId('valorDescontoGrid').set("value", 0);
                            dijit.byId('valorDescontoGrid').old_value = 0;
                            return false;
                        }
                        calcularValoresMatriculaCurso(null, null, null, e,  null, null);
                        dijit.byId('valorLiquidoGrid')._onChangeActive = false;
                        dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
                        dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
                        dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
                        dijit.byId('valorLiquidoGrid')._onChangeActive = true;

                        var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(dijit.byId('valorLiquidoGrid').value, dijit.byId('parcelasCurso').value);
                        dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
                        dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
                        dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
                        dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
                        dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;
                        ATUALIZOU_CURSO = true;
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('valorLiquidoGrid').on('change', function (e) {
                    try {
                        apresentaMensagem("apresentadorMensagemMat", "", true);
                        var parcelas = e;
                        //Verificação para ser 1 parcela como default.
                        if (!hasValue(e) || isNaN(e)) {
                            dijit.byId('valorLiquidoGrid').set("value", 0);
                            dijit.byId('valorLiquidoGrid').old_value = 0;
                            return false;
                        }
                        //calcularValoresMatriculaCurso(null, parcelas, null, null, null, null);
                        dijit.byId('valorDescontoGrid').set('value', unmaskFixed(calcularValorDescontoChangeValorLiquidoCursoGrid(), 2));
                        dijit.byId('valorDescontoGrid').value = calcularValorDescontoChangeValorLiquidoCursoGrid();
                        dijit.byId('valorDescontoGrid').old_value = (calcularValorDescontoChangeValorLiquidoCursoGrid());
                        ATUALIZOU_CURSO = true;
                    } catch (e) {
                        postGerarLog(e);
                    }
                });
                

                dijit.byId('valorParcelaGrid').on('change', function (e) {
                    try {
                        if (e != unmaskFixed(dijit.byId('valorParcelaGrid').old_value, 2)) {
                            apresentaMensagem("apresentadorMensagemMat", null);

                            var valorParcela = e;
                            if (isNaN(e)) {
                                dijit.byId('valorParcelaGrid')._onChangeActive = false;
                                dijit.byId('valorParcelaGrid').set('value', 0);
                                dijit.byId('valorParcelaGrid')._onChangeActive = true;
                                valorParcela = 0;
                            }
                            var nroParcelas = getNroParcelas("parcelasCurso");
                            var valorCurso = dijit.byId('valorCursoGrid').get('value');
                            var valorDesconto = dijit.byId('valorDescontoGrid').get('value');

                            // verifica o valor da parcela é maior que o valor do curso quando este é maior que zero.
                            if (!consistirValorParcela(e, nroParcelas, valorCurso)) {
                                dijit.byId('valorParcelaGrid').set('value', unmaskFixed(dijit.byId('valorParcelaGrid').old_value, 2));
                                dijit.byId('valorParcelaGrid').value = dijit.byId('valorParcelaGrid').old_value;
                                return false;
                            }
                            calcularValoresMatriculaCurso(null, null, null, null, valorParcela, null);
                            ATUALIZOU_CURSO = true;
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('descontoGrid').on('change', function (e) {
                    try {

                        apresentaMensagem("apresentadorMensagemMat", "");
                        apresentaMensagem("apresentadorMensagemsDataCurso", "");
                        var desconto = 0;
                        var valorDescontoReais = 0;
                        var valorCurso = dijit.byId('valorCurso').get('value');
                        //valorCurso = unmaskFixed(valorCurso, 2);

                        if (isNaN(e)) {
                            dijit.byId('descontoGrid')._onChangeActive = false;
                            dijit.byId('descontoGrid').set('value', 0);
                            dijit.byId('descontoGrid').old_value = 0;
                            dijit.byId('descontoGrid')._onChangeActive = true;
                        }
                        else
                            desconto = e;

                        calcularValoresMatriculaCurso(null, null, e, null, null, null);
                        dijit.byId('valorLiquidoGrid')._onChangeActive = false;
                        dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
                        dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
                        dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
                        dijit.byId('valorLiquidoGrid')._onChangeActive = true;

                        var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(calcularValorLiquidoCursoGrid(), dijit.byId('parcelasCurso').value);
                        dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
                        dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
                        dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
                        dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
                        dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;
                        ATUALIZOU_CURSO = true;
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('valorDesconto').on('change', function (e) {
                    try {
                        apresentaMensagem("apresentadorMensagemMat", "");
                        apresentaMensagem("apresentadorMensagemsDataCurso", "");
                        var valorDescontoReais = 0;
                        var desconto = 0;
                        if (isNaN(e)) {
                            dijit.byId('valorDesconto')._onChangeActive = false;
                            dijit.byId('valorDesconto').set('value', 0);
                            dijit.byId('valorDesconto').old_value = 0;
                            dijit.byId('valorDesconto')._onChangeActive = true;
                        }
                        else
                            valorDescontoReais = e;
                        if (dijit.byId("ckMultipla").checked === true ||
                            dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            calcularValoresMatriculaProfissionalInformatica(null, null, null, valorDescontoReais, null, null);
                        } else {
                            calcularValoresMatricula(null, null, null, valorDescontoReais, null, null);
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('divida').on('change', function (e) {
                    try {
                        apresentaMensagem("apresentadorMensagemMat", null);
                        gerar_titulo = true;
                        var divida = 0;

                        if (isNaN(e)) {
                            dijit.byId('divida')._onChangeActive = false;
                            dijit.byId('divida').set('value', 0);
                            dijit.byId('divida')._onChangeActive = true;
                        }
                        else
                            divida = e;
                        if (dijit.byId("ckMultipla").checked === true ||
                            dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            calcularValoresMatriculaProfissionalInformatica(null, null, null, null, null, null, e);
                        } else {
                            calcularValoresMatricula(null, null, null, null, null, null, e);
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('ckPrimeiraParcela').on('change', function (e) {
                    try {
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                /**
                 * Fim Cursos input
                 */


                dijit.byId('numeroParcelasTaxa').on('change', function (e) {
                    try {
                        if (dojo.byId('numeroParcelasTaxa').value != dojo.byId('numeroParcelasTaxa').old_value) {
                            var valor = dijit.byId('valorTaxaMatricula').get("value");
                            valor = isNaN(valor) ? 0 : valor;
                            e = isNaN(e) ? 1 : e;
                            if (parseInt(valor) > 0) {
                                if (!hasValue(e) || (e == 0)) e = 1;
                                dijit.byId('numeroParcelasTaxa').set('value', e);
                            } else dijit.byId('numeroParcelasTaxa').set('value', 1);

                            if (hasValue(dijit.byId("numeroParcelasTaxa").value)) {
                                gerar_titulo = true;
                            }
                            dojo.byId('numeroParcelasTaxa').old_value = dojo.byId('numeroParcelasTaxa').value;
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId('pessoaResponsavelTax').on('change', function (e) {
                    if (hasValue(dijit.byId('pessoaResponsavelTax').value)) {
                        gerar_titulo = true;
                    }
                });

                dijit.byId('percentualResponsavelTax').on('change', function (e) {
                    if (dijit.byId('percentualResponsavelTax').value >= 0 && dojo.byId('percentualResponsavelTax').value != dojo.byId('percentualResponsavelTax').old_value) {
                        gerar_titulo = true;
                        dojo.byId('percentualResponsavelTax').old_value = dojo.byId('percentualResponsavelTax').value;
                    }
                });

                dijit.byId('pessoaResponsavel').on('change', function (e) {
                    if (hasValue(dijit.byId('pessoaResponsavel').value)) {
                        gerar_titulo = true;

                        if (dijit.byId("ckMultipla").checked === true ||
                            dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidades(dijit.byId("gridDataCurso"));
                        }
                    }
                });

                dijit.byId('percentualResponsavel').on('change', function (e) {
                    if (dojo.byId('percentualResponsavel').value != dojo.byId('percentualResponsavel').old_value && dijit.byId('percentualResponsavel').value >= 0) {
                        gerar_titulo = true;
                        dojo.byId('percentualResponsavel').old_value = dojo.byId('percentualResponsavel').value;

                        if (dijit.byId("ckMultipla").checked === true ||
                            dijit.byId("ckProfissional").checked === true ||
                            dijit.byId("ckInformatica").checked === true) {
                            changeOpcoesMensalidades(dijit.byId("gridDataCurso"));
                        }
                    }
                });

                dijit.byId("ckCertificado").on('change', function (e) {
                    ALTEROU_LIBERAR_CERTIFICADO = true;
                    if (dijit.byId("ckProfissional").checked === true ||
                        dijit.byId("ckInformatica").checked === true) {
                        changeOpcoesMensalidades(dijit.byId("gridDataCurso"));
                    }
                });

                dijit.byId("ckCertificadoCurso").on('change', function (e) {
                    ALTEROU_LIBERAR_CERTIFICADO_C = true;
                });

                dijit.byId("VctoAdt").on('change', function (e) {
                    if (hasValue(dijit.byId('VctoAdt').value)) {
                        simuladorAditamento(false);
                        apresentaMensagem("apresentadorMensagemMat", null);
                        gerar_titulo = true;
                    }
                });

                //dijit.byId("dtInicioAdto").on('change', function (e)
                //{
                //    try {
                //        var cdNomeContrato = dijit.byId("tipoContratoAdto").value;
                //        var tipoContratoAdto = dijit.byId("tipoContratoAdto");
                //        var nomeContrato = null;

                //        var data = hasValue(tipoContratoAdto) && hasValue(tipoContratoAdto.store.data) ? tipoContratoAdto.store.data : null;
                //        if (hasValue(data)) {
                //            $.each(data, function (index, val) {
                //                if (cdNomeContrato == val.id)
                //                    nomeContrato = val;
                //            });

                //            if (nomeContrato && nomeContrato.id_motivo_aditamento) {
                //                if (hasValue(dijit.byId('dtInicioAdto').value)) {

                //                    validarDataInicioAditamento(dijit.byId("tipoAditamento").value);

                //                    gerar_titulo = true;
                //                    verificarDatasAditamento(e);
                //                    habilitarAditamentoBaixado();
                //                }
                //            }

                //        }
                        
                //    } catch (e) {
                //        postGerarLog(e);
                //    }
                //});

                dijit.byId("dtInicioAditamento").on('change', function (e) {
                    try {
                        if (hasValue(e)) {
                            dijit.byId("dtInicioAdto").set("value", e);
                            validarDataInicioAditamento(dijit.byId("tipoAditamento").value);
                            gerar_titulo = true;
                            verificarDatasAditamento(e);
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId("dtAdtVencInicial").on('change', function (e) {
                    try {
                        if (hasValue(e)) {

                            if (dijit.byId("tipoAditamento").value == ADICIONAR_PARCELAS)
                                dijit.byId("VctoAdt").set("value", e);
                            if (dijit.byId("tipoAditamento").value == ADITIVO_BOLSA)
                                dijit.byId("aditivobolsaDataComunicado").set('value', e);

                            gerar_titulo = true;
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId("spDiaVencAdto").on('change', function (e) {
                    try {
                        if (hasValue(dijit.byId('spDiaVencAdto').value)) {
                            existe_data_alteracao_aditivo = true;
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId("NroTitAdt").on('change', function (nro_parc_adt) {
                    apresentaMensagem("apresentadorMensagemMat", null);
                    dijit.byId('valorAditivo')._onChangeActive = false;
                    dijit.byId('ValorParcAdic')._onChangeActive = false;

                    simuladorAditamento(false);
                   
                    dijit.byId('valorAditivo')._onChangeActive = true;
                    dijit.byId('ValorParcAdic')._onChangeActive = true;
                });

                dijit.byId("ValorParcAdic").on('change', function (vl_parc_adt) {
                    apresentaMensagem("apresentadorMensagemMat", null);
                    dijit.byId('valorAditivo')._onChangeActive = false;

                    simuladorAditamento(false);
                    //dijit.byId("valorAditivo")._zerar_valor_aditivo = false;
                    //if (!hasValue(vl_parc_adt))
                    //    dijit.byId("valorAditivo")._zerar_valor_aditivo = true;
                    //calcularESetarValoresDescontoAdt(ADICIONAR, null, null, true, null, true);
                    ////calcularValorAditivoAdicParcela(null, vl_parc_adt, null);

                    //if (!hasValue(vl_parc_adt) && !hasValue(dijit.byId("valorAditivo").value))
                    //    dijit.byId("valorAditivo")._zerar_valor_aditivo = false;

                    //gerar_titulo = true;                    
                });

                dijit.byId("edValorAulaAdto").on('change', function (e) {
                    if (hasValue(dijit.byId('edValorAulaAdto').value)) {
                        gerar_titulo = true;
                    }
                });

                dijit.byId("valorAditivo").on('change', function (valorAditivo) {

                    if (!dojo.byId("ckManual").checked) {

                        if (dijit.byId("valorAditivo").isFocusable()) {
                            dijit.byId('ValorParcAdic')._onChangeActive = false;
                            dijit.byId("ValorParcAdic").set('value', 0);
                            simuladorAditamento(false);
                        } else {
                            dijit.byId('ValorParcAdic')._onChangeActive = false;
                            simuladorAditamento(false);
                        }
                        //caixaDialogo(DIALOGO_CONFIRMAR, "O valor do aditivo foi alterado, confirma a realização do cálculo apartir do valor do aditivo ?", function (confirmacaoSim) {
                        //    dijit.byId('ValorParcAdic')._onChangeActive = false;
                        //    dijit.byId("ValorParcAdic").set('value', 0);
                        //    simuladorAditamento(false);
                        //}, function (confirmacaoNao) {
                        //    dijit.byId('ValorParcAdic')._onChangeActive = false;
                        //    simuladorAditamento(false);
                        //});
                    }
                });

                dijit.byId("nroPrimeiroCheque").on('change', function (e) {
                    if (hasValue(dijit.byId('nroPrimeiroCheque').value)) {
                        gerar_titulo = true;
                    }
                });

                dijit.byId("emissorChequeName").on('change', function (e) {
                    if (hasValue(dijit.byId('nroPrimeiroCheque').value)) {
                        gerar_titulo = true;
                    }
                });

                dijit.byId("dtaEmisTit").on('change', function (e) {});

                dijit.byId("dtaVencTit").on('change', function (e) {});

                dijit.byId("valorTit").on('change', function (e) { });

                dijit.byId("pc_taxa_cartao").on('change', function(e) {

	                if (hasValue(e)) {
		                //pc_taxa_cartao = vl_taxa_cartao / vl_titulo/ 100.0
                        var pc_taxa_cartao = dijit.byId("pc_taxa_cartao").value;
                        var vl_titulo = parseFloat(removedecimal(dojo.byId("valorTit").value));
                        var vl_taxa_cartao = pc_taxa_cartao * (vl_titulo / 100);
                        dojo.byId("vl_taxa_cartao").value = maskFixed(vl_taxa_cartao, 2);
	                }
	                
                });

                dijit.byId("vl_taxa_cartao").on('change', function(e) {
	                if (hasValue(e)) {
                        //pc_taxa_cartao = vl_taxa_cartao / vl_titulo/ 100.0
                        var vl_taxa_cartao = parseFloat(removedecimal(dojo.byId("vl_taxa_cartao").value));
                        var vl_titulo = parseFloat(removedecimal(dojo.byId("valorTit").value));
		                var pc_taxa_cartao = vl_taxa_cartao / (vl_titulo / 100);
		                var pc_taxa_cartao_mask = maskFixed(pc_taxa_cartao, 2);
		                dijit.byId("pc_taxa_cartao").set("value", unmaskFixed(pc_taxa_cartao_mask, 2));
	                }
                });

                dijit.byId("descontos").on("show", function (e) {
                    if (hasValue(dijit.byId("gridDesconto")))
                        dijit.byId("gridDesconto").update();
                });

                dijit.byId("pcBolsaMaterial").on("change", function (e) {
                    try {
                        if (hasValue(e)) {
                            gerar_titulo = true;
                            if (hasValue(dijit.byId("vlParcMaterial").value) && parseFloat(dijit.byId("vlParcMaterial").value) > 0) {
                                var vl_desc_bolsa_material = parseFloat(dijit.byId("vlParcMaterial").value) * parseFloat(dijit.byId("pcBolsaMaterial").value) / 100;
                                //dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = false;
                                dijit.byId("vlMaterialContratoCDesconto").set("value", unmaskFixed(parseFloat(dijit.byId("vlParcMaterial").value) - vl_desc_bolsa_material, 2));
                                //dijit.byId("vlMaterialContratoCDesconto").vl_desc_bolsa_material = vl_desc_bolsa_material;
                                //dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = true;
                            }
                        } else {
                            dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = false;
                            dijit.byId("vlMaterialContratoCDesconto").set("value", unmaskFixed(parseFloat(dijit.byId("vlParcMaterial").value), 2));
                            dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = true;
                            var vl_material = parseFloat(dijit.byId("NroParMaterial").value) * parseFloat(dijit.byId("vlMaterialContratoCDesconto").value);
                            dijit.byId("vlMaterialContrato")._onChangeActive = false;
                            dijit.byId("vlMaterialContrato").set("value", unmaskFixed(vl_material, 2));
                            dijit.byId("vlMaterialContrato")._onChangeActive = true;
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId("pcBolsaMaterialC").on("change", function (e) {
                    try {
                        if (hasValue(e)) {
                            gerar_titulo = true;
                            if (hasValue(dijit.byId("vlParcMaterialC").value) && parseFloat(dijit.byId("vlParcMaterialC").value) > 0) {
                                var vl_desc_bolsa_material = parseFloat(dijit.byId("vlParcMaterialC").value) * parseFloat(dijit.byId("pcBolsaMaterialC").value) / 100;
                                //dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = false;
                                dijit.byId("vlMaterialContratoCDescontoC").set("value", unmaskFixed(parseFloat(dijit.byId("vlParcMaterialC").value) - vl_desc_bolsa_material, 2));
                                //dijit.byId("vlMaterialContratoCDesconto").vl_desc_bolsa_material = vl_desc_bolsa_material;
                                //dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = true;
                            }
                        } else {
                            dijit.byId("vlMaterialContratoCDescontoC")._onChangeActive = false;
                            dijit.byId("vlMaterialContratoCDescontoC").set("value", unmaskFixed(parseFloat(dijit.byId("vlParcMaterialC").value), 2));
                            dijit.byId("vlMaterialContratoCDescontoC")._onChangeActive = true;
                            var vl_material = parseFloat(dijit.byId("NroParMaterialC").value) * parseFloat(dijit.byId("vlMaterialContratoCDescontoC").value);
                            dijit.byId("vlMaterialContratoC")._onChangeActive = false;
                            dijit.byId("vlMaterialContratoC").set("value", unmaskFixed(vl_material, 2));
                            dijit.byId("vlMaterialContratoC")._onChangeActive = true;
                        }
                        ATUALIZOU_CURSO = true;
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId("vlParcMaterial").on("change", function (vl_parc_material) {
                    try {
                        if (hasValue(vl_parc_material)) {
                            gerar_titulo = true;
                            if (hasValue(dojo.byId("pcBolsaMaterial").value) && parseFloat(dojo.byId("pcBolsaMaterial").value) > 0) {
                                var vl_desc_bolsa_material = parseFloat(vl_parc_material) * parseFloat(dojo.byId("pcBolsaMaterial").value) / 100;
                                //dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = false;
                                dijit.byId("vlMaterialContratoCDesconto").set("value", unmaskFixed(parseFloat(dijit.byId("vlParcMaterial").value) - vl_desc_bolsa_material, 2));
                                //dijit.byId("vlMaterialContratoCDesconto").vl_desc_bolsa_material = vl_desc_bolsa_material;
                                //dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = true;
                            } else {
                                //dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = false;
                                dijit.byId("vlMaterialContratoCDesconto").set("value", unmaskFixed(vl_parc_material, 2));
                                //dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = true;
                            }
                        } else
                            dijit.byId("vlMaterialContratoCDesconto").reset();
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId("vlParcMaterialC").on("change", function (vl_parc_material) {
                    try {
                        if (hasValue(vl_parc_material)) {
                            gerar_titulo = true;
                            if (hasValue(dojo.byId("pcBolsaMaterialC").value) && parseFloat(dojo.byId("pcBolsaMaterialC").value) > 0) {
                                var vl_desc_bolsa_material = parseFloat(vl_parc_material) * parseFloat(dojo.byId("pcBolsaMaterialC").value) / 100;
                                //dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = false;
                                dijit.byId("vlMaterialContratoCDescontoC").set("value", unmaskFixed(parseFloat(dijit.byId("vlParcMaterialC").value) - vl_desc_bolsa_material, 2));
                                //dijit.byId("vlMaterialContratoCDesconto").vl_desc_bolsa_material = vl_desc_bolsa_material;
                                //dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = true;
                            } else {
                                //dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = false;
                                dijit.byId("vlMaterialContratoCDescontoC").set("value", unmaskFixed(vl_parc_material, 2));
                                //dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = true;
                            }
                        } else
                            dijit.byId("vlMaterialContratoCDescontoC").reset();
                        ATUALIZOU_CURSO = true;
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId("vlMaterialContratoCDesconto").on("change", function (vl_Parc_CDesc) {
                    try {
                        if (hasValue(vl_Parc_CDesc,true)) {
                            gerar_titulo = true;
                            if (hasValue(dojo.byId("pcBolsaMaterial").value) && parseFloat(dojo.byId("pcBolsaMaterial").value) > 0) {
                                if (parseFloat(dojo.byId("pcBolsaMaterial").value) != 100) {
                                    var vl_parc_material = (parseFloat(vl_Parc_CDesc) / ((100 - parseFloat(dojo.byId("pcBolsaMaterial").value)) / 100));
                                    dijit.byId("vlParcMaterial")._onChangeActive = false;
                                    dijit.byId("vlParcMaterial").set("value", unmaskFixed(vl_parc_material, 2));
                                    dijit.byId("vlParcMaterial")._onChangeActive = true;
                                }
                            } else {
                                dijit.byId("vlParcMaterial")._onChangeActive = false;
                                dijit.byId("vlParcMaterial").set("value", unmaskFixed(vl_Parc_CDesc, 2));
                                dijit.byId("vlParcMaterial")._onChangeActive = true;
                            }
                            if (hasValue(dojo.byId("NroParMaterial").value) && parseFloat(dijit.byId("NroParMaterial").value) > 0) {
                                var vl_material_contrato = parseInt(dijit.byId("NroParMaterial").value) * parseFloat(dijit.byId("vlMaterialContratoCDesconto").value);
                                dijit.byId("vlMaterialContrato")._onChangeActive = false;
                                dijit.byId("vlMaterialContrato").set("value", unmaskFixed(vl_material_contrato, 2));
                                dijit.byId("vlMaterialContrato")._onChangeActive = true;
                            } else
                                dijit.byId("vlMaterialContrato").reset();
                        } else
                            dijit.byId("vlParcMaterial").reset();
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId("vlMaterialContratoCDescontoC").on("change", function (vl_Parc_CDesc) {
                    try {
                        if (hasValue(vl_Parc_CDesc,true)) {
                            gerar_titulo = true;
                            if (hasValue(dojo.byId("pcBolsaMaterialC").value) && parseFloat(dojo.byId("pcBolsaMaterialC").value) > 0) {
                                var vl_parc_material = (parseFloat(vl_Parc_CDesc) / ((100 - parseFloat(dojo.byId("pcBolsaMaterialC").value)) / 100));
                                dijit.byId("vlParcMaterialC")._onChangeActive = false;
                                dijit.byId("vlParcMaterialC").set("value", unmaskFixed(vl_parc_material, 2));
                                dijit.byId("vlParcMaterialC")._onChangeActive = true;
                            } else {
                                dijit.byId("vlParcMaterialC")._onChangeActive = false;
                                dijit.byId("vlParcMaterialC").set("value", unmaskFixed(vl_Parc_CDesc, 2));
                                dijit.byId("vlParcMaterialC")._onChangeActive = true;
                            }
                            if (hasValue(dojo.byId("NroParMaterialC").value) && parseFloat(dijit.byId("NroParMaterialC").value) > 0) {
                                var vl_material_contrato = parseInt(dijit.byId("NroParMaterialC").value) * parseFloat(dijit.byId("vlMaterialContratoCDescontoC").value);
                                dijit.byId("vlMaterialContratoC")._onChangeActive = false;
                                dijit.byId("vlMaterialContratoC").set("value", unmaskFixed(vl_material_contrato, 2));
                                dijit.byId("vlMaterialContratoC")._onChangeActive = true;
                            } else
                                dijit.byId("vlMaterialContratoC").reset();
                        } else
                            dijit.byId("vlParcMaterialC").reset();
                        ATUALIZOU_CURSO = true;
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId("vlMaterialContrato").on("change", function (vl_material) {
                    try {
                        if (hasValue(vl_material)) {
                            gerar_titulo = true;
                            if (hasValue(dijit.byId("NroParMaterial").value) && parseFloat(dijit.byId("NroParMaterial").value) > 0) {
                                var vl_parcela = vl_material / parseFloat(dijit.byId("NroParMaterial").value);

                                dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = false;
                                dijit.byId("vlMaterialContratoCDesconto").set("value", unmaskFixed(vl_parcela, 2));
                                dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = true;

                                if (hasValue(dojo.byId("pcBolsaMaterial").value) && parseFloat(dojo.byId("pcBolsaMaterial").value) > 0)
                                    vl_parcela = vl_parcela / (100 - parseFloat(dijit.byId("pcBolsaMaterial").value)) * 100;
                                else
                                    vl_parcela = vl_parcela;
                                dijit.byId("vlParcMaterial")._onChangeActive = false;
                                dijit.byId("vlParcMaterial").set("value", unmaskFixed(vl_parcela, 2));
                                dijit.byId("vlParcMaterial")._onChangeActive = true;
                            } else {
                                dijit.byId("vlParcMaterial").reset();
                            }
                            //if (hasValue(dijit.byId("pcBolsaMaterial").value) && parseFloat(dijit.byId("pcBolsaMaterial").value) > 0 &&
                            //    hasValue(dijit.byId("vlParcMaterial").value) && parseFloat(dijit.byId("vlParcMaterial").value)) {
                            //    var vl_desc_bolsa = parseFloat(dijit.byId("vlParcMaterial").value) * (parseFloat(dijit.byId("pcBolsaMaterial").value) / 100);
                            //    dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = false;
                            //    dijit.byId("vlMaterialContratoCDesconto").set("value", parseFloat(dijit.byId("vlParcMaterial").value) - vl_desc_bolsa);
                            //    dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = true;
                            //}
                        } else
                            dijit.byId("vlParcMaterial").reset();
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId("vlMaterialContratoC").on("change", function (vl_material) {
                    try {
                        if (hasValue(vl_material)) {
                            gerar_titulo = true;
                            if (hasValue(dijit.byId("NroParMaterialC").value) && parseFloat(dojo.byId("NroParMaterialC").value) > 0) {
                                var vl_parcela = vl_material / parseFloat(dijit.byId("NroParMaterialC").value);

                                dijit.byId("vlMaterialContratoCDescontoC")._onChangeActive = false;
                                dijit.byId("vlMaterialContratoCDescontoC").set("value", unmaskFixed(vl_parcela, 2));
                                dijit.byId("vlMaterialContratoCDescontoC")._onChangeActive = true;

                                if (hasValue(dojo.byId("pcBolsaMaterialC").value) && parseFloat(dojo.byId("pcBolsaMaterialC").value) > 0)
                                    vl_parcela = vl_parcela / (100 - parseFloat(dijit.byId("pcBolsaMaterialC").value)) * 100;
                                else
                                    vl_parcela = vl_parcela;

                                dijit.byId("vlParcMaterialC")._onChangeActive = false;
                                dijit.byId("vlParcMaterialC").set("value", unmaskFixed(vl_parcela, 2));
                                dijit.byId("vlParcMaterialC")._onChangeActive = true;

                            } else {
                                dijit.byId("vlParcMaterial").reset();
                            }
                            //if (hasValue(dijit.byId("pcBolsaMaterialC").value) && parseFloat(dijit.byId("pcBolsaMaterialC").value) > 0 &&
                            //    hasValue(dijit.byId("vlParcMaterialC").value) && parseFloat(dijit.byId("vlParcMaterialC").value)) {
                            //    var vl_desc_bolsa = parseFloat(dijit.byId("vlParcMaterialC").value) * (parseFloat(dijit.byId("pcBolsaMaterialC").value) / 100);
                            //    dijit.byId("vlMaterialContratoCDescontoC")._onChangeActive = false;
                            //    dijit.byId("vlMaterialContratoCDescontoC").set("value", parseFloat(dijit.byId("vlParcMaterialC").value) - vl_desc_bolsa);
                            //    dijit.byId("vlMaterialContratoCDescontoC")._onChangeActive = true;
                            //}
                        } else
                            dijit.byId("vlParcMaterialC").reset();
                        ATUALIZOU_CURSO = true;
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId("NroParMaterial").on("change", function (nro_parc) {
                    try {
                        if (hasValue(nro_parc)) {
                            dijit.byId("NroParMaterial").old_value = nro_parc;
                            gerar_titulo = true;
                            LOADCONTRATO = false;
                            if (hasValue(dijit.byId("vlMaterialContrato").value) && parseFloat(dijit.byId("vlMaterialContrato").value) > 0) {
                                var vl_parc_material = parseFloat(dijit.byId("vlMaterialContrato").value) / nro_parc;
                                dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = false;
                                dijit.byId("vlMaterialContratoCDesconto").set("value", unmaskFixed(vl_parc_material, 2));
                                dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = true;
                                if (hasValue(dojo.byId("pcBolsaMaterial").value) && parseFloat(dojo.byId("pcBolsaMaterial").value) > 0)
                                    vl_parc_material = vl_parc_material / (100 - parseFloat(dojo.byId("pcBolsaMaterial").value)) * 100;
                                else
                                    vl_parc_material = vl_parc_material
                                dijit.byId("vlParcMaterial")._onChangeActive = false;
                                dijit.byId("vlParcMaterial").set("value", unmaskFixed(vl_parc_material, 2));
                                dijit.byId("vlParcMaterial")._onChangeActive = true;
                            } else {
                                if (hasValue(dijit.byId("vlMaterialContratoCDesconto").value) && parseFloat(dijit.byId("vlMaterialContratoCDesconto").value) > 0) {
                                    var vl_material = nro_parc * parseFloat(dijit.byId("vlMaterialContratoCDesconto").value);
                                    dijit.byId("vlMaterialContrato")._onChangeActive = false;
                                    dijit.byId("vlMaterialContrato").set("value", unmaskFixed(vl_material, 2));
                                    dijit.byId("vlMaterialContrato")._onChangeActive = true;

                                }
                            }
                        } else {
                            if (hasValue(dijit.byId("vlMaterialContrato").value) || hasValue(dijit.byId("vlMaterialContratoCDesconto").value) ||
                                hasValue(dijit.byId("pcBolsaMaterial").value) || hasValue(dijit.byId("vlParcMaterial").value)) {
                                dijit.byId("NroParMaterial")._onChangeActive = false;
                                dijit.byId("NroParMaterial").set("value", dijit.byId("NroParMaterial").old_value);
                                dijit.byId("NroParMaterial")._onChangeActive = true;
                            }
                        }
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId("NroParMaterialC").on("change", function (nro_parc) {
                    try {
                        if (hasValue(nro_parc)) {
                            dijit.byId("NroParMaterialC").old_value = nro_parc;
                            gerar_titulo = true;
                            if (hasValue(dijit.byId("vlMaterialContratoC").value) && parseFloat(dijit.byId("vlMaterialContratoC").value) > 0) {
                                var vl_parc_material = parseFloat(dijit.byId("vlMaterialContratoC").value) / nro_parc;
                                dijit.byId("vlMaterialContratoCDescontoC")._onChangeActive = false;
                                dijit.byId("vlMaterialContratoCDescontoC").set("value", unmaskFixed(vl_parc_material, 2));
                                dijit.byId("vlMaterialContratoCDescontoC")._onChangeActive = true;
                                if (hasValue(dojo.byId("pcBolsaMaterialC").value) && parseFloat(dojo.byId("pcBolsaMaterialC").value) > 0)
                                    vl_parc_material = vl_parc_material / (100 - parseFloat(dojo.byId("pcBolsaMaterialC").value)) * 100;
                                else
                                    vl_parc_material = vl_parc_material
                                dijit.byId("vlParcMaterialC")._onChangeActive = false;
                                dijit.byId("vlParcMaterialC").set("value", unmaskFixed(vl_parc_material, 2));
                                dijit.byId("vlParcMaterialC")._onChangeActive = true;
                            } else {
                                if (hasValue(dijit.byId("vlMaterialContratoCDescontoC").value) && parseFloat(dijit.byId("vlMaterialContratoCDescontoC").value) > 0) {
                                    var vl_material = nro_parc * parseFloat(dijit.byId("vlMaterialContratoCDesconto").value);
                                    dijit.byId("vlMaterialContratoC")._onChangeActive = false;
                                    dijit.byId("vlMaterialContratoC").set("value", unmaskFixed(vl_material, 2));
                                    dijit.byId("vlMaterialContratoC")._onChangeActive = true;
                                }
                            }
                        } else {
                            if (hasValue(dijit.byId("vlMaterialContratoC").value) || hasValue(dijit.byId("vlMaterialContratoCDescontoC").value) ||
                                hasValue(dijit.byId("pcBolsaMaterialC").value) || hasValue(dijit.byId("vlParcMaterialC").value)) {
                                dijit.byId("NroParMaterialC")._onChangeActive = false;
                                dijit.byId("NroParMaterialC").set("value", dijit.byId("NroParMaterialC").old_value);
                                dijit.byId("NroParMaterialC")._onChangeActive = true;
                            }
                        }
                        ATUALIZOU_CURSO = true;
                    } catch (e) {
                        postGerarLog(e);
                    }
                });

                dijit.byId("vlInclusoMaterial").on("change", function (e) {
                    if (e) {
                        gerar_titulo = true;
                        dijit.byId("vlParcMaterial").reset();
                        dijit.byId("pcBolsaMaterial").reset();
                        dijit.byId("incorporarMaterial").set("disabled", e);
                        dijit.byId("vlParcMaterial").set("disabled", e);
                        dijit.byId("pcBolsaMaterial").set("disabled", e);
                        dijit.byId("vlMaterialContratoCDesconto").set("disabled", e); dijit.byId("vlMaterialContratoCDesconto").reset();
                        dijit.byId("NroParMaterial").set("disabled", e);
                        dijit.byId("NroParMaterial")._onChangeActive = false;
                        dijit.byId("NroParMaterial").set("value", 0);
                        dijit.byId("NroParMaterial")._onChangeActive = true;
                        dijit.byId("incorporarMaterial").reset();
                    } else {
                        dijit.byId("incorporarMaterial").set("disabled", e);
                        if (dijit.byId("NroParMaterial").value == 0) {
                            dijit.byId("NroParMaterial")._onChangeActive = false;
                            dijit.byId("NroParMaterial").set("value", 1);
                            dijit.byId("NroParMaterial").old_value = 1;
                            dijit.byId("NroParMaterial")._onChangeActive = true;
                        }
                        dijit.byId("NroParMaterial").set("disabled", false);
                        dijit.byId("vlParcMaterial").set("disabled", false);
                        dijit.byId("pcBolsaMaterial").set("disabled", false);
                        dijit.byId("vlMaterialContratoCDesconto").set("disabled", false);
                    }
                });

                dijit.byId("vlInclusoMaterialC").on("change", function (e) {
                    if (e) {
                        gerar_titulo = true;
                        dijit.byId("vlParcMaterialC").reset();
                        dijit.byId("pcBolsaMaterialC").reset();
                        dijit.byId("incorporarMaterialC").set("disabled", e);
                        dijit.byId("vlParcMaterialC").set("disabled", e);
                        dijit.byId("pcBolsaMaterialC").set("disabled", e);
                        dijit.byId("vlMaterialContratoCDescontoC").set("disabled", e); dijit.byId("vlMaterialContratoCDesconto").reset();
                        dijit.byId("NroParMaterialC").set("disabled", e);
                        dijit.byId("NroParMaterialC")._onChangeActive = false;
                        dijit.byId("NroParMaterialC").set("value", 0);
                        dijit.byId("NroParMaterialC")._onChangeActive = true;
                        dijit.byId("incorporarMaterialC").reset();
                    } else {
                        dijit.byId("incorporarMaterialC").set("disabled", e);
                        if (dijit.byId("NroParMaterialC").value == 0) {
                            dijit.byId("NroParMaterialC")._onChangeActive = false;
                            dijit.byId("NroParMaterialC").set("value", 1);
                            dijit.byId("NroParMaterialC").old_value = 1;
                            dijit.byId("NroParMaterialC")._onChangeActive = true;
                        }
                        dijit.byId("NroParMaterialC").set("disabled", false);
                        dijit.byId("vlParcMaterialC").set("disabled", false);
                        dijit.byId("pcBolsaMaterialC").set("disabled", false);
                        dijit.byId("vlMaterialContratoCDescontoC").set("disabled", false);
                    }
                    ATUALIZOU_CURSO = true;
                });

                dijit.byId("incorporarMaterial").on("change", function (e) {
                    gerar_titulo = true;
                    if (e) {
                        dijit.byId("NroParMaterial").set("disabled", false);
                        dijit.byId("vlParcMaterial").set("disabled", false);
                        dijit.byId("pcBolsaMaterial").set("disabled", false);
                        dijit.byId("vlMaterialContratoCDesconto").set("disabled", false);
                    }
                });

                dijit.byId("incorporarMaterialC").on("change", function (e) {
                    gerar_titulo = true;
                    if (e) {
                        dijit.byId("NroParMaterialC").set("disabled", false);
                        dijit.byId("vlParcMaterialC").set("disabled", false);
                        dijit.byId("pcBolsaMaterialC").set("disabled", false);
                        dijit.byId("vlMaterialContratoCDescontoC").set("disabled", false);
                    }
                    ATUALIZOU_CURSO = true;
                });

                dijit.byId('vl_pre_matricula').on('change', function (e) {
                    gerar_titulo = true;
                });
                dijit.byId('aditivobolsaPorcentual').on('change', function (e) {
                    LOADCONTRATO = false;
                    gerar_titulo = true;
                    simuladorAditamento(false);
                });
                dijit.byId('aditivobolsaDataComunicado').on('change', function (e) {
                    LOADCONTRATO = false;
                    gerar_titulo = true;
                    simuladorAditamento(false);
                });
                dijit.byId("tagDescontos").on("show", function (e) {
                    if (hasValue(dijit.byId("gridDescontoAdt")))
                        dijit.byId("gridDescontoAdt").update();
                });

                dijit.byId("dvHistorico").on("show", function (e) {
                    dijit.byId("gridAditamento").update();
                });

                dijit.byId("tagAditivo").on("show", function (e) {
                    dijit.byId("gridAditamento").update();
                });
                dijit.byId('paBaixa').on('show', function (e) {
                    if (hasValue(dijit.byId('gridBaixa')))
                        dijit.byId('gridBaixa').update();
                })
                dijit.byId("dialogDescontosAditamento").on("show", function (e) {
                    if (hasValue(dijit.byId('gridDescontoHistAdt')))
                        dijit.byId('gridDescontoHistAdt').update();
                });

                if (hasValue(dijit.byId("menuManual"))) {
                    dijit.byId("menuManual").on("click",
                        function(e) {
                            abrePopUp(Endereco() + '/Content/manual/manual.htm#_Toc405293679', '765px', '771px');
                        });
                }
                dijit.byId("limparEndereoPrincipalRespoMat").on("click", function () {
                    limparEnderecoCadResponsavel();
                    configurarLayoutEndereco(LAYOUTPADRAO, "estadoMat", "cidadeMat", "bairroMat", "ruaMat", "cepMat", null, null, null);
                });
                new Button({
                    label: "Limpar", iconClass: '', type: "reset", disabled: true,
                    onClick: function () {
                        dojo.byId('planoContasTaxa').value = '';
                        dojo.byId('cd_plano_contas_tx').value = 0;
                        dijit.byId("limparPlanoContaTx").set('disabled', true);
                    }
                }, "limparPlanoContaTx");
                decreaseBtn(document.getElementById("limparPlanoContaTx"), '40px');

                new Button({
                    label: "Limpar", iconClass: '', type: "reset", disabled: true,
                    onClick: function () {
                        dojo.byId('planoContasMat').value = '';
                        dojo.byId('cd_plano_contas').value = 0;
                        dijit.byId("limparPlanoContasMat").set('disabled', true);
                    }
                }, "limparPlanoContasMat");
                decreaseBtn(document.getElementById("limparPlanoContasMat"), '40px');


                new Button({
                    label: "Limpar", iconClass: '', type: "reset", disabled: true,
                    onClick: function () {
                        dojo.byId('emailMarketingFK').value = '';
                        dojo.byId('cd_mala_direta').value = 0;
                        dijit.byId("limparEmailMarketing").set('disabled', true);
                        dijit.byId("fkEmailMarketing").set('disabled', false);
                    }
                }, "limparEmailMarketing");
                decreaseBtn(document.getElementById("limparEmailMarketing"), '40px');

                dijit.byId("fkTaxaMatricula").sugestaoAtiva = false;
                dijit.byId("fkPlanoContasMat").sugestaoAtiva = false;

                if (hasValue(pFuncao))
                    pFuncao.call();
            } catch (e) {
                postGerarLog(e);
            }
        });
    });
};

function alterarValores(xhr, ref, curso, duracao) {
    limparValores(false);
    //Vai zerar o valor do desconto das parcelas pois a grade vai ser zerada
    getValoresParaDesconto(null, null, null, false);
    sugereDiaOpcoesPgto(xhr, ref, 0, 0, 0, 0);
    if (curso > 0 && duracao > 0) {
        getValoresForMatricula(xhr, curso, duracao, 0, false);
    }
    gerar_titulo = true;
}

function crudContratoDigitalizadoEArquivo(xhr, tipoOperacao) {
    try {
        //if (!validarNoCont()) {
        //    return false;
        //}
        var files = dijit.byId("uploaderContratoDigitalizado")._files;
        if (hasValue(files) && files.length > 0) {
            if (window.FormData !== undefined) {
                var data = new FormData();
                for (i = 0; i < files.length; i++) {
                    data.append("file" + i, files[i]);
                }
                $.ajax({
                    type: "POST",
                    url: Endereco() + "/secretaria/UploadDocumentoDigitalizado",
                    ansy: false,
                    headers: { Authorization: Token() },
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (results) {
                        try {
                            if (hasValue(results) && hasValue(results.indexOf) && results.indexOf('<') >= 0) {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgSessaoExpirada3);
                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                return false;
                            }
                            if (hasValue(results) && !hasValue(results.erro)) {
                                console.log("ok");
                                //if (tipoOperacao == CADASTRO)
                                //    salvarNomeContrato(xhr, results);
                                //else
                                //    alterarNomeContrato(xhr, results);
                            } else
                                apresentaMensagem('apresentadorMensagemMat', results);
                        }
                        catch (e) {
                            postGerarLog(e);
                        }
                    },
                    error: function (error) {
                        apresentaMensagem('apresentadorMensagemNoCont', error);
                        return false;
                    }
                });
            } else {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_INFORMACAO, "Impossível fazer upload de arquivo.");
                apresentaMensagem('apresentadorMensagemNoCont', mensagensWeb);
            }
        } else {
            console.log("ok-sem arquivo");
            //if (tipoOperacao == CADASTRO)
            //    salvarNomeContrato(xhr, "");
            //else
            //    alterarNomeContrato(xhr, "");
        }
    }
    catch (e) {
        postGerarLog(e);
    }
}





function getMaxIdProximoCurso(gridDataCurso) {
   
    if(hasValue(gridDataCurso) &&
        hasValue(gridDataCurso.store) &&
        hasValue(gridDataCurso.store.objectStore) &&
        hasValue(gridDataCurso.store.objectStore.data) &&
        hasValue(gridDataCurso.store.objectStore.data.length > 0)) {
        var posicao = getUltimoCursoInserido(gridDataCurso);
        $.each(gridDataCurso.store.objectStore.data, function (idx, value) {
            
            if ((posicao >= 0 && (value.cd_curso === gridDataCurso.store.objectStore.data[posicao].cd_curso)) && !hasValue(value.cd_proximo_curso)) {
                return false;
            }
        });

        return true;
    }
}

function getUltimoCursoInserido(gridDataCurso) {
    
    
    if (hasValue(gridDataCurso) &&
        hasValue(gridDataCurso.store) &&
        hasValue(gridDataCurso.store.objectStore) &&
        hasValue(gridDataCurso.store.objectStore.data) &&
        hasValue(gridDataCurso.store.objectStore.data.length > 0)) {

        

        //var ultimoItem = gridDataCurso.store.objectStore.data.reduce(function(prev, current) {
        //    return (prev.ordem_insercao > current.ordem_insercao) ? prev : current;
        //});

        var ultimoItem = gridDataCurso.store.objectStore.data.filter(function (item, index, array) {
            var searchItem = gridDataCurso.store.objectStore.data.some(function(itemCurso, index) {
                return item.cd_proximo_curso === itemCurso.cd_curso;
            });

            if (item.cd_proximo_curso == null || !searchItem) {
                return item;
            }
        });

        if (!hasValue(ultimoItem)) {
            return -1;
        }

        var pos = binaryObjSearch(gridDataCurso.store.objectStore.data, "cd_curso", ultimoItem[0].cd_curso);
        //var pos = binaryObjSearch(gridDataCurso.store.objectStore.data, "cd_curso", dijit.byId("cd_ultimo_curso_inserido").value);

        if (pos == null) {
            return -1;
        }
        return pos;
    } else {
        return -1;
    }
}

function calculaValorContrato() {
    gridDataCurso = dijit.byId("gridDataCurso");
    var vl_contrato_curso = 0;
    var vl_desconto_curso = 0
    if (hasValue(gridDataCurso) &&
        hasValue(gridDataCurso.store) &&
        hasValue(gridDataCurso.store.objectStore) &&
        hasValue(gridDataCurso.store.objectStore.data) &&
        hasValue(gridDataCurso.store.objectStore.data.length > 0)) {
        $.each(gridDataCurso.store.objectStore.data, function (idx, value) {
            vl_contrato_curso += value.vl_curso;
            vl_desconto_curso += value.vl_desconto_contrato
        });

        if (vl_contrato_curso > 0) {
            habilitarOnChange(dijit.byId('vl_contrato'), false);
            dijit.byId('vl_contrato').set('value', maskFixed(vl_contrato_curso, 2));
            habilitarOnChange(dijit.byId('vl_contrato'), true);
            //dijit.byId('vl_contrato').set('value', this.vl_contrato_curso);

            if (dijit.byId("ckMultipla").checked === true ||
                dijit.byId("ckProfissional").checked === true ||
                dijit.byId("ckInformatica").checked === true) {
                if (vl_desconto_curso == 0)
                    vl_desconto_curso = null
                else {
                    habilitarOnChange(dijit.byId('valorDesconto'), false);
                    dijit.byId('valorDesconto').set('value', maskFixed(vl_desconto_curso, 2));
                    habilitarOnChange(dijit.byId('valorDesconto'), true);
                    if (ATUALIZOU_CURSO) vl_desconto_curso = -1 * vl_desconto_curso 
                }
                calcularValoresMatriculaProfissionalInformatica(vl_contrato_curso, null, null, vl_desconto_curso, null, null);
            } 
        } else {
            habilitarOnChange(dijit.byId('vl_contrato'), false);
            dijit.byId('vl_contrato').set('value', maskFixed(0, 2));
            habilitarOnChange(dijit.byId('vl_contrato'), true);
        }
    }
}

function calculaValorMaterialContrato() {
    gridDataCurso = dijit.byId("gridDataCurso");
    var vl_contrato_curso = 0;
    var nm_parcela_curso = 0;
    var vl_parcela = 0;
    var vl_parcela_liquida = 0;
    var id_incorporar = 0;
    var id_incluso = 0;
    var cursos = 0;
    if (hasValue(gridDataCurso) &&
        hasValue(gridDataCurso.store) &&
        hasValue(gridDataCurso.store.objectStore) &&
        hasValue(gridDataCurso.store.objectStore.data) &&
        hasValue(gridDataCurso.store.objectStore.data.length > 0)) {
        $.each(gridDataCurso.store.objectStore.data, function (idx, value) {
            if (value.vl_material_contrato > 0) {
                cursos += 1;
                vl_contrato_curso += value.vl_material_contrato;
                nm_parcela_curso += value.nm_parcelas_material;
                vl_parcela_liquida += (value.nm_parcelas_material * value.vl_parcela_liq_material);
                vl_parcela += (value.nm_parcelas_material * value.vl_parcela_material);
                id_incluso += value.id_valor_incluso ? 1 : 0;
                id_incorporar += value.id_incorporar_valor_material ? 1 : 0;
            }
        });
        if ((id_incorporar > 0 && id_incorporar != cursos) ||
           (id_incluso > 0 && id_incluso != cursos)) {
            caixaDialogo(DIALOGO_ERRO, 'A opção Valor Incluso ou Incorporar Valor deve ser a mesma para todos os cursos', null);
            return false;
        }
        onChangeActive(false);
        //Vai pegar a soma das parcelas dividido pelo número de registros(rateio)
        nm_parcela_curso = parseInt(nm_parcela_curso / cursos);
        if (vl_contrato_curso > 0) {
            dijit.byId('vlMaterialContrato').set('value', maskFixed(vl_contrato_curso, 2));
        } else {
            dijit.byId('vlMaterialContrato').set('value', maskFixed(0, 2));
        }
        if (nm_parcela_curso > 0) {
            dijit.byId('NroParMaterial').set('value', nm_parcela_curso);
            vl_parcela = vl_parcela/nm_parcela_curso
            dijit.byId('vlParcMaterial').set('value', maskFixed(vl_parcela, 2));
            vl_parcela_liquida = vl_parcela_liquida/nm_parcela_curso
            dijit.byId('vlMaterialContratoCDesconto').set('value', maskFixed(vl_parcela_liquida, 2));
            dijit.byId('pcBolsaMaterialC').set('value',maskFixed((vl_parcela - vl_parcela_liquida)/(vl_parcela+vl_parcela_liquida)*100, 2));
        } else {
            dijit.byId('NroParMaterial').set('value', maskFixed(0, 2));
            dijit.byId('vlParcMaterial').set('value', maskFixed(0, 2));
            dijit.byId('vlMaterialContratoCDesconto').set('value', maskFixed(0, 2));
        }
        dijit.byId('incorporarMaterial').set('value', id_incorporar > 0);
        dijit.byId('vlInclusoMaterial').set('value', id_incluso > 0);
        onChangeActive(true); //12330

    }
}

function calculaNumeroParcela() {
    gridDataCurso = dijit.byId("gridDataCurso");
    var nm_parcela_curso = 0;
    if (hasValue(gridDataCurso) &&
        hasValue(gridDataCurso.store) &&
        hasValue(gridDataCurso.store.objectStore) &&
        hasValue(gridDataCurso.store.objectStore.data) &&
        hasValue(gridDataCurso.store.objectStore.data.length > 0)) {
        $.each(gridDataCurso.store.objectStore.data, function (idx, value) {
            nm_parcela_curso += value.nm_parcelas;
        });

        if (nm_parcela_curso > 0) {
            return unmaskFixed(nm_parcela_curso, 0);
        } else {
            return unmaskFixed(0, 0);
        }
    }
}

function calculaValorMatriculaTotal() {
    gridDataCurso = dijit.byId("gridDataCurso");
    var valorMatriculaTotal = 0.0;
    if (hasValue(gridDataCurso) &&
        hasValue(gridDataCurso.store) &&
        hasValue(gridDataCurso.store.objectStore) &&
        hasValue(gridDataCurso.store.objectStore.data) &&
        hasValue(gridDataCurso.store.objectStore.data.length > 0)) {
        $.each(gridDataCurso.store.objectStore.data, function (idx, value) {
            valorMatriculaTotal += value.val_matricula;
        });
        //LBM Se sugerir o valor no curso altera o valor da taxa
        if (valorMatriculaTotal > 0.0) {
            dijit.byId('valorMatriculaTotal').set('value', unmaskFixed(valorMatriculaTotal, 2));
            dijit.byId('valorTaxaMatricula').set('value', unmaskFixed(valorMatriculaTotal, 2));

        } else {
            //Se o valor do curso for zero não vai zerar a taxa pois pode estar usando somente a taxa
            dijit.byId('valorMatriculaTotal').set('value', 0.0);
        }
    }
}



function eventoEditarCurso(itensSelecionados) {
    try {
        if (!hasValue(itensSelecionados) || itensSelecionados.length <= 0)
            caixaDialogo(DIALOGO_AVISO, msgSelectRegUpdate, null);
        else if (itensSelecionados.length > 1)
            caixaDialogo(DIALOGO_ERRO, msgSelectOneRegUpdate, null);
        else {
            apresentaMensagem('apresentadorMensagem', '');
            dijit.byId("gridDataCurso").itemSelecionado = itensSelecionados[0];

            dijit.byId("cadMensalidade").show();
            IncluirAlterar(0, 'divAlterarDataCurso', 'divIncluirDataCurso', 'divExcluirDataCurso', 'apresentadorMensagemsDataCurso', 'divCancelarDataCurso', 'divLimparDataCurso');
            if (dijit.byId('ckProfissional').checked || dijit.byId('ckInformatica').checked) {
                dijit.byId('anoInicialCurso').set('disabled', true);
                dijit.byId('anoFinalCurso').set('disabled', true);
                dijit.byId('mesInicialCurso').set('disabled', true);
                dijit.byId('mesFinalCurso').set('disabled', true);
                dijit.byId('diaCurso').set('disabled', true);
                dijit.byId('mesCurso').set('disabled', true);
                dijit.byId('anoCurso').set('disabled', true);
                dijit.byId('parcelasCurso').set('disabled', true);
                dijit.byId('tipoDocumentoCurso').set('disabled', true);
                dijit.byId('cadPessoaResponsavelCurso').set('disabled', true);
                dijit.byId('pessoaResponsavelCurso').set('disabled', true);
                dijit.byId('percentualResponsavelCurso').set('disabled', true);
            }
            keepValuesDataCurso(itensSelecionados[0], gridDataCurso);
        }

    } catch (e) {

    }
}
function openDocument(url) {
    try {
        window.open(url);
    } catch (e) {

    } 
}

function changeOpcoesMensalidades(gridDataCurso) {
    try {

        if (hasValue(gridDataCurso) &&
            hasValue(gridDataCurso.store) &&
            hasValue(gridDataCurso.store.objectStore) &&
            hasValue(gridDataCurso.store.objectStore.data) &&
            hasValue(gridDataCurso.store.objectStore.data.length > 0)) {

            $.each(gridDataCurso.store.objectStore.data, function (idx, val) {

                gridDataCurso.store.objectStore.data[idx].nm_dia = dijit.byId('dia').value;
                gridDataCurso.store.objectStore.data[idx].nm_mes = dijit.byId('mes').value;
                gridDataCurso.store.objectStore.data[idx].nm_ano = dijit.byId('ano').value;
                gridDataCurso.store.objectStore.data[idx].nm_parcelas = dijit.byId('parcelas').value;
                gridDataCurso.store.objectStore.data[idx].cd_tipo = dijit.byId('tipoDocumento').value;
                gridDataCurso.store.objectStore.data[idx].no_tipo = dojo.byId('tipoDocumento').value;
                gridDataCurso.store.objectStore.data[idx].cd_pessoa_responsavel = dojo.byId('cd_responsavel_mens').value;
                gridDataCurso.store.objectStore.data[idx].no_pessoa_responsavel = dijit.byId('pessoaResponsavel').get("value");
                gridDataCurso.store.objectStore.data[idx].pc_responsavel_contrato = dijit.byId('percentualResponsavel').value;
                gridDataCurso.store.objectStore.data[idx].id_liberar = dijit.byId('ckCertificado').checked;

                gridDataCurso.store.objectStore.data[idx].nm_mes_curso_inicial = (hasValue(dijit.byId('mesInicial').value) && hasValue(dijit.byId('anoInicial').value)) ? dijit.byId('mesInicial').value : null;
                gridDataCurso.store.objectStore.data[idx].nm_ano_curso_inicial = (hasValue(dijit.byId('mesInicial').value) && hasValue(dijit.byId('anoInicial').value)) ? dijit.byId('anoInicial').value : null;
                gridDataCurso.store.objectStore.data[idx].nm_mes_curso_final = (hasValue(dijit.byId('mesFinal').value) && hasValue(dijit.byId('anoFinal').value)) ? dijit.byId('mesFinal').value : null;
                gridDataCurso.store.objectStore.data[idx].nm_ano_curso_final = (hasValue(dijit.byId('mesFinal').value) && hasValue(dijit.byId('anoFinal').value)) ? dijit.byId('anoFinal').value : null;

            });
            dijit.byId("gridDataCurso").update();
        }
    } catch (e) {

    }
}



function changeOpcoesMensalidadesMesCursoInicialResetValue(gridDataCurso) {
    try {

        if (hasValue(gridDataCurso) &&
            hasValue(gridDataCurso.store) &&
            hasValue(gridDataCurso.store.objectStore) &&
            hasValue(gridDataCurso.store.objectStore.data) &&
            hasValue(gridDataCurso.store.objectStore.data.length > 0)) {

            $.each(gridDataCurso.store.objectStore.data, function (idx, val) {
                gridDataCurso.store.objectStore.data[idx].nm_mes_curso_inicial = null;
                gridDataCurso.store.objectStore.data[idx].nm_ano_curso_inicial = null;
            });
            dijit.byId("gridDataCurso").update();
        }
    } catch (e) {

    }
}


function changeOpcoesMensalidadesAnoCursoInicialResetValue(gridDataCurso) {
    try {

        if (hasValue(gridDataCurso) &&
            hasValue(gridDataCurso.store) &&
            hasValue(gridDataCurso.store.objectStore) &&
            hasValue(gridDataCurso.store.objectStore.data) &&
            hasValue(gridDataCurso.store.objectStore.data.length > 0)) {

            $.each(gridDataCurso.store.objectStore.data, function (idx, val) {
                gridDataCurso.store.objectStore.data[idx].nm_mes_curso_inicial = null;
                gridDataCurso.store.objectStore.data[idx].nm_ano_curso_inicial = null;
            });
            dijit.byId("gridDataCurso").update();
        }
    } catch (e) {

    }
}

function changeOpcoesMensalidadesMesCursoFinalResetValue(gridDataCurso) {
    try {

        if (hasValue(gridDataCurso) &&
            hasValue(gridDataCurso.store) &&
            hasValue(gridDataCurso.store.objectStore) &&
            hasValue(gridDataCurso.store.objectStore.data) &&
            hasValue(gridDataCurso.store.objectStore.data.length > 0)) {

            $.each(gridDataCurso.store.objectStore.data, function (idx, val) {
                gridDataCurso.store.objectStore.data[idx].nm_mes_curso_final = null;
                gridDataCurso.store.objectStore.data[idx].nm_ano_curso_final = null;
            });
            dijit.byId("gridDataCurso").update();
        }
    } catch (e) {

    }
}

function changeOpcoesMensalidadesAnoCursoFinalResetValue(gridDataCurso) {
    try {

        if (hasValue(gridDataCurso) &&
            hasValue(gridDataCurso.store) &&
            hasValue(gridDataCurso.store.objectStore) &&
            hasValue(gridDataCurso.store.objectStore.data) &&
            hasValue(gridDataCurso.store.objectStore.data.length > 0)) {

            $.each(gridDataCurso.store.objectStore.data, function (idx, val) {
                gridDataCurso.store.objectStore.data[idx].nm_mes_curso_final = null;
                gridDataCurso.store.objectStore.data[idx].nm_ano_curso_final = null;
            });
            dijit.byId("gridDataCurso").update();
        }
    } catch (e) {

    }
}


function limparDataCurso(xhr, ref) {
    try {

        var gridDataCurso = dijit.byId("gridDataCurso");

            if (dijit.byId('ckMultipla').checked &&
                (hasValue(gridDataCurso) &&
                hasValue(gridDataCurso.store) &&
                hasValue(gridDataCurso.store.objectStore) &&
                hasValue(gridDataCurso.store.objectStore.data.length == 0))) {
                    limparItemCurso();
                    onChangeActive(false);
                        sugereDiaOpcoesPgto(xhr, ref, 0, 0, 0, 0);
                        //if (parseFloat(dojo.byId('valorTaxaMatricula').value) > 0) {
                        //    dijit.byId('valorMatriculaGrid').set("value", dijit.byId('valorTaxaMatricula').value);
                        //}
                        dijit.byId("cd_curso_atualCurso").set("value", dijit.byId("cd_curso_atual").value);
                        dijit.byId("cd_duracao_atual_curso").set("value", dijit.byId("cd_duracao_atual").value);
                        var gridDataCurso = dijit.byId('gridDataCurso');
                        dojo.byId('cd_responsavel_mensCurso').value = dojo.byId('cd_responsavel_mens').value;
                        dijit.byId('pessoaResponsavelCurso').set("value", dojo.byId('pessoaResponsavel').value);
                    onChangeActive(true);
            } else if (dijit.byId('ckMultipla').checked &&
            (hasValue(gridDataCurso) &&
                hasValue(gridDataCurso.store) &&
                hasValue(gridDataCurso.store.objectStore) &&
                hasValue(gridDataCurso.store.objectStore.data) &&
                hasValue(gridDataCurso.store.objectStore.data.length >= 1))) {
                
                if (getMaxIdProximoCurso(gridDataCurso) == true) {
                    var posicao = getUltimoCursoInserido(gridDataCurso);
                    getProximoCursoPorProdutoSemMatriculaSimultaneaCadMensalidadeShow(dijit.byId("cd_produto_atual").value, (posicao >= 0) ? dijit.byId("gridDataCurso").store.objectStore.data[posicao].cd_proximo_curso : 0, xhr, ref);
                } else {
                    var mensagensWeb = new Array();
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "Não há próximo curso para incluir");
                    apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                }
            }
            else if (dijit.byId('ckProfissional').checked || dijit.byId('ckInformatica').checked) {
                if (dijit.byId('dia').validate() === true &&
                    dijit.byId('mes').validate() === true &&
                    dijit.byId('ano').validate() === true &&
                    dijit.byId('parcelas').validate() === true &&
                    dijit.byId('tipoDocumento').validate() === true &&
                    hasValue(dojo.byId('tipoDocumento').value) &&
                    hasValue(dojo.byId('cd_responsavel_mens')) &&
                    hasValue(dijit.byId('pessoaResponsavel')) &&
                    (dijit.byId('percentualResponsavel').value > 0)) {

                    limparItemCurso();

                    //if (parseFloat(dojo.byId('valorTaxaMatricula').value) > 0) {
                    //    dijit.byId('valorMatriculaGrid').set("value", dijit.byId('valorTaxaMatricula').value);
                    //}

                    dijit.byId('diaCurso').set("value", dijit.byId('dia').value);
                    dijit.byId('mesCurso').set("value", dijit.byId('mes').value);
                    dijit.byId('anoCurso').set("value", dijit.byId('ano').value);

                    dijit.byId('anoInicialCurso').set("value", dijit.byId('anoInicial').value);
                    dijit.byId('anoFinalCurso').set("value", dijit.byId('anoFinal').value);

                    dijit.byId('mesInicialCurso').set("value", dijit.byId('mesInicial').value);
                    dijit.byId('mesFinalCurso').set("value", dijit.byId('mesFinal').value);

                    dijit.byId('parcelasCurso').set("value", dijit.byId('parcelas').value);
                    dijit.byId('tipoDocumentoCurso').set('value', dijit.byId('tipoDocumento').value);
                    dojo.byId('tipoDocumentoCurso').value = dojo.byId('tipoDocumento').value;
                    dojo.byId('cd_responsavel_mensCurso').value = dojo.byId('cd_responsavel_mens').value;
                    dijit.byId('pessoaResponsavelCurso').set("value", dojo.byId('pessoaResponsavel').value);
                    dijit.byId('percentualResponsavelCurso').value = dijit.byId('percentualResponsavel').value;
                    dijit.byId('ckCertificadoCurso').set('disabled', false);
                    dijit.byId('ckCertificadoCurso').set('checked', dijit.byId('ckCertificado').checked);
                    dijit.byId('ckCertificadoCurso').set('disabled', true);
                    dijit.byId("cd_duracao_atual_curso").set("value", dijit.byId("cd_duracao_atual").value);
                }
                getValoresTabelaPrecoCursoGrid(xhr, dijit.byId('cd_curso_atual').get('value'), dijit.byId('cd_duracao_atual').get('value'), 0, false);
            } 
    } catch (e) {
        postGerarLog(e);
    } 
}

function alterarGridItemCurso() {
    var itemCursoSelecionado = null;
    if (hasValue(dijit.byId("gridDataCurso")) && hasValue(dijit.byId("gridDataCurso").itemSelecionado)) {
        itemCursoSelecionado = dijit.byId("gridDataCurso").itemSelecionado;
    }

    var itemCursoAlterado = montarItemCursoAlteracao(itemCursoSelecionado);
    try {
        if (!dijit.byId("cadMensalidade").validate())
            return false;

        if (dijit.byId("ckMultipla").checked && hasValue(itemCursoAlterado)) {
            var dataVencimento = new Date(itemCursoAlterado.nm_ano, (itemCursoAlterado.nm_mes - 1), itemCursoAlterado.nm_dia);
            //var dataEmissao = new Date();
            var dataEmissao = hasValue(dijit.byId('dtaMatricula').value) ? dijit.byId('dtaMatricula').value : 0;
            var dataEmissaoFormatada = dojo.date.locale.format(dataEmissao, { selector: "date", datePattern: "dd/MM/yyyy", formatLength: "short", locale: "pt-br" });

            if (!dijit.byId("cadMensalidade").validate()) {
                return false;
            } else if (dojo.date.compare(dataEmissao, dataVencimento, "date") === 1) {
                var mensagensWeb = [];
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroDataVencimentoTitulo + dataEmissaoFormatada + ").");
                apresentaMensagem('apresentadorMensagemsDataCurso', mensagensWeb);
                return false;

            }
        }
        

        var grid = dijit.byId("gridDataCurso");


        removeObjSort(grid.store.objectStore.data, "cd_curso_ordem", itemCursoSelecionado.cd_curso_ordem);
        insertObjSort(grid.store.objectStore.data, "cd_curso_ordem", itemCursoAlterado);

        grid.itensSelecionados[0] = itemCursoAlterado;

        grid.update();
        grid._refresh();

        var gridTurma = dijit.byId("gridTurmaMat");

        //Atualiza o vinculo do curso caso seja alterado
        if ((hasValue(gridTurma) &&
            hasValue(gridTurma.store) &&
            hasValue(gridTurma.store.objectStore) &&
            hasValue(gridTurma.store.objectStore.data.length > 0))) {

            var turmaAtualizarVincCursoContrato = gridTurma.store.objectStore.data.map(function (item, index, array) {
                return item.cd_curso;
            }).indexOf(grid.itensSelecionados[0].cd_curso);

            if (turmaAtualizarVincCursoContrato >= 0) {
                gridTurma.store.objectStore.data[turmaAtualizarVincCursoContrato].CursoContrato = montarCurso(dijit.byId('gridDataCurso').itensSelecionados[0]);
                gridTurma.itensSelecionados = new Array();
                gridTurma._refresh();
            }
        }
        
        dijit.byId("cadMensalidade").hide();
        

    } catch (e) {
        postGerarLog(e);
    }
}

function addGridItemCurso(Memory, ObjectStore, xhr, ref) {

    var curso = montarItemCurso(xhr, ref);
    try {
        if (hasValue(curso)) {
            var dataVencimento = new Date(curso.nm_ano, (curso.nm_mes - 1), curso.nm_dia);
            //var dataEmissao = new Date();
            var dataEmissao = hasValue(dijit.byId('dtaMatricula').value) ? dijit.byId('dtaMatricula').value : 0;
            var dataEmissaoFormatada = dojo.date.locale.format(dataEmissao, { selector: "date", datePattern: "dd/MM/yyyy", formatLength: "short", locale: "pt-br" });
        }
        

        if (!dijit.byId("cadMensalidade").validate()) {
            return false;
        } else if (hasValue(curso) && (dojo.date.compare(dataEmissao, dataVencimento, "date") === 1)) {
            var mensagensWeb = [];
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroDataVencimentoTitulo + dataEmissaoFormatada + ").");
            apresentaMensagem('apresentadorMensagemsDataCurso', mensagensWeb);
            return false;
            
        }else {

//            require(["dojo/store/Memory", "dojo/data/ObjectStore"],
//                    function (Memory, ObjectStore) {
                        var gridDataCurso = dijit.byId("gridDataCurso");

                        if (binaryObjSearch(gridDataCurso.store.objectStore.data, 'cd_curso', eval('curso.' + 'cd_curso')) != null) {
                            var mensagensWeb = new Array();
                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                                "Este curso já está na grade. Selecione ele na lista para alterar seu valor.");
                            apresentaMensagem("apresentadorMensagemsDataCurso", mensagensWeb);

                        } else if (dijit.byId("valorCursoGrid").value == 0) {
                            var mensagensWeb = new Array();
                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                                "O valor do curso deve ser maior que 0.");
                            apresentaMensagem("apresentadorMensagemsDataCurso", mensagensWeb);

                        } else if (ValidaMesAnoInicialFinalCurso()) {
                            
                        } else {
                            dijit.byId("cadMensalidade").hide();
                            insertObjSort(gridDataCurso.store.objectStore.data,
                                "cd_curso_ordem",
                                curso);

                            dijit.byId("cd_ultimo_curso_inserido").set("value", curso.cd_curso);

                            //gridDataCurso.setStore(new ObjectStore({
                            //    objectStore: new Memory({ data: gridDataCurso.store.objectStore.data })
                            //}));
                            gridDataCurso._refresh(); //.update();

                            //Se 'Matricula Múltipla ' e 'profissionalizante' não estiver marcado desabilita o botão incluir
                            if (!dijit.byId('ckProfissional').checked &&
                                !dijit.byId('ckMultipla').checked &&
                                !dijit.byId('ckInformatica').checked) {
                                dijit.byId('itensDC').set('disabled', true);
                            }

                            if (dijit.byId('ckMultipla').checked &&
                            (hasValue(gridDataCurso) &&
                                hasValue(gridDataCurso.store) &&
                                hasValue(gridDataCurso.store.objectStore) &&
                                hasValue(gridDataCurso.store.objectStore.data.length === 1))) {
                                preencheOpcoesMensalidadeContrato();
                            }

                        }

//                    });
        }
    } catch (e) {
        postGerarLog(e);
    }

}

//function addGridItemCursoAux(Memory, ObjectStore, xhr, ref) {
//    if (dijit.byId('ckProfissional').checked || dijit.byId('ckInformatica').checked)
//        GetCursoOrdem(dijit.byId('cd_curso_atualCurso').value, Memory, ObjectStore, xhr, ref, addGridItemCurso);
//    else
//        addGridItemCurso(Memory, ObjectStore, xhr, ref);
//}

function ValidaMesAnoInicialFinalCurso() {
    try {

        if (hasValue(dijit.byId('mesInicialCurso').value) &&
            hasValue(dijit.byId('anoInicialCurso').value) &&
            hasValue(dijit.byId('mesFinalCurso').value) &&
            hasValue(dijit.byId('anoFinalCurso').value)) {

            if (dijit.byId('anoFinalCurso').value < dijit.byId('anoInicialCurso').value) {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                    msgErroAnoFinalMaiorAnoInicial);
                apresentaMensagem("apresentadorMensagemsDataCurso", mensagensWeb);
                return true;
            } else if ((dijit.byId('mesFinalCurso').value < dijit.byId('mesInicialCurso').value) &&
                (dijit.byId('anoInicialCurso').value === dijit.byId('anoFinalCurso').value)) {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                    msgErroMesFinalMaiorMesInicial);
                apresentaMensagem("apresentadorMensagemsDataCurso", mensagensWeb);
                return true;
            } else {
                return false;
            }
        } else if ((!hasValue(dijit.byId('mesInicialCurso').value) ||
                !hasValue(dijit.byId('anoInicialCurso').value)) &&
            (hasValue(dijit.byId('mesFinalCurso').value) &&
                hasValue(dijit.byId('anoFinalCurso').value))) {

            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                msgErroMesAnoInicialNaoPreenchido);
            apresentaMensagem("apresentadorMensagemsDataCurso", mensagensWeb);
            return true;
        } else {
            return false;
        }
    } catch (e) {
        postGerarLog(e);
    } 
    
}



function ValidaMesAnoInicialFinal() {
    try {

        if (hasValue(dijit.byId('mesInicial').value) &&
            hasValue(dijit.byId('anoInicial').value) &&
            hasValue(dijit.byId('mesFinal').value) &&
            hasValue(dijit.byId('anoFinal').value)) {

            if (dijit.byId('anoFinal').value < dijit.byId('anoInicial').value) {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                    msgErroAnoFinalMaiorAnoInicial);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                return true;
            } else if ((dijit.byId('mesFinal').value < dijit.byId('mesInicial').value) &&
                (dijit.byId('anoInicial').value === dijit.byId('anoFinal').value)) {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                    msgErroMesFinalMaiorMesInicial);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                return true;
            } else {
                return false;
            }
        } else if ((!hasValue(dijit.byId('mesInicial').value) ||
                !hasValue(dijit.byId('anoInicial').value)) &&
            (hasValue(dijit.byId('mesFinal').value) &&
                hasValue(dijit.byId('anoFinal').value))) {

            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                msgErroMesAnoInicialNaoPreenchido);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            return true;
        } else {
            return false;
        }
    } catch (e) {
        postGerarLog(e);
    }

}

function preencheOpcoesMensalidadeContrato() {
    try {
        onChangeActive(false);
            dijit.byId('dia').set("value", dijit.byId('diaCurso').value);
            dijit.byId('mes').set("value", dijit.byId('mesCurso').value);
            dijit.byId('ano').set("value", dijit.byId('anoCurso').value);
            dijit.byId('parcelas').set("value", dijit.byId('parcelasCurso').value);
            dijit.byId('tipoDocumento').set("value", dijit.byId('tipoDocumentoCurso').value);
            dojo.byId('tipoDocumento').value = dojo.byId('tipoDocumentoCurso').value;
            dojo.byId('cd_responsavel_mens').value = dojo.byId('cd_responsavel_mensCurso').value;
            dijit.byId('pessoaResponsavel').set("value", dojo.byId('pessoaResponsavelCurso').value);
            dijit.byId('percentualResponsavel').value = dijit.byId('percentualResponsavelCurso').value;
            dijit.byId('ckCertificado').set('disabled', false);
            dijit.byId('ckCertificado').set('checked', dijit.byId('ckCertificadoCurso').checked);
            dijit.byId('ckCertificado').set('disabled', true);
            dijit.byId('mesInicial').set("value", dijit.byId('mesInicialCurso').value);
            dijit.byId('anoInicial').set("value", dijit.byId('anoInicialCurso').value);
            dijit.byId('mesFinal').set("value", dijit.byId('mesFinalCurso').value);
            dijit.byId('anoFinal').set("value", dijit.byId('anoFinalCurso').value);
        onChangeActive(true);

    } catch (e) {
        postGerarLog(e);
    } 
    
}


function montarItemCurso(xhr, ref) {
    try {
        if (dijit.byId("formOpcoesMensCur").validate()) {
            var objeto = {
                cd_curso: dijit.byId('cd_curso_atualCurso').value,
                no_curso: dojo.byId('cd_curso_atualCurso').value,
                cd_duracao: dijit.byId('cd_duracao_atual_curso').value,
                nm_dia: dijit.byId('diaCurso').get("value"),
                nm_mes: dijit.byId('mesCurso').get("value"),
                nm_ano: dijit.byId('anoCurso').get("value"),
                nm_parcelas: dijit.byId('parcelasCurso').value,
                vl_curso: dijit.byId('valorCursoGrid').value,
                cd_tipo: dijit.byId('tipoDocumentoCurso').value,
                no_tipo: dojo.byId('tipoDocumentoCurso').value,
                cd_pessoa_responsavel: dojo.byId('cd_responsavel_mensCurso').value,
                no_pessoa_responsavel: dijit.byId('pessoaResponsavelCurso').get("value"),
                pc_responsavel_contrato: dijit.byId('percentualResponsavelCurso').value,
                id_liberar: dijit.byId('ckCertificadoCurso').checked,
                val_matricula: dijit.byId('valorMatriculaGrid').value,
                pc_desconto_contrato: dijit.byId('descontoGrid').value,
                vl_desconto_contrato: dijit.byId('valorDescontoGrid').value,
                valorParcela: dijit.byId('valorParcelaGrid').value,
                cd_proximo_curso: dijit.byId('cd_proximo_curso').value,
                vl_curso_liquido: dijit.byId('valorLiquidoGrid').value,
                vl_parcela_liquida: dijit.byId('valorParcelaLiquidaGrid').value,
                nm_mes_curso_inicial: (hasValue(dijit.byId('mesInicialCurso').value) && hasValue(dijit.byId('anoInicialCurso').value)) ? dijit.byId('mesInicialCurso').value : null,
                nm_ano_curso_inicial: (hasValue(dijit.byId('mesInicialCurso').value) && hasValue(dijit.byId('anoInicialCurso').value)) ? dijit.byId('anoInicialCurso').value : null,
                nm_mes_curso_final: (hasValue(dijit.byId('mesFinalCurso').value) && hasValue(dijit.byId('anoFinalCurso').value)) ? dijit.byId('mesFinalCurso').value : null,
                nm_ano_curso_final: (hasValue(dijit.byId('mesFinalCurso').value) && hasValue(dijit.byId('anoFinalCurso').value)) ? dijit.byId('anoFinalCurso').value : null,
                id_valor_incluso: dijit.byId("vlInclusoMaterialC").checked,
                id_incorporar_valor_material: dijit.byId("incorporarMaterialC").checked,
                nm_parcelas_material: dijit.byId("NroParMaterialC").value,
                vl_parcela_material: dijit.byId("vlParcMaterialC").value,
                pc_bolsa_material: dijit.byId("pcBolsaMaterialC").value,
                vl_parcela_liq_material: dijit.byId("vlMaterialContratoCDescontoC").value,
                vl_material_contrato: dijit.byId("vlMaterialContratoC").value,
                cd_curso_ordem: cursoordem
            }
            return objeto;
        }

    } catch (e) {
        postGerarLog(e);
    }
}

function GetCursoOrdem(cdCurso, xhr, ref) {
//    function GetCursoOrdem(cdCurso, Memory, ObjectStore, xhr, ref, pFunc) {
    xhr.get({
        preventCache: true,
        url: Endereco() + "/api/curso/GetCursoOrdem?cdCurso=" + cdCurso,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
    try
    {
        data = jQuery.parseJSON(data);
        if (hasValue(data.retorno)) {
            cursoordem = data.retorno;
        } else {
            cursoordem = 0
        }
    //    if (hasValue(pFunc))
    //        pFunc.call(Memory, ObjectStore, xhr, ref);
    } catch (e) {
        postGerarLog(e);
    }
    },
    function (error) {
        apresentaMensagem('apresentadorMensagemMat', error);
    });
}

function montarItemCursoAlteracao(itenSelecionado) {
    try {
        if (dijit.byId("formOpcoesMensCur").validate()) {
            var objeto = {
                cd_curso_contrato: (hasValue(itenSelecionado) && itenSelecionado.cd_curso_contrato > 0)? itenSelecionado.cd_curso_contrato : 0,
                cd_curso: dijit.byId('cd_curso_atualCurso').value,
                no_curso: dojo.byId('cd_curso_atualCurso').value,
                cd_duracao: dijit.byId('cd_duracao_atual_curso').value,
                nm_dia: dijit.byId('diaCurso').get("value"),
                nm_mes: dijit.byId('mesCurso').get("value"),
                nm_ano: dijit.byId('anoCurso').get("value"),
                nm_parcelas: dijit.byId('parcelasCurso').value,
                vl_curso: dijit.byId('valorCursoGrid').value,
                cd_tipo: dijit.byId('tipoDocumentoCurso').value,
                no_tipo: dojo.byId('tipoDocumentoCurso').value,
                cd_pessoa_responsavel: dojo.byId('cd_responsavel_mensCurso').value,
                no_pessoa_responsavel: dijit.byId('pessoaResponsavelCurso').get("value"),
                pc_responsavel_contrato: dijit.byId('percentualResponsavelCurso').value,
                id_liberar: dijit.byId('ckCertificadoCurso').checked,
                val_matricula: dijit.byId('valorMatriculaGrid').value,
                pc_desconto_contrato: dijit.byId('descontoGrid').value,
                vl_desconto_contrato: dijit.byId('valorDescontoGrid').value,
                valorParcela: dijit.byId('valorParcelaGrid').value,
                cd_proximo_curso: dijit.byId('cd_proximo_curso').value,
                vl_curso_liquido: dijit.byId('valorLiquidoGrid').value,
                vl_parcela_liquida: dijit.byId('valorParcelaLiquidaGrid').value,
                nm_mes_curso_inicial: (hasValue(dijit.byId('mesInicialCurso').value) && hasValue(dijit.byId('anoInicialCurso').value)) ? dijit.byId('mesInicialCurso').value : null,
                nm_ano_curso_inicial: (hasValue(dijit.byId('mesInicialCurso').value) && hasValue(dijit.byId('anoInicialCurso').value)) ? dijit.byId('anoInicialCurso').value : null,
                nm_mes_curso_final: (hasValue(dijit.byId('mesFinalCurso').value) && hasValue(dijit.byId('anoFinalCurso').value)) ? dijit.byId('mesFinalCurso').value : null,
                nm_ano_curso_final: (hasValue(dijit.byId('mesFinalCurso').value) && hasValue(dijit.byId('anoFinalCurso').value)) ? dijit.byId('anoFinalCurso').value : null,
                id_valor_incluso: dijit.byId("vlInclusoMaterialC").checked,
                id_incorporar_valor_material: dijit.byId("incorporarMaterialC").checked,
                nm_parcelas_material: dijit.byId("NroParMaterialC").value,
                vl_parcela_material: dijit.byId("vlParcMaterialC").value,
                pc_bolsa_material: dijit.byId("pcBolsaMaterialC").value,
                vl_parcela_liq_material: dijit.byId("vlMaterialContratoCDescontoC").value,
                vl_material_contrato: dijit.byId("vlMaterialContratoC").value,
                cd_curso_ordem: itenSelecionado.cd_curso_ordem
            }
            return objeto;
        }

    } catch (e) {
        postGerarLog(e);
    }
}

function montarItemCursoEdicao(cursoContrato, ObjectStore, Memory) {
    try {

        var gridDataCurso = dijit.byId('gridDataCurso');
        var cursos = [];
        if (hasValue(cursoContrato)) {
            $.each(cursoContrato,
                function(idx, value) {
                    var curso = {
                        cd_contrato: value.cd_contrato,
                        cd_curso_contrato: value.cd_curso_contrato,
                        cd_curso: value.cd_curso,
                        no_curso: value.no_curso,
                        cd_duracao: value.cd_duracao,
                        nm_dia: value.nm_dia_vcto,
                        nm_mes: value.nm_mes_vcto,
                        nm_ano: value.nm_ano_vcto,
                        nm_parcelas: value.nm_parcelas_mensalidade,
                        vl_curso: value.vl_curso_contrato,
                        cd_tipo: value.cd_tipo_financeiro,
                        no_tipo: value.no_tipo_financeiro,
                        cd_pessoa_responsavel: value.cd_pessoa_responsavel,
                        no_pessoa_responsavel: value.no_pessoa_responsavel,
                        pc_responsavel_contrato: value.pc_responsavel_contrato,
                        id_liberar: value.id_liberar_certificado,
                        val_matricula: value.vl_matricula_curso,
                        pc_desconto_contrato: value.pc_desconto_contrato,
                        vl_desconto_contrato: value.vl_desconto_contrato,
                        valorParcela: value.vl_parcela_contrato,
                        cd_proximo_curso: value.cd_proximo_curso,
                        vl_curso_liquido: value.vl_curso_liquido,
                        vl_parcela_liquida: value.vl_parcela_liquida,

                        nm_mes_curso_inicial: (hasValue(value.nm_mes_curso_inicial) && hasValue(value.nm_ano_curso_inicial)) ? value.nm_mes_curso_inicial : null,
                        nm_ano_curso_inicial: (hasValue(value.nm_mes_curso_inicial) && hasValue(value.nm_ano_curso_inicial)) ? value.nm_ano_curso_inicial : null,
                        nm_mes_curso_final: (hasValue(value.nm_mes_curso_final) && hasValue(value.nm_ano_curso_final)) ? value.nm_mes_curso_final : null,
                        nm_ano_curso_final: (hasValue(value.nm_mes_curso_final) && hasValue(value.nm_ano_curso_final)) ? value.nm_ano_curso_final : null,
                        id_valor_incluso: value.id_valor_incluso,
                        id_incorporar_valor_material: value.id_incorporar_valor_material,
                        nm_parcelas_material: value.nm_parcelas_material,
                        vl_parcela_material: value.vl_parcela_material,
                        pc_bolsa_material: value.pc_bolsa_material,
                        vl_parcela_liq_material: value.vl_parcela_liq_material,
                        vl_material_contrato: value.vl_material_contrato,
                        cd_curso_ordem: value.cd_curso_ordem

                    }

                    insertObjSort(cursos,
                        "cd_curso_ordem",
                        curso);

                });
            gridDataCurso.setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: cursos }) }));
            //gridDataCurso.setStore(new ObjectStore({
            //    objectStore: new Memory({ data: gridDataCurso.store.objectStore.data })
            //}));
           
        } else {
            gridDataCurso.setStore(new ObjectStore({
                objectStore: new Memory({ data: [] })
            }));
        }
        
        gridDataCurso.update();
    } catch (e) {
        postGerarLog(e);
    }
}

function limparItemCurso() {
    try {
        onChangeActive(false);
        //dijit.byId('cd_curso_atual').reset();
        //dojo.byId('cd_curso_atual').value = "";
        //dijit.byId('cd_duracao_atual').reset();
        dijit.byId('diaCurso').reset();
        dijit.byId('mesCurso').reset();
        dijit.byId('anoCurso').reset();
        dijit.byId('parcelasCurso').reset();

        dijit.byId('valorCursoGrid').set('value', 0);
        dijit.byId('valorCursoGrid').old_value = 0;
        
        dijit.byId('valorLiquidoGrid').set('value', 0);
        dijit.byId('valorLiquidoGrid').old_value = 0;

        dijit.byId('valorParcelaLiquidaGrid').set('value', 0);
        dijit.byId('valorParcelaLiquidaGrid').old_value = 0;

        dijit.byId('tipoDocumentoCurso').reset();
        dojo.byId('tipoDocumentoCurso').value = "";
        dojo.byId("tipoDocumentoCurso").old_value = 0;
        dojo.byId('cd_responsavel_mensCurso').value = 0;
        dijit.byId('pessoaResponsavelCurso').reset();
        dijit.byId('pessoaResponsavelCurso').reset();
        dijit.byId('ckCertificadoCurso').checked = false;
        dijit.byId('valorMatriculaGrid').set('value', 0);
        //dijit.byId('valorMatricula').reset();
        dijit.byId("descontoGrid").old_value = 0;
        dijit.byId('descontoGrid').set('value', 0);

        dijit.byId('valorDescontoGrid').set('value', 0);
        dijit.byId('valorParcelaGrid').set('value', 0);
        //dijit.byId('parcelaLiquida').reset();
        dijit.byId("vlInclusoMaterialC").set("value", false);
        dijit.byId("incorporarMaterialC").set("value", false);
        dijit.byId("NroParMaterialC").set("value", 0);
        dijit.byId("vlParcMaterialC").set("value", 0);
        dijit.byId("pcBolsaMaterialC").set("value", 0);
        dijit.byId("vlMaterialContratoCDescontoC").set("value", 0);
        dijit.byId("vlMaterialContratoC").set("value", 0);
        onChangeActive(true);
    } catch (e) {
        postGerarLog(e);
    }
}

function keepValuesDataCurso(value, grid) {
    try {
        limparItemCurso();
        //limparValores();
        //dojo.byId('cd_curso_atual').value = value.no_curso;
        onChangeActive(false);
        dijit.byId('valorParcelaGrid')._onChangeActive = false;
        dijit.byId("cd_curso_atualCurso").set("value", value.cd_curso);
        dijit.byId('cd_duracao_atual_curso').set("value", value.cd_duracao);
        dijit.byId('diaCurso').set("value", value.nm_dia);
        dijit.byId('mesCurso').set("value", value.nm_mes);
        dijit.byId('anoCurso').set("value", value.nm_ano);
        dijit.byId('parcelasCurso').set("value", value.nm_parcelas);
        dijit.byId('tipoDocumentoCurso').set("value", value.cd_tipo);
        dojo.byId('tipoDocumentoCurso').value = value.no_tipo;
        dojo.byId('cd_responsavel_mensCurso').value = value.cd_pessoa_responsavel;
        dijit.byId('pessoaResponsavelCurso').set("value", value.no_pessoa_responsavel);
        dijit.byId('percentualResponsavelCurso').value = value.pc_responsavel_contrato;
        dijit.byId('ckCertificadoCurso').checked = value.id_liberar;

        if(hasValue(value.nm_mes_curso_inicial)) { dijit.byId('mesInicialCurso').set("value", value.nm_mes_curso_inicial);}
        if (hasValue(value.nm_ano_curso_inicial)) { dijit.byId('anoInicialCurso').set("value", value.nm_ano_curso_inicial); }

        if(hasValue(value.nm_mes_curso_final)) {dijit.byId('mesFinalCurso').set("value", value.nm_mes_curso_final);}
        if(hasValue(value.nm_ano_curso_final)) {dijit.byId('anoFinalCurso').set("value", value.nm_ano_curso_final);}

        dijit.byId('valorCursoGrid').set("value", value.vl_curso);
        dijit.byId('valorMatriculaGrid').set("value", value.val_matricula);
        dijit.byId('descontoGrid').set("value", value.pc_desconto_contrato);
        // dijit.byId('desconto').value = value.pc_desconto_contrato;
        dijit.byId('valorDescontoGrid').set("value", value.vl_desconto_contrato);
        dijit.byId('valorParcelaGrid').set("value", value.valorParcela);
        dijit.byId('cd_proximo_curso').set("value", value.cd_proximo_curso);
        dijit.byId('valorLiquidoGrid').set("value", value.vl_curso_liquido);
        dijit.byId('valorParcelaLiquidaGrid').set("value", value.vl_parcela_liquida);
        dijit.byId('valorParcelaGrid')._onChangeActive = true;
        dijit.byId("vlInclusoMaterialC").set("value", value.id_valor_incluso);
        dijit.byId("incorporarMaterialC").set("value", value.id_incorporar_valor_material);
        dijit.byId("NroParMaterialC").set("value", value.nm_parcelas_material);
        dijit.byId("vlParcMaterialC").set("value", value.vl_parcela_material);
        dijit.byId("pcBolsaMaterialC").set("value", value.pc_bolsa_material);
        dijit.byId("vlMaterialContratoCDescontoC").set("value", value.vl_parcela_liq_material);
        dijit.byId("vlMaterialContratoC").set("value", value.vl_material_contrato);

        if (value.id_valor_incluso) {
            dijit.byId("incorporarMaterialC").set("disabled", true);
            dijit.byId("NroParMaterialC").set("disabled", true);
            dijit.byId("vlParcMaterialC").set("disabled", true);
            dijit.byId("pcBolsaMaterialC").set("disabled", true);
            dijit.byId("vlMaterialContratoCDescontoC").set("disabled", true);
        }
        dijit.byId("vlInclusoMaterialC").set('checked', value.id_valor_incluso);
        dijit.byId("incorporarMaterialC").set('checked', value.id_incorporar_valor_material);

        onChangeActive(true);

    } catch (e) {
        postGerarLog(e);
    }
}


function deletarItemCurso(Memory, ObjectStore) {
    try {
        var grid = dijit.byId("gridDataCurso");
        grid.store.save();
        var dados = grid.store.objectStore.data;

        if (dados.length > 0 && hasValue(grid.itensSelecionados) && grid.itensSelecionados.length > 0) {
            //Percorre a lista da grade para deleção (O(n)):

            if (dijit.byId("ckMultipla").checked == true || dijit.byId("ckProfissional").checked == true || dijit.byId("ckInformatica").checked == true) {
                for (var i = dados.length - 1; i >= 0; i--) {

                    // Verifica se os itens selecionados estão na lista e remove com busca binária (O(log n)):
                    if (binaryObjSearch(grid.itensSelecionados, 'cd_curso', eval('dados[i].' + 'cd_curso')) != null) {

                        var pos = binaryObjSearch(grid.store.objectStore.data,
                            'cd_curso',
                            eval('dados[i].' + 'cd_proximo_curso'));
                        if (pos == null) {
                            //if (dados.length > 1) {
                            //    dijit.byId("cd_ultimo_curso_inserido").set("value", dados[i + 1].cd_curso);
                            //    dijit.byId("cd_proximo_curso").set("value", dados[i + 1].cd_proximo_curso);

                            //}
                            //if (binaryObjSearch(grid.itensSelecionados, 'cd_curso', eval('dados[i].' + 'cd_curso')) != null)
                            var gridDataTurma = dijit.byId('gridTurmaMat');
                            if (hasValue(gridDataTurma) &&
                                hasValue(gridDataTurma.store) &&
                                hasValue(gridDataTurma.store.objectStore) &&
                                hasValue(gridDataTurma.store.objectStore.data.length === 0)) {
                                //se o grid de turma estiver vazio remove o curso sem validacoes
                                dados.splice(i, 1); // Remove o item do array
                            } else if (hasValue(gridDataTurma) &&
                                hasValue(gridDataTurma.store) &&
                                hasValue(gridDataTurma.store.objectStore) &&
                                hasValue(gridDataTurma.store.objectStore.data.length >= 1)) {
                                
                                var turmaRemover = gridDataTurma.store.objectStore.data.map(function (item, index, array) {
                                    return item.cd_curso; 
                                }).indexOf(dados[i].cd_curso);

                                if (turmaRemover >= 0 && gridDataTurma.store.objectStore.data[turmaRemover].cd_situacao_aluno_turma === 9) {

                                    var cursoRemovido = dados.splice(i, 1); // Remove o item do array
                                   
                                    if (hasValue(cursoRemovido)) {
                                        var indexRemoveTurma = turmaRemover;
                                       
                                        //remove turma
                                        gridDataTurma.store.objectStore.data.splice(indexRemoveTurma, 1);
                                        gridDataTurma.itensSelecionados = new Array();
                                        var dataStoreTurma = new ObjectStore({
                                            objectStore: new Memory({
                                                data: gridDataTurma.store.objectStore.data
                                            })
                                        });

                                        gridDataTurma.setStore(dataStoreTurma);
                                        gridDataTurma.update();
                                        
                                    }
                                } else {
                                    caixaDialogo(DIALOGO_AVISO,
                                        'Não é possível excluir o curso e a turma vinculada a este curso, pois existe contrato.',
                                        null);
                                }
                            }

                        } else {

                            var mensagensWeb = new Array();
                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgValidaRemocaoCursoMatriculaMultipla);
                            apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                        }


                    }

                }
            } else {
                for (var i = dados.length - 1; i >= 0; i--) {

                    // Verifica se os itens selecionados estão na lista e remove com busca binária (O(log n)):
                    if (binaryObjSearch(grid.itensSelecionados, 'cd_curso', eval('dados[i].' + 'cd_curso')) != null)
                        dados.splice(i, 1); // Remove o item do array
                }
            }
            

            grid.itensSelecionados = new Array();
            var dataStore = new ObjectStore({ objectStore: new Memory({ data: dados }) });
            grid.setStore(dataStore);
            grid.update();

            if (grid.store.objectStore.data.length == 0) {
                dijit.byId('vl_contrato').set('value', 0);
            }
            

            //Habilita o botão incluir caso a quantidade do grid seja menor que 2
            if (dijit.byId('ckMultipla').checked &&
            (hasValue(grid) &&
                hasValue(grid.store) &&
                hasValue(grid.store.objectStore) &&
                hasValue(grid.store.objectStore.data) &&
                hasValue(grid.store.objectStore.data.length < 2))) {

                dijit.byId('itensDC').set('disabled', false);
            }

            if (
            (hasValue(grid) &&
                hasValue(grid.store) &&
                hasValue(grid.store.objectStore) &&
                !hasValue(grid.store.objectStore.data) &&
                hasValue(grid.store.objectStore.data.length == 0))) {

                dijit.byId('itensDC').set('disabled', false);
            }
        }
        else
            caixaDialogo(DIALOGO_AVISO, 'Selecione algum registro para excluir.', null);
    }
    catch (e) {
        postGerarLog(e);
    }
}



function filterItemByName(id, value) {
    if (hasValue(dijit.byId(id).store.data)) {
        return dijit.byId(id).store.data.filter(function (item, index) {
            if (item.name.toLowerCase() == value.toLowerCase()) {
                return item.id;
            }
        });
    }
    return null;
}

function filterItemByNameProduto(id, value) {
    if (hasValue(storeProdutoAtual)) {
        return storeProdutoAtual.filter(function (item, index) {
            if (item.name.toLowerCase() == value.toLowerCase()) {
                return item.id;
            }
        });
    }
    return null;
}

function mapArrayByNames(data, value1, value2) {

    if (hasValue(data)) {
        return data.filter(function (itemData, index) {
            if (hasValue(itemData.name)) {
                if (itemData.name.toLowerCase() !== value1.toLowerCase() && itemData.name.toLowerCase() !== value2.toLowerCase()) {
                    return itemData;
                }
            }
        });
    }
}

function verificaCheckedMatriculaMultipla() {
    //verifica se é matricula multipla ou normal
    return (dijit.byId('ckMultipla').checked || 
        (!dijit.byId('ckMultipla').checked && !dijit.byId('ckProfissional').checked && !dijit.byId('ckInformatica').checked)) ? true : false;
}

function retornaMapProfissionalizanteInformatica(data) {

    return verificaCheckedMatriculaMultipla() ? mapArrayByNames(data, 'Profissionalizante', 'Informática') : data;
}

function atualizarValoresMapStoreProdutoAtual() {
    if (!hasValue(storeProdutoAtual)) {
        storeProdutoAtual = dijit.byId("cd_produto_atual").store.data;
    }
    if (!hasValue(storeProdutoAtualSemProfissionalizanteInformatica)) {
        storeProdutoAtualSemProfissionalizanteInformatica = retornaMapProfissionalizanteInformatica(dijit.byId("cd_produto_atual").store.data);
    }

    verificaCheckedMatriculaMultipla() ? dijit.byId("cd_produto_atual").store.data = storeProdutoAtualSemProfissionalizanteInformatica : storeProdutoAtual;
}


function verificaMatriculaNormal() {
    return (!dijit.byId('ckMultipla').checked && !dijit.byId('ckProfissional').checked && !dijit.byId('ckInformatica').checked) ? true : false;
}

function verificaTipoCKMatricula() {
    
    if (dijit.byId('ckMultipla').checked) {
        return EnumTipoCKMatricula.MULTIPLA;
    }else if (dijit.byId('ckProfissional').checked) {
        return EnumTipoCKMatricula.PROFISSIONALIZANTE;
    }else if (dijit.byId('ckInformatica').checked) {
        return EnumTipoCKMatricula.INFORMATICA;
    } else if (verificaMatriculaNormal()) {
        return EnumTipoCKMatricula.NORMAL;
    }
}

function atualizaValorTaxaMatriculaGridCurso(grid, valorTaxaAlterado) {
    try {
        require(["dojo/store/Memory", "dojo/data/ObjectStore"],
            function(Memory, ObjectStore) {
                if ((hasValue(grid) &&
                    hasValue(grid.store) &&
                    hasValue(grid.store.objectStore) &&
                    hasValue(grid.store.objectStore.data.length > 0))) {

                    var newDataStore = grid.store.objectStore.data.map(function(item, index, array) {
                            item.val_matricula = valorTaxaAlterado;
                            return item;
                        },
                        0);
                    console.log(newDataStore);
                    grid.setStore(new ObjectStore({
                        objectStore: new Memory({ data: newDataStore })
                    }));
                    grid.update();

                }
            });
    } catch (e) {
        postGerarLog(e);
    } 
}

function getAllNumeroParcelasCursoGrid(grid) {
    try {
        if ((hasValue(grid) &&
            hasValue(grid.store) &&
            hasValue(grid.store.objectStore) &&
            hasValue(grid.store.objectStore.data.length > 0))) {

            var numeroParcelas = grid.store.objectStore.data.reduce(function(prev, current) {
                return (prev + current.nm_parcelas);
                }, 0);

            return numeroParcelas;
        } else {
            return 0;
        }
    } catch (e) {
        postGerarLog(e);
    } 
}



function getAllValorCursoGrid(grid) {
    try {
        if ((hasValue(grid) &&
            hasValue(grid.store) &&
            hasValue(grid.store.objectStore) &&
            hasValue(grid.store.objectStore.data.length > 0))) {

            var sumValorCurso = grid.store.objectStore.data.reduce(function (prev, current) {
                return (prev + current.vl_curso);
            }, 0.0);

            return sumValorCurso;
        } else {
            return 0.0;
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function getAllItensGrid(grid) {
    try {
        if ((hasValue(grid) &&
            hasValue(grid.store) &&
            hasValue(grid.store.objectStore) &&
            hasValue(grid.store.objectStore.data.length > 0))) {
            return grid.store.objectStore.data;
        } else {
            return null;
        }
    } catch (e) {
        postGerarLog(e);
    }
}


function abrirTipoDescFK(idOrigem) {
    dojo.ready(function () {
        limparPesquisaTipoDesconto();
        dijit.byId("pparcFK").set("disabled", true);
        dijit.byId("pparcFK").set("value", 2);
        dojo.byId("idOrigemTipoDescFK").value = idOrigem;
        if (idOrigem == ORIGEMDESCMENSALMATRICULA) {
            dijit.byId("statusTipoDescontoFK").set("disabled", false);

        } else {
            dijit.byId("statusTipoDescontoFK").set("value", 1);
            dijit.byId("incideBaixaFK").set("value", 2);
            dijit.byId("statusTipoDescontoFK").set("disabled", true);
        }
        pesquisarTipoDescontoFK();
        dijit.byId('proTipoDescontoFK').show();
        dijit.byId("statusTipoDescontoFK").set("disabled", true);
    });
}

function verificarDatasAditamento(eventDataIniAdt) {
    try {
        var dtaInicioMat = dijit.byId("dtaInicioMat");
        var dtaMatricula = dijit.byId("dtaMatricula");
        var dtaFinalMat = dijit.byId("dtaFinalMat");
        var dataIniAdt = dijit.byId("dtInicioAdto").value;
        if (eventDataIniAdt != null)
            dataIniAdt = eventDataIniAdt;
        var validado = true;
        var mensagensWeb = new Array();
        if (dijit.byId('tipoContratoAdto').aditamento && dataIniAdt != null) {
            if ((hasValue(dtaInicioMat.get("value")) && dojo.date.compare(dataIniAdt, dtaInicioMat.get("value")) == -1) ||
                (hasValue(dtaMatricula.get("value")) && dojo.date.compare(dataIniAdt, dtaMatricula.get("value")) == -1)) {
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErrorDataInicioOuDataMatriculaMaiorDtaInicioAditamento);
                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                validado = false;
            }
            if (hasValue(dtaFinalMat.get("value")) && dojo.date.compare(dataIniAdt, dtaFinalMat.get("value")) > 0) {
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroDtaInicioAdtMaiorQueDataFimMatricula);
                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                validado = false;
            }
            if (!validado) {
                dijit.byId('dtInicioAdto')._onChangeActive = false;
                dijit.byId('dtInicioAdto').reset();
                dijit.byId('dtInicioAdto')._onChangeActive = true;

                if (hasValue(dijit.byId("tipoAditamento").value) && dijit.byId("tipoAditamento").value > 0 && dojo.byId("cd_aditamento").value > 0 && dijit.byId("tipoAditamento").value == ADICIONAR_PARCELAS) {
                    inativarEventoOnChangeAditamento();
                    dijit.byId("valorAditivo").value = 0;
                    dijit.byId("NroTitAdt").value = 0;
                    //dijit.byId("valorAditivo").oldValue = 0;
                    dijit.byId("ValorParcAdic").value = 0;
                    dijit.byId("NroTitAdt").oldValue = 0;
                    dijit.byId("ValorParcAdic").oldValue = 0;
                    ativaEventoOnChangeAditamento();
                }

            } else {
                buscarAjusteManualAditamentosAnteriores();
                apresentaMensagem('apresentadorMensagemMat', null);
                //if (hasValue(dijit.byId("tipoAditamento").value) && dijit.byId("tipoAditamento").value > 0 &&
                //             dojo.byId("cd_aditamento").value > 0 && dijit.byId("tipoAditamento").value == ADITIVO_BOLSA &&
                //             !verificarAditamentoBolsa(true, msgErroAditamentoBolsaData, true)) {
                //    return false;
                //}
                if (hasValue(dijit.byId("tipoAditamento").value) && dijit.byId("tipoAditamento").value > 0 && dojo.byId("cd_aditamento").value > 0)
                    montarEstruturaAditamentoDifAddParcelas(dijit.byId("tipoAditamento").value);
                verificarRegrasAditamento(validado);
            }
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function funcaoFKTurma() {
    try {
        var turmaEmFormacao = 3;
        limparFiltrosTurmaFK();
        dojo.byId("trAluno").style.display = "none";
        dijit.byId("pesSituacaoFK").costumizado = true;
        dojo.byId("idOrigemCadastro").value = TELAMATRICULA;
        var codPessoaAluno = dojo.byId('cd_pessoa_aluno_mat').value;
        var codAluno = dojo.byId('cd_aluno_mat').value;
        if (!verificaSeExistAluno(codPessoaAluno, codAluno))
            return false;
        abrirTurmaFK();
        if (hasValue(dijit.byId('cd_produto_atual').value)) {
            dijit.byId('pesProdutoFK').set("value", dijit.byId('cd_produto_atual').value);
            dijit.byId('pesProdutoFK').set("disabled", true);
        }


        if (hasValue(dijit.byId('cd_duracao_atual').value)) {
            dijit.byId('pesDuracaoFK').set("value", dijit.byId('cd_duracao_atual').value);
            dijit.byId('pesDuracaoFK').set("disabled", true);
        }

        if (hasValue(dijit.byId('cd_regime_atual').value && dijit.byId('cd_regime_atual').value == 2)) {
            dijit.byId('tipoTurmaFK').set("value", PPT);
        }
        else if (hasValue(dijit.byId('cd_regime_atual').value && dijit.byId('cd_regime_atual').value != 2)){
            dijit.byId('tipoTurmaFK').set("value", NORMAL);
            dojo.byId("lblTurmaFilhasFK").style.display = "none";
            dojo.byId("divPesTurmasFilhasFK").style.display = "none";
        }
        if (verificaMatriculaNormal()) {
            if (hasValue(dijit.byId('cd_curso_atual').value)) {
                dijit.byId('pesCursoFK').set("value", dijit.byId('cd_curso_atual').value);
                dijit.byId('pesCursoFK').set("disabled", true);
            }
        } else {
            var gridDataCurso = dijit.byId("gridDataCurso");
            
            if (!hasValue(gridDataCurso.itensSelecionados) || gridDataCurso.itensSelecionados.length <= 0) {
                caixaDialogo(DIALOGO_AVISO, 'Selecione algum curso registro para incluir uma turma.', null);
            } else if (gridDataCurso.itensSelecionados.length > 1) {
                caixaDialogo(DIALOGO_ERRO, 'Selecione apenas um curso para incluir uma turma.', null);
            } else {
                if (hasValue(gridDataCurso.itensSelecionados[0])) {
                    dijit.byId('pesCursoFK').set("value", gridDataCurso.itensSelecionados[0].cd_curso);
                    dijit.byId('pesCursoFK').set("disabled", true);
                }
            }
                

        }
        

        pesquisaTurmaDisponivelAluno();
        dojo.byId("legendTurmaFK").style.visibility = 'visible';

    } catch (e) {
        postGerarLog(e);
    }
}

function limparValores(limparMaterial) {
    try {
        onChangeActive(false);
        dijit.byId('parcelas').reset();
        dijit.byId('valorCurso').set('value', 0);
        dojo.byId("valorCurso").old_value = 0;
        dijit.byId('valorMatricula').set('value', 0);
        dijit.byId('valorParcela').set('value', 0);
        dijit.byId('valorParcela').value = 0;
        dijit.byId('valorParcela').old_value = 0;

        dijit.byId('edValParcela').set('value', 0);
        dijit.byId('edValParcela').value = 0;
        dijit.byId('edValParcela').old_value = 0;

        dijit.byId('edParcelaLiquida').set('value', 0);
        dijit.byId('edParcelaLiquida').value = 0;
        dijit.byId('edParcelaLiquida').old_value = 0;

        dijit.byId('valorLiquidoGrid').set('value', 0);
        dijit.byId('valorLiquidoGrid').value = 0;
        dijit.byId('valorLiquidoGrid').old_value = 0;


        dijit.byId('valorParcelaLiquidaGrid').set('value', 0);
        dijit.byId('valorParcelaLiquidaGrid').value = 0;
        dijit.byId('valorParcelaLiquidaGrid').old_value = 0;

        dijit.byId('desconto').set('value', 0);
        dijit.byId('desconto').old_value = 0;
        dijit.byId('valorDesconto').set('value', 0);
        dijit.byId('valorDesconto').old_value = 0;
        dijit.byId('valorFaturar').set('value', 0);
        dijit.byId('valorFaturar').old_value = 0;
        dijit.byId('ckPrimeiraParcela').set('value', 0);
        dijit.byId('divida').set('value', 0);
        dojo.byId("divida").old_value = 0;
        habilitarOnChange(dijit.byId('vl_contrato'), false);
        dijit.byId('vl_contrato').set('value', maskFixed(0, 2));
        habilitarOnChange(dijit.byId('vl_contrato'), true);
        dojo.byId("vl_contrato").old_value = 0;
        dijit.byId('valorMatriculaTotal').set('value', 0);
        dijit.byId('descontoPrimeiraParcela').set('value', 0);
        dojo.byId("descontoReais").value = 0;
        dojo.byId("valorCursoOri").value = 0;
        dojo.byId("descontoPrimeiraParc").value = 0;
        if (limparMaterial) {
            dijit.byId("vlInclusoMaterial").reset();
            dijit.byId("incorporarMaterial").reset();
            dijit.byId("NroParMaterial").set('value', 0);
            dijit.byId("vlParcMaterial").set('value', 0);
            dijit.byId("pcBolsaMaterial").set('value', 0);
            dijit.byId("vlMaterialContratoCDesconto").set('value', 0);
            dijit.byId("vlMaterialContrato").set('value', 0);
        }

        dijit.byId('gridDesconto').setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: null }) }));
        dojo.byId('totalValorTodosDescontos').value = 0;
        dojo.byId('totalPorcentagemTodosDescontos').value = 0;

        // Todos descontos, menos os que incidem na primeira parcela e menos os que incidem na baixa:
        dojo.byId('totalValorDesconto').value = 0;
        dojo.byId('totalPorcentagemDesconto').value = 0;

        // Todos descontos que incidem na primeira parcela e não incidem na baixa:
        dojo.byId('totalValorDescontoPrimeiraParcela').value = 0;
        dojo.byId('totalPorcentagemDescontoPrimeiraParcela').value = 0;

        onChangeActive(true);
    } catch (e) {
        postGerarLog(e);
    }
}

function criaNovaMatricula(xhr, Memory, dadosAluno, origem, ObjectStore, pFuncao) {
    try {
        INCLUIR = true;
        // Limpar Id endereço aluno
        if (hasValue(parseInt(dojo.byId("cd_endereco_aluno").value)))
            dojo.byId("cd_endereco_aluno").value = 0;

        existe_data_alteracao_aditivo = false;
        apresentaMensagem('apresentadorMensagemMat', null);
        limparCadMatricula(xhr, ObjectStore, Memory, true);
        populaSemTurma(0, 0, 0, 0, 0, xhr, Memory, null, function () {
            IncluirAlterar(1, 'divAlterarMatricula', 'divIncluirMatricula', 'divExcluirMatricula', 'apresentadorMensagemMat', 'divCancelarMatricula', 'divLimparMatricula');
            //dojo.xhr.get({
            //    url: Endereco() + "/auth/getnomeusuario",
            //    preventCache: true,
            //    headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
            //}).then(function (data) {
            //var retorno = jQuery.parseJSON(data).retorno;
            dojo.byId("atendente").value = document.getElementById('nomeUsuario').innerText;
            //dojo.byId("atendente").value = retorno;
            //dijit.byId('dtaMatricula').attr("value", new Date(ano, mes, dia));
            //sugereDiaOpcoesPgto(xhr, dojox.json.refref, 0, 0, 0, 0);
            dijit.byId('cadMatricula').show();

            dijit.byId('tabContainerMatricula').resize();

            //habilitarOnChange("ckAula", true);
            hideTagMatriculaTurma();

            dijit.byId("cd_curso_atual").set("required", true);
            dijit.byId("cd_produto_atual").set("required", true);
            dijit.byId("cd_duracao_atual").set("required", true);
            dijit.byId("cd_regime_atual").set("required", true);
            dojo.byId('opcoes').style.display = 'block';
            dojo.byId('opcoesDC').style.display = 'none';
            dojo.byId('tgValCurso').style.display = 'block';

            //ORIGEM 1: Aluno - 2: Turma - 3: Matricula
            if (origem != 3) {
                dojo.byId('nomeAlunoMat').value = dadosAluno.nom_aluno;
                dojo.byId('cd_aluno_mat').value = dadosAluno.cd_aluno;
                dojo.byId('cd_pessoa_aluno_mat').value = dadosAluno.cd_pessoa_aluno;
                dojo.byId('cd_responsavel_mens').value = dadosAluno.cd_pessoa_responsavel != null && dadosAluno.cd_pessoa_responsavel > 0 ? dadosAluno.cd_pessoa_responsavel : dadosAluno.cd_pessoa_aluno;
                dojo.byId('pessoaResponsavel').value = dadosAluno.no_pessoa_responsavel != null ? dadosAluno.no_pessoa_responsavel : dadosAluno.nom_aluno;
                dojo.byId('cd_responsavel_tax').value = dadosAluno.cd_pessoa_responsavel != null ? dadosAluno.cd_pessoa_responsavel : dadosAluno.cd_pessoa_aluno;
                dojo.byId('pessoaResponsavelTax').value = dadosAluno.no_pessoa_responsavel != null ? dadosAluno.no_pessoa_responsavel : dadosAluno.nom_aluno;
            }
            if (hasValue(dadosAluno.pc_bolsa) && dadosAluno.pc_bolsa >= 0) {
                dojo.byId("pc_bolsa_aluno").value = dadosAluno.pc_bolsa;
                if (hasValue(dadosAluno.dt_inicio_bolsa)) {
                    dijit.byId("dt_inicio_bolsa_aluno").set("value", dadosAluno.dt_inicio_bolsa);
                    if (dojo.byId('cd_aluno_mat').value > 0 && hasValue(dijit.byId('dtaMatricula').value)) {
                        if (dojo.date.compare(dijit.byId('dtaMatricula').value, dijit.byId("dt_inicio_bolsa_aluno").value, "date") >= 0) {
                            dijit.byId("perc_bolsa").set("value", unmaskFixed(dojo.byId("pc_bolsa_aluno").value, 2));
                        } else {
                            dijit.byId("perc_bolsa").reset();
                        }
                    }
                }
            }
            if (hasValue(dadosAluno.pc_bolsa_material) && dadosAluno.pc_bolsa_material > 0) {
                dojo.byId("pc_bolsa_material_aluno").value = dadosAluno.pc_bolsa_material;
                if (dojo.byId("pc_bolsa_material_aluno").value > 0 && hasValue(dijit.byId("dt_inicio_bolsa_aluno").value)) {
                    if (dojo.date.compare(dijit.byId('dtaMatricula').value, dijit.byId("dt_inicio_bolsa_aluno").value, "date") >= 0) {
                        dijit.byId("pcBolsaMaterial").set("disabled", false);
                        dijit.byId("pcBolsaMaterialC").set("disabled", false);
                        dijit.byId("vlMaterialContratoCDesconto").set("disabled", false);
                        dijit.byId("pcBolsaMaterial").set("value", unmaskFixed(dojo.byId("pc_bolsa_material_aluno").value, 2));
                        dijit.byId("vlMaterialContratoCDescontoC").set("disabled", false);
                        dijit.byId("pcBolsaMaterialC").set("value", unmaskFixed(dojo.byId("pc_bolsa_material_aluno").value, 2));
                    } else {
                        dijit.byId("vlMaterialContratoCDesconto").set("disabled", true);
                        dijit.byId("vlMaterialContratoCDescontoC").set("disabled", true);
                        dijit.byId("pcBolsaMaterial").set("disabled", true);
                        dijit.byId("pcBolsaMaterial").reset();
                        dijit.byId("pcBolsaMaterialC").set("disabled", true);
                        dijit.byId("pcBolsaMaterialC").reset();
                    }
                } else {
                    dijit.byId("vlMaterialContratoCDesconto").set("disabled", false);
                    dijit.byId("pcBolsaMaterial").set("disabled", false);
                    dijit.byId("vlMaterialContratoCDescontoC").set("disabled", false);
                    dijit.byId("pcBolsaMaterialC").set("disabled", false);
                }
            }
            if (hasValue(dadosAluno.vl_abatimento_matricula)) {
                dijit.byId("vl_pre_matricula").constraints.max = dadosAluno.vl_abatimento_matricula;
                dijit.byId('vl_pre_matricula').constraints.min = dadosAluno.vl_abatimento_matricula;
                dijit.byId('vl_pre_matricula').set("value", dadosAluno.vl_abatimento_matricula);
                dojo.attr(dijit.byId('vl_pre_matricula'), "title", "Valor de pré matrícula pendente:  " + dijit.byId('vl_pre_matricula').value);
            }
            //if (origem == 1)
                dijit.byId("btnAddTurma").set("disabled", false);

            //aditamento
            dijit.byId("NroTitAdt").set("disabled", true);
            //dijit.byId("VctoAdt").set("disabled", true);
            dijit.byId("tipoAditamento").set("disabled", true);
            dijit.byId("edPrevDias").set("disabled", true);
            dijit.byId("edValorAulaAdto").set("disabled", true);
            dijit.byId("tipoPagto").set("disabled", true);
            dijit.byId("notasMaterialDidatico").set("disabled", false);
            dijit.byId("notasMaterialDidatico").set("required", false);

            //Abre a tela de matricula
            dijit.byId('cadMatricula').show();
            dijit.byId('tabContainerMatricula').resize();
            dijit.byId('btnaddTitulo').set('disabled', true);

            //habilitarOnChange("ckAula", false);
            if (hasValue(pFuncao)) {
                pFuncao.call();
            }
            //},
            //function (error) {
            //    caixaDialogo(DIALOGO_ERRO, 'Não foi possível buscar o nome do usuário.', null);
            //});
        }, true);
    } catch (e) {
        postGerarLog(e);
    }
}

function sugereDiaOpcoesPgto(xhr, ref, dtaMatricula, cd_curso, cd_duracao, cd_regime) {
    try {
        if (!hasValue(dtaMatricula))
            dtaMatricula = dojo.byId('dtaMatricula').value;
        if (!hasValue(cd_curso))
            cd_curso = hasValue(dijit.byId('cd_curso_atual')) ? dijit.byId('cd_curso_atual').get('value') : 0;
        if (!(hasValue(cd_duracao)))
            cd_duracao = hasValue(dijit.byId('cd_duracao_atual')) ? dijit.byId('cd_duracao_atual').get('value') : 0;
        if (!hasValue(cd_regime))
            cd_regime = hasValue(dijit.byId('cd_regime_atual')) ? dijit.byId('cd_regime_atual').get('value') : 0;
        xhr.get({
            preventCache: true,
            url: Endereco() + "/api/escola/getSugestaoDiaOpcoesPgto?str_data_matricula=" + dtaMatricula + "&cd_curso=" + cd_curso + "&cd_duracao=" + cd_duracao + "&cd_regime=" + cd_regime,
            handleAs: "json",
            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
        }).then(function (data) {
            try {
                data = jQuery.parseJSON(data).retorno;
                if (hasValue(data)) {
                    onChangeActive(false);
                    dijit.byId('dia').set("value", data.dia);
                    dijit.byId('mes').set("value", data.mes);
                    dijit.byId('ano').set("value", data.ano);

                    if (hasValue(data.nro_parcelas))
                        dijit.byId('parcelas').set('value', data.nro_parcelas);

                    dijit.byId('diaCurso').set("value", data.dia);
                    dijit.byId('mesCurso').set("value", data.mes);
                    dijit.byId('anoCurso').set("value", data.ano);

                    if (hasValue(data.nro_parcelas))
                        dijit.byId('parcelasCurso').set('value', data.nro_parcelas);

                    if (hasValue(dijit.byId('dtaInicioMat').value)) {
                        dijit.byId('anoInicial').set("value", dijit.byId("dtaInicioMat").value.getFullYear());
                        dijit.byId('mesInicial').set("value", dijit.byId("dtaInicioMat").value.getMonth() + 1);
                        dijit.byId('anoFinal').set("value", dijit.byId("dtaInicioMat").value.getFullYear());
                        dijit.byId('mesFinal').set("value", dijit.byId("dtaInicioMat").value.getMonth() + 1);
                        if (dijit.byId('parcelas').value > 0 && !hasValue(dojo.byId('dtaFinalMat').value)) { 
                            mesI = dijit.byId('mesInicial').value + dijit.byId('parcelas').value - 1;
                            anoI = dijit.byId("dtaInicioMat").value.getFullYear();
                            if (mesI > 12) {
                                while (mesI > 12) {
                                    dijit.byId('mesFinal').set("value", mesI - 12);
                                    dijit.byId('anoFinal').set("value", anoI + 1);
                                    mesI = mesI - 12;
                                    anoI = anoI + 1;
                                }
                            }
                            else {
                                dijit.byId('mesFinal').set("value", mesI);
                                dijit.byId('anoFinal').set("value", anoI);
                            }
                        }
                        if (!verificaMatriculaNormal()) {
                            dijit.byId('anoInicialCurso').set("value", dijit.byId("dtaInicioMat").value.getFullYear());
                            dijit.byId('mesInicialCurso').set("value", dijit.byId("dtaInicioMat").value.getMonth() + 1);
                            dijit.byId('anoFinalCurso').set("value", dijit.byId("anoFinal").value);
                            dijit.byId('mesFinalCurso').set("value", dijit.byId("mesFinal").value);
                            if (dijit.byId('parcelasCurso').value > 0 && !hasValue(dojo.byId('dtaFinalMat').value)) {
                                mesI = dijit.byId('mesInicialCurso').value + dijit.byId('parcelasCurso').value - 1;
                                anoI = dijit.byId("dtaInicioMat").value.getFullYear();
                                if (mesI > 12) {
                                    while (mesI > 12) {
                                        dijit.byId('mesFinalCurso').set("value", mesI - 12);
                                        dijit.byId('anoFinalCurso').set("value", anoI + 1);
                                        mesI = mesI - 12;
                                        anoI = anoI + 1;
                                    }
                                }
                                else {
                                    dijit.byId('mesFinalCurso').set("value", mesI);
                                    dijit.byId('anoFinalCurso').set("value", anoI);
                                }
                            }
                        }
                    }
                    onChangeActive(true);
                }
            } catch (e) {
                postGerarLog(e);
            }
        },
        function (error) {
            apresentaMensagem('apresentadorMensagemMat', error);
        });
    } catch (e) {
        postGerarLog(e);
    }
}

function desabilitarCampos(valor, isEditar) {
    try {
        onChangeActive(false);
        if (!isEditar) {
            switch ((dijit.byId('ckAula').checked)) {
                case true:
                    if (valor != null && parseFloat(valor) > 0) {
                        dijit.byId('valorCurso').set('disabled', true);
                        dijit.byId('valorCurso').set('value', valor);
                    } else {
                        dijit.byId('valorCurso').set('disabled', false);
                        dijit.byId('valorCurso').set('value', 0);
                    }
                    break;
                case false:
                    if (valor != null && parseFloat(valor) > 0) {
                        dijit.byId('valorCurso').set('disabled', true);
                        dijit.byId('valorCurso').set('value', valor);
                    } else {
                        dijit.byId('valorCurso').set('disabled', false);
                        dijit.byId('valorCurso').set('value', 0);
                    }
                    break;
            }
        }
        else {
            switch ((dijit.byId('ckAula').checked)) {
                case true:
                    if (valor != null && parseFloat(valor) > 0)
                        dijit.byId('valorCurso').set('disabled', true);
                    else
                        dijit.byId('valorCurso').set('disabled', false);
                    break;
                case false:
                    if (valor != null && parseFloat(valor) > 0)
                        dijit.byId('valorCurso').set('disabled', true);
                    else dijit.byId('valorCurso').set('disabled', false);
                    break;
            }
        }
        onChangeActive(true);
    } catch (e) {
        postGerarLog(e);
    }
}

function desabilitarCamposValorCursoGrid(valor, isEditar) {
    try {
        onChangeActive(false);
        if (!isEditar) {
            switch ((dijit.byId('ckAula').checked)) {
            case true:
                if (valor != null && parseFloat(valor) > 0) {
                    dijit.byId('valorCursoGrid').set('disabled', true);
                    dijit.byId('valorCursoGrid').set('value', valor);
                } else {
                    dijit.byId('valorCursoGrid').set('disabled', false);
                    dijit.byId('valorCursoGrid').set('value', 0);
                }
                break;
            case false:
                if (valor != null && parseFloat(valor) > 0) {
                    dijit.byId('valorCursoGrid').set('disabled', true);
                    dijit.byId('valorCursoGrid').set('value', valor);
                } else {
                    dijit.byId('valorCursoGrid').set('disabled', false);
                    dijit.byId('valorCursoGrid').set('value', 0);
                }
                break;
            }
        }
        else {
            switch ((dijit.byId('ckAula').checked)) {
            case true:
                if (valor != null && parseFloat(valor) > 0)
                    dijit.byId('valorCursoGrid').set('disabled', true);
                else
                    dijit.byId('valorCursoGrid').set('disabled', false);
                break;
            case false:
                if (valor != null && parseFloat(valor) > 0)
                    dijit.byId('valorCursoGrid').set('disabled', true);
                else dijit.byId('valorCursoGrid').set('disabled', false);
                break;
            }
        }
        onChangeActive(true);
    } catch (e) {
        postGerarLog(e);
    }
}

function onChangeActive(hasAtivar) {
    try {
        dojo.byId("edlayoutContratoDigitalizado")._onChangeActive = hasAtivar;

        dijit.byId("cd_produto_atual")._onChangeActive = hasAtivar;
        dijit.byId("cd_curso_atual")._onChangeActive = hasAtivar;
        dijit.byId("cd_duracao_atual")._onChangeActive = hasAtivar;
        dijit.byId("cd_regime_atual")._onChangeActive = hasAtivar;
        dijit.byId("dtaMatricula")._onChangeActive = hasAtivar;
        dijit.byId("dtaInicioMat")._onChangeActive = hasAtivar;
        dijit.byId("tipoDocumento")._onChangeActive = hasAtivar;
        dijit.byId("tipoDocumentoTax")._onChangeActive = hasAtivar;
        dijit.byId("vencimentoTaxa")._onChangeActive = hasAtivar;
        dijit.byId("ckAula")._onChangeActive = hasAtivar;
        dijit.byId("ckCertificado")._onChangeActive = hasAtivar;
        dijit.byId("id_venda_pacote")._onChangeActive = hasAtivar;
        dijit.byId('ckProfissional')._onChangeActive = hasAtivar;
        dijit.byId('ckMultipla')._onChangeActive = hasAtivar; 
        dijit.byId('ckInformatica')._onChangeActive = hasAtivar;
        //valores
        dijit.byId('dia')._onChangeActive = hasAtivar;
        dijit.byId('mes')._onChangeActive = hasAtivar;
        dijit.byId('ano')._onChangeActive = hasAtivar;
        dijit.byId('mesInicial')._onChangeActive = hasAtivar;
        dijit.byId('anoInicial')._onChangeActive = hasAtivar;
        dijit.byId('mesFinal')._onChangeActive = hasAtivar;
        dijit.byId('anoFinal')._onChangeActive = hasAtivar;
        dijit.byId('valorCurso')._onChangeActive = hasAtivar;
        dijit.byId('parcelas')._onChangeActive = hasAtivar;
        dijit.byId('valorParcela')._onChangeActive = hasAtivar;
        dijit.byId('edValParcela')._onChangeActive = hasAtivar;
        dijit.byId('edParcelaLiquida')._onChangeActive = hasAtivar;
        dijit.byId('desconto')._onChangeActive = hasAtivar;
        dijit.byId('valorDesconto')._onChangeActive = hasAtivar;
        dijit.byId('valorFaturar')._onChangeActive = hasAtivar;
        dijit.byId('ckPrimeiraParcela')._onChangeActive = hasAtivar;
        dijit.byId('descontoPrimeiraParcela')._onChangeActive = hasAtivar;
        dijit.byId('divida')._onChangeActive = hasAtivar;
        dijit.byId('numeroParcelasTaxa')._onChangeActive = hasAtivar;
        dijit.byId('vencimentoTaxa')._onChangeActive = hasAtivar;
        dijit.byId('pessoaResponsavel')._onChangeActive = hasAtivar;
        dijit.byId('pessoaResponsavelTax')._onChangeActive = hasAtivar;
        dijit.byId('percentualResponsavelTax')._onChangeActive = hasAtivar;
        dijit.byId('percentualResponsavel')._onChangeActive = hasAtivar;
        dijit.byId('vl_pre_matricula')._onChangeActive = hasAtivar;

        //Aditamento
        dijit.byId('tipoContratoAdto')._onChangeActive = hasAtivar;
        dijit.byId('tipoAditamento')._onChangeActive = hasAtivar;
        dijit.byId('NroTitAdt')._onChangeActive = hasAtivar;
        dijit.byId('edValorAulaAdto')._onChangeActive = hasAtivar;
        dijit.byId('VctoAdt')._onChangeActive = hasAtivar;
        dijit.byId('dtInicioAdto')._onChangeActive = hasAtivar;
        dijit.byId('dtAdtVencInicial')._onChangeActive = hasAtivar;
        dijit.byId('valorAditivo')._onChangeActive = hasAtivar;
        dijit.byId("vlInclusoMaterial")._onChangeActive = hasAtivar;
        dijit.byId("incorporarMaterial")._onChangeActive = hasAtivar;
        dijit.byId("NroParMaterial")._onChangeActive = hasAtivar;
        dijit.byId("vlParcMaterial")._onChangeActive = hasAtivar;
        dijit.byId("pcBolsaMaterial")._onChangeActive = hasAtivar;
        dijit.byId("vlMaterialContratoCDesconto")._onChangeActive = hasAtivar;
        dijit.byId("vlMaterialContrato")._onChangeActive = hasAtivar;
        dijit.byId('ValorParcAdic')._onChangeActive = hasAtivar;
        dijit.byId('aditivobolsaPorcentual')._onChangeActive = hasAtivar;
        //Curso Contrato
        dijit.byId('diaCurso')._onChangeActive = hasAtivar;
        dijit.byId('mesCurso')._onChangeActive = hasAtivar;
        dijit.byId('anoCurso')._onChangeActive = hasAtivar;
        dijit.byId('mesInicialCurso')._onChangeActive = hasAtivar;
        dijit.byId('anoInicialCurso')._onChangeActive = hasAtivar;
        dijit.byId('mesFinalCurso')._onChangeActive = hasAtivar;
        dijit.byId('anoFinalCurso')._onChangeActive = hasAtivar;
        dijit.byId('parcelasCurso')._onChangeActive = hasAtivar;
        dijit.byId("tipoDocumentoCurso")._onChangeActive = hasAtivar;
        dijit.byId('pessoaResponsavelCurso')._onChangeActive = hasAtivar;
        dijit.byId('percentualResponsavelCurso')._onChangeActive = hasAtivar;
        dijit.byId("ckCertificadoCurso")._onChangeActive = hasAtivar;
        dijit.byId('valorCursoGrid')._onChangeActive = hasAtivar;
        dijit.byId('valorMatriculaGrid')._onChangeActive = hasAtivar;
        dijit.byId('descontoGrid')._onChangeActive = hasAtivar;
        dijit.byId('valorDescontoGrid')._onChangeActive = hasAtivar;
        dijit.byId('valorParcelaGrid')._onChangeActive = hasAtivar;
        dijit.byId('valorLiquidoGrid')._onChangeActive = hasAtivar;
        dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = hasAtivar;
        dijit.byId("vlInclusoMaterialC")._onChangeActive = hasAtivar;
        dijit.byId("incorporarMaterialC")._onChangeActive = hasAtivar;
        dijit.byId("NroParMaterialC")._onChangeActive = hasAtivar;
        dijit.byId("vlParcMaterialC")._onChangeActive = hasAtivar;
        dijit.byId("pcBolsaMaterialC")._onChangeActive = hasAtivar;
        dijit.byId("vlMaterialContratoCDescontoC")._onChangeActive = hasAtivar;
        dijit.byId("vlMaterialContratoC")._onChangeActive = hasAtivar;
    } catch (e) {
        postGerarLog(e);
    }
}

//#region Médodos auxiliares funcaoFKPlanoContas - montarDialog  - changeFieldsMensalidade - abrirTurmaFK - retornarTurmaFK - retornarAlunoFK - verificaSeExistAluno -clearTagMatriculaSemTurma

function funcaoFKPlanoContas(xhr, ObjectStore, Memory, load, tipoRetorno) {
    try {
        if (load)
            loadPlanoContas(ObjectStore, Memory, xhr, tipoRetorno);

        dijit.byId("cadPlanoContas").show();
        apresentaMensagem('apresentadorMensagemPlanoContasFK', null);
    } catch (e) {
        postGerarLog(e);
    }
}

function montarDialog(nome, e) {
    try {
        var offSetX = 20;
        var offSetY = 20;
        $("#" + nome).css("top", e.pageX + offSetX).css("left", e.pageY + offSetY);
        dijit.byId(nome).show();
        dojo.byId(nome).style.display = "block";
    } catch (e) {
        postGerarLog(e);
    }
}

function abrirTurmaFK() {
    try {
        loadSituacaoTurmaFKAbertas(dojo.store.Memory);
        dijit.byId("proTurmaFK").show();
        dijit.byId('tipoTurmaFK')._onChangeActive = false;
        dijit.byId('tipoTurmaFK').set('value', 1);
        dijit.byId('tipoTurmaFK')._onChangeActive = true;
        var turmaEmFormacao = 3;
        dijit.byId("pesSituacaoFK").set("value", turmaEmFormacao);
    } catch (e) {
        postGerarLog(e);
    }
}

function changeFieldsMensalidade(evt) {
    try {
        if (evt) {
            $('#lbParcelas')[0].innerText = 'N° Aulas:';
            $('#lbValParcela')[0].innerText = 'Valor da Aula:';
        }
        //else {
        //    $('#lbParcelas')[0].innerText = 'N° Parcelas:';
        //    $('#lbValParcela')[0].innerText = 'Valor da Parcela:';
        //}
    } catch (e) {
        postGerarLog(e);
    }
}

function findCursoGridTurma(dados, cd_curso) {
    if (hasValue(dados)) {
        var cursoFilter = dados.filter(function(item) {
            return item.cd_curso === cd_curso;
        });

        return hasValue(cursoFilter);
    } else {
        return false;
    }
}

function retornarTurmaFK() {
    require(["dojo/ready",
        "dojo/store/Memory",
        "dijit/form/FilteringSelect",
        "dojo/data/ObjectStore",
        "dojo/_base/xhr",
        "dojox/json/ref"],
        function (ready, Memory, filteringSelect, ObjectStore, xhr, ref) {
            try {
                var gridTurmas = null;
                var valido = true;
                var gridPesquisaTurmaFK = dijit.byId("gridPesquisaTurmaFK");
                var idTipoMatricula = AGUARDANDO_MATRICULA;
                var descricao = msgAguardandoMat;
                var tipo = dijit.byId('tipoMatricula').value;

                gridTurmas = dijit.byId("gridTurmaMat");

                if (!hasValue(gridPesquisaTurmaFK.itensSelecionados) || gridPesquisaTurmaFK.itensSelecionados.length <= 0 || gridPesquisaTurmaFK.itensSelecionados.length > 1) {
                    if (gridPesquisaTurmaFK.itensSelecionados != null && gridPesquisaTurmaFK.itensSelecionados.length <= 0)
                        caixaDialogo(DIALOGO_AVISO, msgNotSelectReg, null);
                    if (gridPesquisaTurmaFK.itensSelecionados != null && gridPesquisaTurmaFK.itensSelecionados.length > 1)
                        caixaDialogo(DIALOGO_AVISO, msgMaisDeUmRegSelect, null);
                    valido = false;
                } else if (findCursoGridTurma(dijit.byId("gridTurmaMat").store.objectStore.data, gridPesquisaTurmaFK.itensSelecionados[0].cd_curso)) {
                    caixaDialogo(DIALOGO_AVISO, msgValidaGridTurmaComMesmoCurso, null);
                }
                else {

                    atualizar_data_aditivo = true;
                    dadosAlunoTurma(xhr, dojo.byId("cd_aluno_mat").value, gridPesquisaTurmaFK.itensSelecionados[0].cd_turma);
                    var CdCurso = gridPesquisaTurmaFK.itensSelecionados[0].cd_curso == null ? dijit.byId('pesCursoFK').value : gridPesquisaTurmaFK.itensSelecionados[0].cd_curso
                    var storeGridTurma = (hasValue(gridTurmas) && hasValue(gridTurmas.store.objectStore.data)) ? gridTurmas.store.objectStore.data : [];
                    if (storeGridTurma != null && storeGridTurma.length > 0) {
                        insertObjSort(storeGridTurma, "cd_turma", {
                            cd_turma: gridPesquisaTurmaFK.itensSelecionados[0].cd_turma,
                            no_turma: gridPesquisaTurmaFK.itensSelecionados[0].no_turma,
                            no_produto: gridPesquisaTurmaFK.itensSelecionados[0].no_produto,
                            no_professor: gridPesquisaTurmaFK.itensSelecionados[0].no_professor,
                            cd_situacao_aluno_turma: idTipoMatricula,
                            situacaoAlunoTurma: descricao,
                            cd_aluno: dojo.byId("cd_aluno_mat").value,
                            dt_matricula: hasValue(dojo.byId("dtaMatricula").value) ? dojo.date.locale.parse(dojo.byId("dtaMatricula").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }) : null,
                            dt_movimento: new Date(),
                            dt_inicio: hasValue(gridPesquisaTurmaFK.itensSelecionados[0].dtaIniAula) ? dojo.date.locale.parse(gridPesquisaTurmaFK.itensSelecionados[0].dtaIniAula, { formatLength: 'short', selector: 'date', locale: 'pt-br' }) : null,
                            nm_matricula_turma: dojo.byId("matriculaNro").value.replace('.', ''),
                            cd_contrato: hasValue(dojo.byId("cd_contrato").value) ? dojo.byId("cd_contrato").value : 0,
                            cd_curso: gridPesquisaTurmaFK.itensSelecionados[0].cd_curso,
                            cd_produto: gridPesquisaTurmaFK.itensSelecionados[0].cd_produto,
                            CursoContrato: (hasValue(dijit.byId('gridDataCurso').itensSelecionados[0]) && CdCurso === dijit.byId('gridDataCurso').itensSelecionados[0].cd_curso)? montarCurso(dijit.byId('gridDataCurso').itensSelecionados[0]) : null
                        });
                        gridTurmas.setStore(new ObjectStore({ objectStore: new Memory({ data: gridTurmas.store.objectStore.data }) }));

                    } else {
                        var dados = [];
                        insertObjSort(dados, "cd_turma", {
                            cd_turma: gridPesquisaTurmaFK.itensSelecionados[0].cd_turma,
                            no_turma: gridPesquisaTurmaFK.itensSelecionados[0].no_turma,
                            no_produto: gridPesquisaTurmaFK.itensSelecionados[0].no_produto,
                            no_professor: gridPesquisaTurmaFK.itensSelecionados[0].no_professor,
                            cd_situacao_aluno_turma: idTipoMatricula,
                            situacaoAlunoTurma: descricao,
                            cd_aluno: dojo.byId("cd_aluno_mat").value,
                            dt_matricula: hasValue(dojo.byId("dtaMatricula").value) ? dojo.date.locale.parse(dojo.byId("dtaMatricula").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }) : null,
                            dt_movimento: new Date(),
                            dt_inicio: hasValue(gridPesquisaTurmaFK.itensSelecionados[0].dtaIniAula) ? dojo.date.locale.parse(gridPesquisaTurmaFK.itensSelecionados[0].dtaIniAula, { formatLength: 'short', selector: 'date', locale: 'pt-br' }) : null,
                            nm_matricula_turma: dojo.byId("matriculaNro").value.replace('.', ''),
                            cd_contrato: hasValue(dojo.byId("cd_contrato").value) ? dojo.byId("cd_contrato").value : 0,
                            cd_curso: gridPesquisaTurmaFK.itensSelecionados[0].cd_curso,
                            cd_produto: gridPesquisaTurmaFK.itensSelecionados[0].cd_produto,
                            CursoContrato: (hasValue(dijit.byId('gridDataCurso').itensSelecionados[0]) && CdCurso === dijit.byId('gridDataCurso').itensSelecionados[0].cd_curso) ? montarCurso(dijit.byId('gridDataCurso').itensSelecionados[0]) : null
                        });
                        gridTurmas.setStore(new ObjectStore({ objectStore: new Memory({ data: dados }) }));
                    }
                    getContratoReturnTurma(Memory, xhr, dojo.byId("dtaMatricula").value,
                        gridPesquisaTurmaFK.itensSelecionados[0].cd_curso,
                        gridPesquisaTurmaFK.itensSelecionados[0].cd_duracao,
                        gridPesquisaTurmaFK.itensSelecionados[0].cd_produto,
                        gridPesquisaTurmaFK.itensSelecionados[0].cd_regime,
                        hasValue(gridPesquisaTurmaFK.itensSelecionados[0].cd_nome_contrato) ? gridPesquisaTurmaFK.itensSelecionados[0].cd_nome_contrato : null, false);
                    //getValoresForMatricula(ready, Memory, filteringSelect, ObjectStore, xhr, ref, gridPesquisaTurmaFK.itensSelecionados[0].cd_curso, gridPesquisaTurmaFK.itensSelecionados[0].cd_duracao, gridPesquisaTurmaFK.itensSelecionados[0].cd_regime, false);
                    //populaSemTurma(gridPesquisaTurmaFK.itensSelecionados[0].cd_produto, gridPesquisaTurmaFK.itensSelecionados[0].cd_curso, gridPesquisaTurmaFK.itensSelecionados[0].cd_duracao, gridPesquisaTurmaFK.itensSelecionados[0].cd_regime, gridPesquisaTurmaFK.itensSelecionados[0].cd_nome_contrato, xhr, Memory, filteringSelect, ready);
                }
                if (!valido)
                    return false;
                dijit.byId("proTurmaFK").hide();
                dijit.byId("btnAddTurma").set("disabled", true);
                dijit.byId("ckRetornoCad").set("disabled", true);
                //LBM Liberado em 22/11/2022 para permitir vincular material.
                //if (dijit.byId("gridAditamento").store.objectStore.data.length > 0)
                //    dijit.byId("acoesRelacionadasT").set("disabled", true);
                hideTagMatriculaTurma(gridTurmas);
            } catch (e) {
                postGerarLog(e);
            }
        });
}

function getContratoReturnTurma(Memory, xhr, dtaMatricula, cd_curso, cd_duracao, cd_produto, cd_regime, cd_nom_contrato, isEditar) {
    try {
        if (!hasValue(dtaMatricula))
            dtaMatricula = dojo.byId('dtaMatricula').value;
        if (!hasValue(cd_curso))
            cd_curso = hasValue(dijit.byId('cd_curso_atual')) ? dijit.byId('cd_curso_atual').get('value') : 0;
        if (!(hasValue(cd_duracao)))
            cd_duracao = hasValue(dijit.byId('cd_duracao_atual')) ? dijit.byId('cd_duracao_atual').get('value') : 0;
        if (!hasValue(cd_regime))
            cd_regime = hasValue(dijit.byId('cd_regime_atual')) ? dijit.byId('cd_regime_atual').get('value') : 0;
        var isAula = dijit.byId('ckAula').checked;
        xhr.get({
            preventCache: true,
            url: Endereco() + "/api/escola/getContratoTurma?str_data_matricula=" + dtaMatricula + "&cd_curso=" + cd_curso + "&cd_duracao=" + cd_duracao + "&cd_produto=" + cd_produto + "&cd_regime=" + cd_regime,
            handleAs: "json",
            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
        }).then(function (data) {
            try {
                data = jQuery.parseJSON(data).retorno;
                if (hasValue(data)) {
                    onChangeActive(false);
                    //Opções de pagamento
                    if (!hasValue(dojo.byId("cd_contrato").value) || dojo.byId("cd_contrato").value <= 0) {
                        dijit.byId('dia').set("value", data.opcoesPagamento.dia);
                        dijit.byId('mes').set("value", data.opcoesPagamento.mes);
                        dijit.byId('ano').set("value", data.opcoesPagamento.ano);

                        if (hasValue(data.opcoesPagamento.nro_parcelas))
                            dijit.byId('parcelas').set('value', data.opcoesPagamento.nro_parcelas);

                        dijit.byId('diaCurso').set("value", data.opcoesPagamento.dia);
                        dijit.byId('mesCurso').set("value", data.opcoesPagamento.mes);
                        dijit.byId('anoCurso').set("value", data.opcoesPagamento.ano);

                        if (hasValue(data.nro_parcelas))
                            dijit.byId('parcelasCurso').set('value', data.opcoesPagamento.nro_parcelas);
                    }

                    //#region  Popular sem turma                
                    if (hasValue(data.duracoes)) {
                        loadSelect(data.duracoes, "cd_duracao_atual", 'cd_duracao', 'dc_duracao', cd_duracao);
                        loadSelect(data.duracoes, "cd_duracao_atual_curso", 'cd_duracao', 'dc_duracao', cd_duracao);
                    }
                    if (hasValue(data.regimes))
                        loadSelect(data.regimes, "cd_regime_atual", 'cd_regime', 'no_regime', cd_regime);
                    if (hasValue(data.nomesContrato))
                        loadSelectNomeContrato(data.nomesContrato, cd_nom_contrato, Memory);

                    if (hasValue(data.localMovto)) {

                        loadSelect(data.localMovto, "bancoTitMat", 'cd_local_movto', 'nomeLocal');

                        loadSelect(data.localMovto, "edBanco", 'cd_local_movto', 'nomeLocal');

                        if (data.parametro.id_nro_contrato_automatico)
                            dijit.byId("nm_contrato").set("disabled", true);
                        else
                            dijit.byId("nm_contrato").set("disabled", false);

                        if (data.parametro.id_tipo_numero_contrato == 3) { //MANUAL
                            dijit.byId("matriculaNro").set("disabled", false);
                            dijit.byId("matriculaNro").set("required", true);
                        }
                        else {
                            dijit.byId("matriculaNro").set("disabled", true);
                            dijit.byId("matriculaNro").set("required", false);
                        }

                        //Verifica o parametro de obrigatoriedade do plano de contas:
                        if (data.parametro.id_requer_plano_contas_mov) {
                            dijit.byId('planoContasMat').set('required', true);
                            dijit.byId('planoContasTaxa').set('required', true);
                        }
                        else {
                            dijit.byId('planoContasMat').set('required', false);
                            dijit.byId('planoContasTaxa').set('required', false);
                        }
                        local_movto_parametro = data.parametro.cd_local_movto;
                        dc_local_movto_parametro = data.parametro.dc_local_movto;
                    }
                    if (hasValue(data.produtos)) {

                        if (!verificaMatriculaNormal()) {
                            //Preenche o produto apenas 1 vez quando não é matricula normal
                            if (dijit.byId("gridTurmaMat").store.objectStore.data.length === 0) {
                                loadSelect(data.produtos, "cd_produto_atual", 'cd_produto', 'no_produto', cd_produto);
                            }
                        } else {
                            loadSelect(data.produtos, "cd_produto_atual", 'cd_produto', 'no_produto', cd_produto);
                        }
                        
                        atualizarValoresMapStoreProdutoAtual();

                        if (cd_produto > 0) {

                            dijit.byId("cd_curso_atual").set("disabled", false);
                            dijit.byId('cd_curso_atual').set('readOnly', false);

                            if (hasValue(data.cursos) && data.cursos.length > 0) {
                                if (!verificaMatriculaNormal()) {
                                    //Preenche o curso apenas 1 vez quando não é matricula normal
                                    if (dijit.byId("gridTurmaMat").store.objectStore.data.length === 0) {
                                        loadSelect(data.cursos, "cd_curso_atual", 'cd_curso', 'no_curso', cd_curso);
                                    }
                                } else {
                                    loadSelect(data.cursos, "cd_curso_atual", 'cd_curso', 'no_curso', cd_curso);
                                }
                                
                                loadSelect(data.cursos, "cd_curso_atualCurso", 'cd_curso', 'no_curso', cd_curso);

                                if (cd_curso == 0) {
                                    dijit.byId('cd_curso_atual').set('value', dijit.byId('pesCursoFK').value);
                                    dojo.byId('cd_curso_atual').value = dojo.byId('pesCursoFK').value;
                                }
                            }
                        }
                        else {
                            //dijit.byId('cd_curso_atual').set('readOnly', true);
                            dijit.byId("cd_curso_atual").set("disabled", false);
                        }
                    }
                    onChangeActive(true);
                }
                //#endregion

                //#region Valores para a matricula

                if (hasValue(data.valores) && (!hasValue(dojo.byId("cd_contrato").value) || dojo.byId("cd_contrato").value <= 0)) {
                    onChangeActive(false);
                    if (!isEditar) {
                        apresentaMensagem("apresentadorMensagemMat", "");
                        //if (hasValue(data.valores.val_matricula) <= 0) {
                        //    var mensagensWeb = new Array();
                        //    mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, msgInfValoresTaxaMatricula);
                        //    apresentaMensagem("apresentadorMensagemMat", mensagensWeb, false);
                        //    onChangeActive(true);
                        //    desabilitarCampos(data.valores.vl_total, isEditar);
                        //    return false;
                        //}
                        if (verificaMatriculaNormal()) {
                            if (data.valores.nm_parcelas != null || data.valores.nm_parcelas > 0)
                                dijit.byId('parcelas').set('value', data.valores.nm_parcelas);
                            else
                                dijit.byId('parcelas').set('value', 1);

                            dijit.byId('valorMatricula').set('value', hasValue(data.valores.vl_matricula) ? data.valores.vl_matricula : 0);
                            dijit.byId('valorMatriculaTotal').set('value', hasValue(data.valores.vl_matricula) ? data.valores.vl_matricula : 0);
                            dijit.byId('valorCurso').set('value', hasValue(data.valores.vl_total) ? data.valores.vl_total : 0);
                            dijit.byId('vl_contrato').set('value', hasValue(data.valores.vl_total) ? data.valores.vl_total : 0);
                            dijit.byId('valorTaxaMatricula').set('value', data.valores.vl_matricula);
                            dojo.byId('valorTaxaMatricula').old_value = dojo.byId('valorTaxaMatricula').value;

                            if (!isAula) {
                                dijit.byId('valorParcela').set('value', hasValue(data.valores.val_parcela) ? data.valores.val_parcela : 0);
                                dijit.byId('valorParcela').value = parseFloat(removedecimal(hasValue(data.valores.val_parcela) ? data.valores.val_parcela : 0.0));
                                dijit.byId('valorParcela').old_value = hasValue(data.valores.val_parcela) ? data.valores.val_parcela : 0;

                                dijit.byId('edValParcela').set('value', hasValue(data.valores.val_aula) ? data.valores.val_parcela : 0);
                                dijit.byId('edValParcela').value = parseFloat(removedecimal(hasValue(data.valores.val_parcela) ? data.valores.val_parcela : 0.0));
                                dijit.byId('edValParcela').old_value = hasValue(data.valores.val_aula) ? data.valores.val_parcela : 0;
                            }
                            else {
                                dijit.byId('valorParcela').set('value', hasValue(data.valores.val_aula) ? data.valores.val_aula : 0);
                                dijit.byId('valorParcela').value = parseFloat(removedecimal(hasValue(data.valores.val_aula) ? data.valores.val_aula : 0.0));
                                dijit.byId('valorParcela').old_value = hasValue(data.valores.val_aula) ? data.valores.val_aula : 0;

                                dijit.byId('edValParcela').set('value', hasValue(data.valores.val_aula) ? data.valores.val_aula : 0);
                                dijit.byId('edValParcela').value = parseFloat(removedecimal(hasValue(data.valores.val_aula) ? data.valores.val_aula : 0.0));
                                dijit.byId('edValParcela').old_value = hasValue(data.valores.val_aula) ? data.valores.val_aula : 0;
                            }
                            var nroParcelas = getNroParcelas("parcelas");
                            var valorLiquido = calcularERetornarValorFaturar(data.valores.vl_total, data.valores.nm_parcelas, 0);
                            dijit.byId('valorFaturar')._onChangeActive = false;
                            dijit.byId('valorFaturar').set('value', unmaskFixed(valorLiquido, 2));
                            dijit.byId('valorFaturar').old_value = valorLiquido;
                            dijit.byId('valorFaturar')._onChangeActive = true;
                        }
                        
                    }
                    onChangeActive(true);
                    desabilitarCampos(data.valores.vl_total, isEditar);
                }
                //#endregion
            } catch (e) {
                postGerarLog(e);
            }
        },
        function (error) {
            apresentaMensagem('apresentadorMensagemMat', error);
        });
    } catch (e) {
        postGerarLog(e);
    }
}

function retornarAlunoFK() {
    try {
        var gridPesquisaAluno = dijit.byId("gridPesquisaAluno");
        if (!hasValue(gridPesquisaAluno.itensSelecionados) || gridPesquisaAluno.itensSelecionados.length <= 0) {
            caixaDialogo(DIALOGO_AVISO, msgNotSelectReg, null);
            return false;
        }
        else if (gridPesquisaAluno.itensSelecionados.length > 1) {
            caixaDialogo(DIALOGO_ERRO, msgMaisDeUmRegSelect, null);
            return false;
        }
        else {

            dojo.xhr.get({
                url: Endereco() + "/api/turma/getTurmaAlunoAguard?cd_pessoa_aluno=" + gridPesquisaAluno.itensSelecionados[0].cd_pessoa_aluno,
                preventCache: true,
                handleAs: "json",
                headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
            }).then(function (dados) {
                try {
                    dados = jQuery.parseJSON(dados);
                    if (dados.retorno.titulos_atrazados) {
                        caixaDialogo(DIALOGO_CONFIRMAR, msgAlunoComTituloVenc, function () { populaAluno(dados); });
                    }
                    else
                        populaAluno(dados);
                } catch (e) {
                    postGerarLog(e);
                }

            }, function (error) {
                apresentaMensagem('apresentadorMensagem', error.response.data);
            });

        }
    } catch (e) {
        postGerarLog(e);
    }
}

function verificaSeExistAluno(idPessoaAluno, idAluno) {
    try {
        var retornar = true;
        apresentaMensagem("apresentadorMensagemMat", "", false);
        if ((idPessoaAluno == null || idPessoaAluno <= 0) || (idAluno == null || idAluno <= 0) || !hasValue(dojo.byId("dtaMatricula").value)) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDeveSelecionarAluno);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            retornar = false;
        }
        return retornar;
    } catch (e) {
        postGerarLog(e);
    }
}

function verificaSeExistAlunoParteMsg(idPessoaAluno, idAluno, parteMsg) {
    try {
        var retornar = true;
        apresentaMensagem("apresentadorMensagemMat", "", false);
        if ((idPessoaAluno == null || idPessoaAluno <= 0) || (idAluno == null || idAluno <= 0) || !hasValue(dojo.byId("dtaMatricula").value)) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, parteMsg + msgOpcoesParteDeveSelecionarAluno);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            retornar = false;
        }
        return retornar;
    } catch (e) {
        postGerarLog(e);
    }
}


function verificaSeExistAluno(idPessoaAluno, idAluno) {
    try {
        var retornar = true;
        apresentaMensagem("apresentadorMensagemMat", "", false);
        if ((idPessoaAluno == null || idPessoaAluno <= 0) || (idAluno == null || idAluno <= 0) || !hasValue(dojo.byId("dtaMatricula").value)) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDeveSelecionarAluno);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            retornar = false;
        }
        return retornar;
    } catch (e) {
        postGerarLog(e);
    }
}

function clearTagMatriculaSemTurma() {
    try {
        dijit.byId('cd_produto_atual').set('value', '');
        dijit.byId('cd_duracao_atual').set('value', '');
        dijit.byId('cd_regime_atual').set('value', '');
    } catch (e) {
        postGerarLog(e);
    }
}

function clearVariablesAssitValores() {
    try {
        dojo.byId('totalValorDesconto').value = 0;
        dojo.byId('totalPorcentagemDesconto').value = 0;
        dojo.byId('totalValorDescontoPrimeiraParcela').value = 0;
        dojo.byId('totalPorcentagemDescontoPrimeiraParcela').value = 0;
        dojo.byId('valorCursoOri').value = 0;
        dojo.byId('descontoPrimeiraParc').value = 0;
    } catch (e) {
        postGerarLog(e);
    }
}
//#endregion

//#region Monta os tipos para a Matricula - Contrato - Tipo pagamento - Tipo documento - Tipo aditamento

function montarTipoContrato(nomElement, mostraTodos, Memory, filteringSelect) {
    try {
        var dados = [
                { name: "Não Informada", id: "0" },
                { name: "Até 30 Dias", id: "1" },
                { name: "Até 60 Dias", id: "2" },
                { name: "Até 90 Dias", id: "3" },
                { name: "Escolher Data", id: "4" }
        ]
        var statusStore = new Memory({
            data: dados
        });
        //ready(function () {
        var status = new filteringSelect({
            id: nomElement,
            name: "tipoDataContratoAdto",
            value: "0",
            store: statusStore,
            searchAttr: "name",
            style: "width: 100%;"
        }, nomElement);
    } catch (e) {
        postGerarLog(e);
    }
};

function montarTipoPagto(nomElement, mostraTodos, Memory, filteringSelect) {
    try {
        var dados = [
                { name: "Quinzenal", id: "1" },
                { name: "Mensal", id: "2" }
        ]
        var statusStore = new Memory({
            data: dados
        });
        //ready(function () {
        var status = new filteringSelect({
            id: nomElement,
            name: "tipoPagto",
            value: "",
            store: statusStore,
            searchAttr: "name",
            style: "width: 100%;"
        }, nomElement);
    } catch (e) {
        postGerarLog(e);
    }
};

function montarTipoDocumento(xhr) {
    xhr.get({
        url: Endereco() + "/api/financeiro/getTipoFinanceiroAtivo",
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            onChangeActive(false);
            apresentaMensagem("apresentadorMensagemMat", null);
            itens = jQuery.parseJSON(data).retorno;
            if (itens != null) {
                loadSelect(itens, "tipoDocumento", 'cd_tipo_financeiro', 'dc_tipo_financeiro', 0);
                loadSelect(itens, "tipoDocumentoCurso", 'cd_tipo_financeiro', 'dc_tipo_financeiro', 0);
                loadSelect(itens, "tipoDocumentoTax", 'cd_tipo_financeiro', 'dc_tipo_financeiro', 0);
                loadSelect(itens, "tipoDocumentoTit", 'cd_tipo_financeiro', 'dc_tipo_financeiro', 0);
            }
            onChangeActive(true);
        } catch (e) {
            postGerarLog(e);
        }
    },
     function (error) {
         apresentaMensagem("apresentadorMensagemMat", error);
     });
};


function montarTipoFinanceiroAditamento(xhr) {
    xhr.get({
        url: Endereco() + "/api/financeiro/getTipoFinanceiroAtivo",
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
            try {
                onChangeActive(false);
                apresentaMensagem("apresentadorMensagemMat", null);
                itens = jQuery.parseJSON(data).retorno;
                if (itens != null) {
                    loadSelect(itens, "tipoFinanceiroAditamento", 'cd_tipo_financeiro', 'dc_tipo_financeiro', 0);
                }
                onChangeActive(true);
            } catch (e) {
                postGerarLog(e);
            }
        },
        function (error) {
            apresentaMensagem("apresentadorMensagemMat", error);
        });
};

function dadosAlunoTurma(xhr, cdAluno, cdTurma) {
    xhr.get({
        url: Endereco() + "/api/aluno/getAlunoTurma?cdAluno=" + cdAluno + "&cdTurma=" + cdTurma,
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            var itens = jQuery.parseJSON(data).retorno;
            populaDadosAlunoTurma(itens);
        } catch (e) {
            postGerarLog(e);
        }
    },
     function (error) {
         apresentaMensagem("apresentadorMensagemMat", error);
         showCarregando();
     });
};

function populaDadosAlunoTurma(itens) {
    if (hasValue(itens) && itens.cd_contrato == 0) {
        if (hasValue(itens) && itens.cd_situacao_aluno_origem == ENCERRADO)
            dijit.byId("tipoMatricula").set("value", 2);
        else
            dijit.byId("tipoMatricula").set("value", 1);
    }
}

function montarTipoAditamento(Memory) {
    try {
        var dados = [
                { name: "Transferência de Turma", id: "1" },
                { name: "Perda de Desconto", id: "2" },
                { name: "Concessão de Desconto", id: "3" },
                { name: "Maioridade", id: "4" },
                { name: "Adicionar Parcelas", id: "5" },
                { name: "Reajuste Anual", id: "6" },
                { name: "Bolsa", id: "7" }
        ]
        var statusStore = new Memory({
            data: dados
        });
        dijit.byId("tipoAditamento").store = statusStore;
        //ready(function () {
        //var status = new filteringSelect({
        //    id: nomElement,
        //    name: "tipoAditamento",
        //    value: "",
        //    required: "required",
        //    store: statusStore,
        //    searchAttr: "name",
        //    style: "width: 100%;"
        //}, nomElement);
    } catch (e) {
        postGerarLog(e);
    }
};

//#endregion

//#region Métodos para curso - configuraCursoPorProduto - carregarCursoPorProduto
function configuraCursoPorProdutoMatricula(evt, cdCurso, xhr, Memory) {
    try {
        var pesCadCurso = dijit.byId("cd_curso_atual");
        pesCadCurso.set("disabled", false);
        var statusStore = new Memory({
            data: null
        });
        pesCadCurso.reset();
        pesCadCurso.store = statusStore;
        if (hasValue(evt)) {
            carregarCursoPorProdutoMat(evt, cdCurso, xhr);
        } else {
            //pesCadCurso.set("disabled", true);
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function carregarCursoPorProdutoMat(cd_produto, cdCurso, xhr) {
    xhr.get({
        preventCache: true,
        url: Endereco() + "/api/curso/getCursosPorProduto?cd_curso=&cd_produto=" + cd_produto,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            data = jQuery.parseJSON(data);
            if (hasValue(data.retorno) && data.retorno.length > 0) {
                loadSelect(data.retorno, "cd_curso_atual", 'cd_curso', 'no_curso', cdCurso);
                loadSelect(data.retorno, "cd_curso_atualCurso", 'cd_curso', 'no_curso', cdCurso);

                dijit.byId('cd_curso_atual').set('readOnly', false);
            }
                
        } catch (e) {
            postGerarLog(e);
        }
    },
    function (error) {
        apresentaMensagem('apresentadorMensagemMat', error);
    })
}


//#region Métodos para curso - configuraCursoPorProduto - carregarCursoPorProduto
function configuraCursoPorProdutoMatriculaSemMatriculaSimultanea(evt, cdCurso, xhr, Memory) {
    try {
        var pesCadCurso = dijit.byId("cd_curso_atual");
        pesCadCurso.set("disabled", false);
        var statusStore = new Memory({
            data: null
        });
        pesCadCurso.reset();
        pesCadCurso.store = statusStore;
        if (hasValue(evt)) {
            carregarCursoPorProdutoSemMatSimultanea(evt, cdCurso, xhr);
        } else {
            //pesCadCurso.set("disabled", true);
        }
    } catch (e) {
        postGerarLog(e);
    }
}


function carregarCursoPorProdutoSemMatSimultanea(cd_produto, cdCurso, xhr) {
    xhr.get({
        preventCache: true,
        url: Endereco() + "/api/curso/getCursosPorProdutoSemMatriculaSimultanea?cd_curso=&cd_produto=" + cd_produto,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            data = jQuery.parseJSON(data);
            if (hasValue(data.retorno) && data.retorno.length > 0) {
                loadSelect(data.retorno, "cd_curso_atual", 'cd_curso', 'no_curso', cdCurso);
                if (dijit.byId("cd_curso_atual").readOnly == true) {
                    dijit.byId("cd_curso_atual").set('readOnly', false);
                }
                loadSelect(data.retorno, "cd_curso_atualCurso", 'cd_curso', 'no_curso', cdCurso);
            }
                
        } catch (e) {
            postGerarLog(e);
        }
    },
        function (error) {
            apresentaMensagem('apresentadorMensagemMat', error);
        });
}


function getProximoCursoPorProdutoSemMatriculaSimultanea(cd_produto, cdCurso, xhr, ref) {
    xhr.get({
        preventCache: true,
        url: Endereco() + "/api/curso/getProximoCursoPorProdutoSemMatriculaSimultanea?cd_curso=" + cdCurso + "&cd_produto=" + cd_produto,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            data = jQuery.parseJSON(data);
            if (hasValue(data.retorno)) {
                onChangeActive(false);
                limparItemCurso();
                //sugereDiaOpcoesPgto(xhr, ref, 0, 0, 0, 0);
                IncluirAlterar(1,
                    'divAlterarDataCurso',
                    'divIncluirDataCurso',
                    'divExcluirDataCurso',
                    'apresentadorMensagemsDataCurso',
                    'divCancelarDataCurso',
                    'divLimparDataCurso');

                var pos = getUltimoCursoInserido(gridDataCurso);
                mesI = dijit.byId("gridDataCurso").store.objectStore.data[pos].nm_mes_curso_final
                anoI = dijit.byId("gridDataCurso").store.objectStore.data[pos].nm_ano_curso_final
                mesI += 1;
                if (mesI > 12) {
                    mesI = 1;
                    anoI += 1
                }
                //dijit.byId('cd_curso_atual')._onChangeActive = false;
                //dijit.byId('cd_curso_atual')._onChangeActive = true;
                dijit.byId("cd_duracao_atual_curso").set("value", dijit.byId("cd_duracao_atual").value);
                dijit.byId("cd_proximo_curso").set("value", data.retorno[0].cd_proximo_curso);
                dijit.byId('valorParcelaGrid')._onChangeActive = false;
                dijit.byId("cd_curso_atualCurso").set("value", data.retorno[0].cd_curso);
                //cursoordem = data.retorno[0].cd_curso_ordem;

                //dijit.byId('mesInicialCurso').set("value", data.retorno[0].nm_mes_curso_inicial);
                //dijit.byId('anoInicialCurso').set("value", data.retorno[0].nm_ano_curso_inicial);

                //dijit.byId('mesFinalCurso').set("value", data.retorno[0].nm_mes_curso_final);
                //dijit.byId('anoFinalCurso').set("value", data.retorno[0].nm_ano_curso_final);

                dijit.byId("diaCurso").set("value", dijit.byId("gridDataCurso").store.objectStore.data[pos].nm_dia);
                dijit.byId('mesCurso').set("value",
                    calculaMesAno(dijit.byId("gridDataCurso").store.objectStore.data[pos]).mes);
                dijit.byId("anoCurso").set("value",
                    calculaMesAno(dijit.byId("gridDataCurso").store.objectStore.data[pos]).ano);
                dijit.byId('parcelasCurso').set("value",
                    dijit.byId("gridDataCurso").store.objectStore.data[pos].nm_parcelas);
                dijit.byId('tipoDocumentoCurso')
                    .set("value", dijit.byId("gridDataCurso").store.objectStore.data[pos].cd_tipo);
                dojo.byId('tipoDocumentoCurso').value = dijit.byId("gridDataCurso").store.objectStore.data[pos].no_tipo;
                dojo.byId('cd_responsavel_mensCurso').value =
                    dijit.byId("gridDataCurso").store.objectStore.data[pos].cd_pessoa_responsavel;
                dijit.byId('pessoaResponsavelCurso').set("value",
                    dijit.byId("gridDataCurso").store.objectStore.data[pos].no_pessoa_responsavel);
                dijit.byId('percentualResponsavelCurso').value = dijit.byId("gridDataCurso").store.objectStore.data[pos]
                    .pc_responsavel_contrato;
                dijit.byId('ckCertificadoCurso').checked =
                    dijit.byId("gridDataCurso").store.objectStore.data[pos].id_liberar;
                dijit.byId('valorParcelaGrid')._onChangeActive = true;
                dijit.byId('mesInicialCurso').set('value', mesI);
                dijit.byId('anoInicialCurso').set('value', anoI);
                mesI = mesI + dijit.byId('parcelasCurso').value-1;
                if (mesI > 12) {
                    mesI = 1;
                    anoI += 1
                }
                dijit.byId('mesFinalCurso').set('value', mesI);
                dijit.byId('anoFinalCurso').set('value', anoI);
                onChangeActive(true);

                getValoresTabelaPrecoCursoGrid(xhr, dijit.byId('cd_curso_atualCurso').get('value'), dijit.byId('cd_duracao_atual').get('value'), 0, false);
                onChangeActive(false);
                if (dojo.byId("pc_bolsa_material_aluno").value > 0 && hasValue(dijit.byId("dt_inicio_bolsa_aluno").value)) {
                    if (dojo.date.compare(dijit.byId('dtaMatricula').value, dijit.byId("dt_inicio_bolsa_aluno").value, "date") >= 0) {
                        dijit.byId("pcBolsaMaterialC").set("disabled", false);
                        dijit.byId("vlMaterialContratoCDescontoC").set("disabled", false);
                        dijit.byId("pcBolsaMaterialC").set("value", unmaskFixed(dojo.byId("pc_bolsa_material_aluno").value, 2));
                    } else {
                        dijit.byId("vlMaterialContratoCDescontoC").set("disabled", true);
                        dijit.byId("pcBolsaMaterialC").set("disabled", true);
                        dijit.byId("pcBolsaMaterialC").reset();
                    }
                } else {
                    dijit.byId("vlMaterialContratoCDescontoC").set("disabled", false);
                    dijit.byId("pcBolsaMaterialC").set("disabled", false);
                }
                onChangeActive(true);
                dijit.byId("cadMensalidade").show();
            } else {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgProximoCursoNaoEncontrado);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            }
        } catch (e) {
            postGerarLog(e);
        }
    },
        function (error) {
            apresentaMensagem('apresentadorMensagemMat', error);
        });
}


function getProximoCursoPorProdutoSemMatriculaSimultaneaCadMensalidadeShow(cd_produto, cdCurso, xhr, ref) {
    xhr.get({
        preventCache: true,
        url: Endereco() + "/api/curso/getProximoCursoPorProdutoSemMatriculaSimultanea?cd_curso=" + cdCurso + "&cd_produto=" + cd_produto,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            data = jQuery.parseJSON(data);
            if (hasValue(data.retorno)) {

                onChangeActive(false);
                limparItemCurso();
                //sugereDiaOpcoesPgto(xhr, ref, 0, 0, 0, 0);
                var pos = getUltimoCursoInserido(gridDataCurso);
                //dijit.byId('cd_curso_atual')._onChangeActive = false;
                //dijit.byId('cd_curso_atual')._onChangeActive = true;
                dijit.byId("cd_duracao_atual_curso").set("value", dijit.byId("cd_duracao_atual").value);
                dijit.byId("cd_proximo_curso").set("value", data.retorno[0].cd_proximo_curso);
                dijit.byId('valorParcelaGrid')._onChangeActive = false;
                dijit.byId("cd_curso_atualCurso").set("value", data.retorno[0].cd_curso);
                //cursoordem = data.retorno[0].cd_curso_ordem;
                //dijit.byId('mesInicialCurso').set("value", data.retorno[0].nm_mes_curso_inicial);
                //dijit.byId('anoInicialCurso').set("value", data.retorno[0].nm_ano_curso_inicial);

                //dijit.byId('mesFinalCurso').set("value", data.retorno[0].nm_mes_curso_final);
                //dijit.byId('anoFinalCurso').set("value", data.retorno[0].nm_ano_curso_final);

                dijit.byId("diaCurso").set("value", dijit.byId("gridDataCurso").store.objectStore.data[pos].nm_dia);
                dijit.byId('mesCurso').set("value",
                    calculaMesAno(dijit.byId("gridDataCurso").store.objectStore.data[pos]).mes);
                dijit.byId("anoCurso").set("value",
                    calculaMesAno(dijit.byId("gridDataCurso").store.objectStore.data[pos]).ano);
                dijit.byId('parcelasCurso').set("value",
                    dijit.byId("gridDataCurso").store.objectStore.data[pos].nm_parcelas);
                dijit.byId('tipoDocumentoCurso')
                    .set("value", dijit.byId("gridDataCurso").store.objectStore.data[pos].cd_tipo);
                dojo.byId('tipoDocumentoCurso').value = dijit.byId("gridDataCurso").store.objectStore.data[pos].no_tipo;
                dojo.byId('cd_responsavel_mensCurso').value =
                    dijit.byId("gridDataCurso").store.objectStore.data[pos].cd_pessoa_responsavel;
                dijit.byId('pessoaResponsavelCurso').set("value",
                    dijit.byId("gridDataCurso").store.objectStore.data[pos].no_pessoa_responsavel);
                dijit.byId('percentualResponsavelCurso').value = dijit.byId("gridDataCurso").store.objectStore.data[pos]
                    .pc_responsavel_contrato;
                dijit.byId('ckCertificadoCurso').checked =
                    dijit.byId("gridDataCurso").store.objectStore.data[pos].id_liberar;
                dijit.byId('valorParcelaGrid')._onChangeActive = true;
                onChangeActive(true);

                getValoresTabelaPrecoCursoGrid(xhr, dijit.byId('cd_curso_atual').get('value'), dijit.byId('cd_duracao_atual').get('value'), 0, false);
            } else {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgProximoCursoNaoEncontrado);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            }
        } catch (e) {
            postGerarLog(e);
        }
    },
        function (error) {
            apresentaMensagem('apresentadorMensagemMat', error);
        });
}

function getProximoCursoPorProdutoSemMatriculaSimultaneaPrimeiraTurma(cd_produto, cdCurso, xhr, ref) {
    xhr.get({
        preventCache: true,
        url: Endereco() + "/api/curso/getCursoByProdutoSemMatriculaSimultanea?cd_curso=" + cdCurso + "&cd_produto=" + cd_produto,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            data = jQuery.parseJSON(data);
            if (hasValue(data.retorno)) {
                onChangeActive(false);
                limparItemCurso();
                sugereDiaOpcoesPgto(xhr, ref, 0, 0, 0, 0);
                IncluirAlterar(1,
                    'divAlterarDataCurso',
                    'divIncluirDataCurso',
                    'divExcluirDataCurso',
                    'apresentadorMensagemsDataCurso',
                    'divCancelarDataCurso',
                    'divLimparDataCurso');

                //LBM Vamos sempre respeitar a tabela de preços
                //if (parseFloat(dojo.byId('valorTaxaMatricula').value) > 0) {
                //    dijit.byId('valorMatriculaGrid').set("value", dijit.byId('valorTaxaMatricula').value);
                //}
                dijit.byId("cd_curso_atualCurso").set("value", dijit.byId("cd_curso_atual").value);
                dijit.byId("cd_duracao_atual_curso").set("value", dijit.byId("cd_duracao_atual").value);
                dijit.byId("cd_proximo_curso").set("value", data.retorno[0].cd_proximo_curso);

                var gridDataCurso = dijit.byId('gridDataCurso');
                if (dijit.byId('ckMultipla').checked && (hasValue(gridDataCurso) &&
                    hasValue(gridDataCurso.store) &&
                    hasValue(gridDataCurso.store.objectStore) &&
                    hasValue(gridDataCurso.store.objectStore.data.length == 0))) {
                    dojo.byId('cd_responsavel_mensCurso').value = dojo.byId('cd_responsavel_mens').value;
                    dijit.byId('pessoaResponsavelCurso').set("value", dojo.byId('pessoaResponsavel').value);
                }

                if (dojo.byId("pc_bolsa_material_aluno").value > 0 && hasValue(dijit.byId("dt_inicio_bolsa_aluno").value)) {
                    if (dojo.date.compare(dijit.byId('dtaMatricula').value, dijit.byId("dt_inicio_bolsa_aluno").value, "date") >= 0) {
                        dijit.byId("pcBolsaMaterialC").set("disabled", false);
                        dijit.byId("vlMaterialContratoCDescontoC").set("disabled", false);
                        dijit.byId("pcBolsaMaterialC").set("value", unmaskFixed(dojo.byId("pc_bolsa_material_aluno").value, 2));
                    } else {
                        dijit.byId("vlMaterialContratoCDescontoC").set("disabled", true);
                        dijit.byId("pcBolsaMaterialC").set("disabled", true);
                        dijit.byId("pcBolsaMaterialC").reset();
                    }
                } else {
                    dijit.byId("vlMaterialContratoCDescontoC").set("disabled", false);
                    dijit.byId("pcBolsaMaterialC").set("disabled", false);
                }
                onChangeActive(true); //estava na linha 9094
                dijit.byId("cadMensalidade").show();
            } else {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgProximoCursoNaoEncontrado);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            }
        } catch (e) {
            postGerarLog(e);
        }
    },
        function (error) {
            apresentaMensagem('apresentadorMensagemMat', error);
        });
}

function calculaMesAno(store) {
    this.count = store.nm_parcelas;
    this.mesCalculado = store.nm_mes;
    this.anoCalculado = store.nm_ano;
    for (this.z = 0; this.z < this.count; this.z++) {
        this.mesCalculado++;
        if (this.mesCalculado > 12) {
            this.mesCalculado = 1;
            this.anoCalculado++;
        }
    }

    return { mes: this.mesCalculado, ano: this.anoCalculado };
}


//#endregion

//#region Métodos relacionados com  montarCadastroMatriculaPartial - showEditMatricula - loadDataMatricula -  populaTurmasContrato - populaSemTurma - pesquisaPessoaResponsavelFK - pesquisaTurmaDisponivelAluno - hideTagMatriculaTurma

function keepValuesMatricula(value, grid, ehLink, xhr, ready, Memory, filteringSelect, ObjectStore) {
    try {
        INCLUIR = false;
        EDITAR = true;
        existe_data_alteracao_aditivo = false;
        limparCadMatricula(xhr, ObjectStore, Memory, false);
        verificaParametros(function () {
            if (!hasValue(value) && grid != null)
                value = grid.itemSelecionado;
            var cdContrato = hasValue(value) && hasValue(value.cd_contrato) ? value.cd_contrato : dojo.byId('cd_contrato').value;
            if (cdContrato > 0)
                showEditMatricula(cdContrato, xhr, ready, Memory, filteringSelect, ObjectStore);
        }, false);
    } catch (e) {
        postGerarLog(e);
    }
}

function showEditMatricula(cdContrato, xhr, ready, Memory, filteringSelect, ObjectStore) {
    showCarregando();
    xhr.get({
        url: Endereco() + "/api/coordenacao/getMatriculaById?id=" + cdContrato,
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
	    xhr.get({
            url: Endereco() + "/api/coordenacao/GetMatriculaByIdComponentes?id=" + cdContrato,
		    preventCache: true,
		    handleAs: "json",
		    headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
	    }).then(function (dataComponentes) {
            xhr.get({
                url: Endereco() + "/api/coordenacao/GetMatriculaComponentBancoPesq",
	            preventCache: true,
	            handleAs: "json",
	            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
            }).then(function (dataBancos) {
	            try {
		            hideCarregando();
		            apresentaMensagem("apresentadorMensagemMat", null);
		            abriuTagTitulos = false;
                    atualizar_data_aditivo = true;

                    data.retorno.duracoes = dataComponentes.retorno.duracoes;
                    data.retorno.produtos = dataComponentes.retorno.produtos;
                    data.retorno.regimes = dataComponentes.retorno.regimes;
                    data.retorno.nomesContrato = dataComponentes.retorno.nomesContrato;
                    data.retorno.tipoLiquidacoes = dataComponentes.retorno.tipoLiquidacoes;
                    data.retorno.localMovto = dataComponentes.retorno.localMovto;
                    data.retorno.bancos = dataBancos.retorno.bancos;
                    data.retorno.contrato.anosEscolares = dataComponentes.retorno.anosEscolares;
                    data.retorno.contrato.motivosBolsa = dataComponentes.retorno.motivosBolsa;

		            dijit.byId("editContrato").value = data.retorno;
		            loadDataMatricula(data.retorno, ready, Memory, filteringSelect, xhr, ObjectStore);
		            if (!verificaMatriculaNormal()) {
		                montarItemCursoEdicao(data.retorno.contrato.CursoContrato, ObjectStore, Memory);
		                calculaValorContrato();
		                //calculaValorMatriculaTotal();
		                //calculaValorMaterialContrato();

		            } else {
		                dijit.byId('valorMatriculaTotal').set('value', unmaskFixed(dijit.byId('valorMatricula').value, 2));
		                habilitarOnChange(dijit.byId('vl_contrato'), false);
		                dijit.byId('vl_contrato').set('value', unmaskFixed(dijit.byId('valorCurso').value, 2));
		                habilitarOnChange(dijit.byId('vl_contrato'), true);
	                }

		        } catch (e) {
		            hideCarregando();
		            postGerarLog(e);
		        }
		        //hideCarregando();
	        },
	        function (error) {
		        hideCarregando();
		        apresentaMensagem("apresentadorMensagemMat", error);
	        });
	    },
	    function (error) {
		    hideCarregando();
		    apresentaMensagem("apresentadorMensagemMat", error);
	    });
    },
    function (error) {
        hideCarregando();
        apresentaMensagem("apresentadorMensagemMat", error);
    });

}

function dataDiaMat(xhr) {
    xhr.get({
        url: Endereco() + "/api/secretaria/getData",
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            //dojo.byId("dtaMatricula").value = data;
            //dijit.byId('dtaMatricula').original_value = data;
            // dijit.byId('dtaMatricula')._onChangeActive = false;
            //dijit.byId('dtaMatricula').set('value', dojo.date.locale.parse(data, { formatLength: 'short', selector: 'date', locale: 'pt-br' }));

            //dijit.byId('dtaMatricula')._onChangeActive = true;
        } catch (e) {
            postGerarLog(e);
        }
    },
    function (error) {
        showCarregando();
        apresentaMensagem("apresentadorMensagemMat", error);
    });
}

function loadDataMatricula(contrato, ready, Memory, filteringSelect, xhr, ObjectStore) {
    try {
        showCarregando();
        gerar_titulo = false;
        onChangeActive(false);
        LOADCONTRATO = true;
        dojo.byId("edlayoutContratoDigitalizado").value = contrato.contrato.nm_arquivo_digitalizado;
        if (hasValue(parseInt(dojo.byId("cd_endereco_aluno").value)))
            dojo.byId("cd_endereco_aluno").value = 0;

        dojo.byId("cd_pessoa_escola").value = contrato.contrato.cd_pessoa_escola;
        dojo.byId("cd_contrato").value = contrato.contrato.cd_contrato;
        dojo.byId("cd_aluno_mat").value = contrato.contrato.cd_aluno;
        dojo.byId("cd_pessoa_aluno_mat").value = contrato.contrato.Aluno.cd_pessoa_aluno;
        dijit.byId("dt_inicio_bolsa_aluno").set("value", contrato.contrato.Aluno.Bolsa.dt_inicio_bolsa);
        if (contrato.contrato.cd_aluno > 0 && hasValue(contrato.contrato.Aluno.Bolsa.dt_inicio_bolsa))
            if (dojo.date.compare(contrato.contrato.dtMatriculaContrato, dijit.byId("dt_inicio_bolsa_aluno").value, "date") >= 0) 
                dojo.byId("pc_bolsa_aluno").value = unmaskFixed(hasValue(contrato.contrato.Aluno.Bolsa.pc_bolsa) ? contrato.contrato.Aluno.Bolsa.pc_bolsa : 0, 2);
        dojo.byId("nomeAlunoMat").value = contrato.contrato.Aluno.AlunoPessoaFisica.no_pessoa;
        dojo.byId("nm_contrato").value = contrato.contrato.nm_contrato;
        dojo.byId("atendente").value = contrato.contrato.SysUsuario.PessoaFisica.no_pessoa;
        dojo.byId("dc_serie_contrato").value = contrato.contrato.dc_serie_contrato;
        dijit.byId("tipoMatricula").set("value", contrato.contrato.id_tipo_matricula);
        dojo.byId("dtaInicioMat").value = contrato.contrato.dtInicialContrato;
        dijit.byId("dtaInicioMat").set("value", contrato.contrato.dt_inicial_contrato);
        dojo.byId("dtaFinalMat").value = contrato.contrato.dtFinalContrato;
        dojo.byId("matriculaNro").value = contrato.contrato.nm_matricula_contrato;
        dijit.byId("ckManual").set("checked", contrato.contrato.id_ajuste_manual);
        dijit.byId("ckAula").set("checked", contrato.contrato.id_contrato_aula);
        dijit.byId("ckCertificado").set("checked", contrato.contrato.id_liberar_certificado);
        dijit.byId("cd_produto_atual").set("value", contrato.contrato.cd_produto_atual);

        dijit.byId("dia").set("value", contrato.contrato.nm_dia_vcto > 0 ? contrato.contrato.nm_dia_vcto : null);
        dijit.byId("mes").set("value", contrato.contrato.nm_mes_vcto > 0 ? contrato.contrato.nm_mes_vcto : null);
        dijit.byId("ano").set("value", contrato.contrato.nm_ano_vcto > 0 ? contrato.contrato.nm_ano_vcto : null);

        dijit.byId("mesInicial").set("value", contrato.contrato.nm_mes_curso_inicial > 0 ? contrato.contrato.nm_mes_curso_inicial : null);
        dijit.byId("anoInicial").set("value", contrato.contrato.nm_ano_curso_inicial > 0 ? contrato.contrato.nm_ano_curso_inicial : null);

        dijit.byId("mesFinal").set("value", contrato.contrato.nm_mes_curso_final > 0 ? contrato.contrato.nm_mes_curso_final : null);
        dijit.byId("anoFinal").set("value", contrato.contrato.nm_ano_curso_final > 0 ? contrato.contrato.nm_ano_curso_final : null);

        dojo.byId("cd_responsavel_mens").value = contrato.contrato.cd_pessoa_responsavel;
        dojo.byId("pessoaResponsavel").value = contrato.contrato.no_responsavel;

        dojo.byId("cd_responsavel_mens").pessoaCPF = contrato.contrato.Aluno.AlunoPessoaFisica.cd_pessoa_cpf;
        dojo.byId("pessoaResponsavel").pessoaCPF = contrato.contrato.no_pessoa_cpf;

        dijit.byId("percentualResponsavel").set("value", contrato.contrato.pc_responsavel_contrato);
        dojo.byId("percentualResponsavel").old_value = dojo.byId("percentualResponsavel").value;

        dojo.byId('totalDescontosPermitidos').value = contrato.contrato.perc_descontoParametros_maximo;
        dojo.byId('pesquisarBD').value = true;
        dijit.byId("cd_curso_atual").set("value", contrato.contrato.cd_curso_atual);

        dojo.byId("cd_mala_direta").value = contrato.contrato.cd_mala_direta != null && contrato.contrato.cd_mala_direta > 0 ? contrato.contrato.cd_mala_direta : 0;
        dijit.byId("emailMarketingFK").set("value", contrato.contrato.MalaDireta.dc_assunto);

        dijit.byId("cd_duracao_atual").set("value", contrato.contrato.cd_duracao_atual);
        dijit.byId("cd_regime_atual").set("value", contrato.contrato.cd_regime_atual);
        dojo.byId("dtaMatricula").value = contrato.contrato.dtMatriculaContrato;
        dojo.byId("dtaMatricula").old_value = dojo.byId("dtaMatricula").value;
        dijit.byId("tipoDocumento").set("value", contrato.contrato.cd_tipo_financeiro);
        dojo.byId("tipoDocumento").old_value = dojo.byId("tipoDocumento").value;
        dijit.byId("ckTransfCad").set("checked", contrato.contrato.id_transferencia);
        dijit.byId("ckRetornoCad").set("checked", contrato.contrato.id_retorno);
        dijit.byId("id_venda_pacote").set("checked", contrato.contrato.id_venda_pacote);
        ALTEROU_VENDA_PACOTE = false;
        //valores
        dijit.byId("valorCurso").set('value', contrato.contrato.vl_curso_contrato);
        dojo.byId("valorCurso").old_value = dojo.byId("valorCurso").value;
        dijit.byId("desconto").set('value', contrato.contrato.pc_desconto_contrato);
        dijit.byId("desconto").old_value = contrato.contrato.pc_desconto_contrato;
        dijit.byId("ckPrimeiraParcela").set('value', contrato.contrato.id_divida_primeira_parcela);
        dojo.byId('valorCursoOri').value = contrato.contrato.vl_curso_contrato;
        dijit.byId("valorMatricula").set('value', contrato.contrato.vl_matricula_contrato);
        //ojo.byId("valorMatricula").value = contrato.contrato.vlMatriculaContrato;   
        dijit.byId("valorDesconto").set('value', contrato.contrato.vl_desconto_contrato);
        //dojo.byId("valorDesconto").value = contrato.contrato.vlDescontoContrato;
        dijit.byId("valorDesconto").old_value = contrato.contrato.vl_desconto_contrato;
        dijit.byId("divida").set('value', contrato.contrato.vl_divida_contrato);
        dijit.byId("valorFaturar").set('value', contrato.contrato.vl_liquido_contrato);
        dijit.byId("edValParcela").set('value', contrato.contrato.vl_parcela_contrato);
        dijit.byId("edValParcela").old_value = contrato.contrato.vl_parcela_contrato;
        dojo.byId("divida").old_value = dojo.byId("divida").value;
        dijit.byId("parcelas").set('value', contrato.contrato.nm_parcelas_mensalidade > 0 ? contrato.contrato.nm_parcelas_mensalidade : 1);
        //dojo.byId("parcelas").value = contrato.contrato.nm_parcelas_mensalidade > 0 ? contrato.contrato.nm_parcelas_mensalidade : 1;
        //Config o valor anterior.
        dijit.byId("parcelas").old_value = contrato.contrato.nm_parcelas_mensalidade > 0 ? contrato.contrato.nm_parcelas_mensalidade : 1;
        dijit.byId("descontoPrimeiraParcela").set("value", contrato.contrato.vl_desc_primeira_parcela);
        dojo.byId('descontoPrimeiraParc').value = contrato.contrato.vl_desc_primeira_parcela;
        changeFieldsMensalidade(contrato.id_contrato_aula);
        //Popula o saldo restante a ser pago da marícula.
        dijit.byId("vl_saldo_matricula").set("value", contrato.contrato.valorSaldoMatricula);
        dojo.byId("qtd_titulos_abertos").value = contrato.contrato.qtdTitulosAbertos;
        dijit.byId('gridDescontoAdt').listaTodosTitulos = contrato.contrato.titulos;
        dijit.byId("perc_bolsa").set("value", contrato.contrato.pc_desconto_bolsa);
        dijit.byId("perc_bolsa").old_value = contrato.contrato.pc_desconto_bolsa;

        if (hasValue(contrato.contrato.vl_pre_matricula)) {
            dijit.byId("vl_pre_matricula").constraints.max = contrato.contrato.vl_pre_matricula;
            dijit.byId('vl_pre_matricula').constraints.min = contrato.contrato.vl_pre_matricula;
            dijit.byId('vl_pre_matricula').set("value", contrato.contrato.vl_pre_matricula);
            dojo.attr(dijit.byId('vl_pre_matricula'), "title", "Valor de pré matrícula:  " + dijit.byId('vl_pre_matricula').value);
        }

        //Plano de Contas:
        if (hasValue(contrato.contrato.cd_plano_conta)) {
            dojo.byId('cd_plano_contas').value = contrato.contrato.cd_plano_conta;
            if (!contrato.contrato.id_tipo_aditamento && !dijit.byId("fkTaxaMatricula").sugestaoAtiva)
                dijit.byId("limparPlanoContasMat").set('disabled', false);
        }
        if (hasValue(contrato.contrato.PlanoConta) && hasValue(contrato.contrato.PlanoConta.PlanoContaSubgrupo))
            dojo.byId('planoContasMat').value = contrato.contrato.PlanoConta.PlanoContaSubgrupo.no_subgrupo_conta;

        populaDadosTurma(xhr, Memory, ready, ObjectStore, contrato);

        atualizaCKTipoAulas(contrato);
        
        if (hasValue(contrato.contrato.id_tipo_aditamento)) {
            dijit.byId("tipoAditamento").set('value', contrato.contrato.id_tipo_aditamento);
            if (hasValue(contrato.contrato.cd_tipo_financeiro) && contrato.contrato.cd_tipo_financeiro > 0 && contrato.contrato.cd_tipo_financeiro == ADICIONAR_PARCELAS) {
                dojo.byId('tdLabelTifpoFinanceiro').style.display = "";
                dojo.byId('tdTifpoFinanceiro').style.display = "";
                dijit.byId("tipoFinanceiroAditamento").set("required", true);
                //dijit.byId("tipoFinanceiroAditamento").set("disabled", true);
                dijit.byId("tipoFinanceiroAditamento").set('value', contrato.contrato.cd_tipo_financeiro);
            }
        }
        else
            travarMatriculaGerarTitulo(false);
        dijit.byId("fkAluno").set("disabled", true);
        populaTaxaMatricula(contrato.taxa, contrato.contrato.cd_contrato, contrato.bancos, contrato.cheque);
        //MMC getGridAditamento(contrato.cd_contrato);
        verificaDisableProduto(contrato);

        var gridDesconto = dijit.byId("gridDesconto");
        var cd_contrato = parseInt(dojo.byId('cd_contrato').value);
        if ((cd_contrato != null || cd_contrato > 0) &&
             (gridDesconto != null && gridDesconto.store != null && gridDesconto.store.objectStore.data != null) && hasValue(contrato.descontos))
            getSearchDescontoContrato(contrato.descontos, function () {
                atualizaValoresMatricula(contrato.contrato, true);
            }, xhr, ObjectStore, Memory);
        else
            atualizaValoresMatricula(contrato.contrato, true);
        if (contrato.contrato.cd_tipo_financeiro == CHEQUE || (contrato.taxa != null && contrato.taxa.cd_tipo_financeiro_taxa == CHEQUE)) {
            dijit.byId('idCheque').setAttribute('disabled', false);
            loadBanco(contrato.bancos, 'banco', contrato.cheque.cd_banco);
            loadDataCheque(contrato.cheque);
        }
        dijit.byId("cadResponsavel").set("disabled", true);

        dijit.byId("vlMaterialContrato").set('value', contrato.contrato.vl_material_contrato);
        if (contrato.contrato.id_valor_incluso) {
            dijit.byId("incorporarMaterial").set("disabled", true);
            dijit.byId("NroParMaterial").set("disabled", true);
            dijit.byId("vlParcMaterial").set("disabled", true);
            dijit.byId("pcBolsaMaterial").set("disabled", true);
            dijit.byId("vlMaterialContratoCDesconto").set("disabled", true);
        }
        dijit.byId("vlInclusoMaterial").set('checked', contrato.contrato.id_valor_incluso);
        dijit.byId("incorporarMaterial").set('checked', contrato.contrato.id_incorporar_valor_material);
        dijit.byId("NroParMaterial").set('value', contrato.contrato.nm_parcelas_material);
        dijit.byId("vlParcMaterial").set('value', contrato.contrato.vl_parcela_material);
        dijit.byId("pcBolsaMaterial").set('value', contrato.contrato.pc_bolsa_material);
        dijit.byId("vlMaterialContratoCDesconto").set('value', contrato.contrato.vl_parcela_liq_material);

        dijit.byId("notasMaterialDidatico").set("disabled", false);
        dijit.byId("notasMaterialDidatico").set("required", false);
        if (contrato.contrato.notas_material_didatico != null &&
            contrato.contrato.notas_material_didatico != undefined &&
            contrato.contrato.notas_material_didatico['length'] > 0) {
            criarOuCarregarCompFilteringNotasMat("notasMaterialDidatico",
                contrato.contrato.notas_material_didatico,
                "",
                contrato.contrato.notas_material_didatico[0].cd_movimento,
                ready,
                Memory,
                filteringSelect,
                'cd_movimento',
                'nm_movimento',
                'cd_curso',
                'id_venda_futura');
            dijit.byId("cd_produto_atual").set("disabled", true);
            dijit.byId("cd_regime_atual").set("disabled", true);
            dijit.byId("cd_curso_atual").set("disabled", true);

        } else {
            criarOuCarregarCompFilteringNotasMat("notasMaterialDidatico", [], "", null, ready, Memory, filteringSelect, 'cd_movimento', 'nm_movimento','cd_curso','id_venda_futura');

        }
        

        gerar_titulo = false;
        onChangeActive(true);
        showCarregando();
    } catch (e) {
        showCarregando();
        postGerarLog(e);
    }
}


function atualizaCKTipoAulas(contrato) {
    try {

        if (hasValue(contrato) && hasValue(contrato.contrato) && hasValue(contrato.contrato.CursoContrato)) {
            var valorProfissionalizante = filterItemByNameProduto("cd_produto_atual", "Profissionalizante");
            var valorInformatica = filterItemByNameProduto("cd_produto_atual", "Informática");


            //Matricula Multipla
            if (contrato.contrato.id_tipo_contrato === EnumTipoCKMatricula.MULTIPLA) {
                dijit.byId('ckMultipla').set('checked', true);
                dijit.byId("btnAddTurma").set("disabled", true);
                dojo.byId('opcoes').style.display = 'none';
                dojo.byId('opcoesDC').style.display = 'block';
            } else if (contrato.contrato.id_tipo_contrato === EnumTipoCKMatricula.PROFISSIONALIZANTE) {
                dijit.byId('ckProfissional').set('checked', true);
                dijit.byId("btnAddTurma").set("disabled", true);
                dijit.byId('cd_produto_atual').set("disabled", true);
                dojo.byId('opcoes').style.display = 'block';
                dojo.byId('opcoesDC').style.display = 'block';
                dojo.byId('tgValCurso').style.display = 'none';
            } else if (contrato.contrato.id_tipo_contrato === EnumTipoCKMatricula.INFORMATICA) {
                dijit.byId('ckInformatica').set('checked', true);
                dijit.byId("btnAddTurma").set("disabled", true);
                dijit.byId('cd_produto_atual').set("disabled", true);
                dojo.byId('opcoes').style.display = 'block';
                dojo.byId('opcoesDC').style.display = 'block';
                dojo.byId('tgValCurso').style.display = 'none';
            } else if (contrato.contrato.id_tipo_contrato === EnumTipoCKMatricula.NORMAL) {
                dojo.byId('opcoes').style.display = 'block';
                dojo.byId('opcoesDC').style.display = 'none';
                dojo.byId('tgValCurso').style.display = 'block';
                //LBM Desativao dijit.byId("btnAddTurma").set("disabled", false);
            }
        } else {
            dojo.byId('tgValCurso').style.display = 'block';

            if(verificaMatriculaNormal()){
                dojo.byId('opcoes').style.display = 'block';
                dojo.byId('opcoesDC').style.display = 'none';
                dijit.byId("btnAddTurma").set("disabled", false);
            }
            else{
                 dijit.byId("btnAddTurma").set("disabled", true);
            }

        }
        
    } catch (e) {
        postGerarLog(e);
    } 
}


function verificaDisableProduto(contrato) {
    try {

        if (hasValue(contrato) && hasValue(contrato.contrato) && hasValue(contrato.contrato.CursoContrato)) {


            //Matricula Multipla
            if (contrato.contrato.id_tipo_contrato === EnumTipoCKMatricula.MULTIPLA ) {
                dijit.byId('cd_produto_atual').set("disabled", false);
            } else if (contrato.contrato.id_tipo_contrato === EnumTipoCKMatricula.PROFISSIONALIZANTE) {
                dijit.byId('cd_produto_atual').set("disabled", true);
            } else if (contrato.contrato.id_tipo_contrato === EnumTipoCKMatricula.INFORMATICA) {
                dijit.byId('cd_produto_atual').set("disabled", true);
            } else if (contrato.contrato.id_tipo_contrato === EnumTipoCKMatricula.NORMAL) {
                dijit.byId('cd_produto_atual').set("disabled", false);
            }
        } else {
            dijit.byId('cd_produto_atual').set("disabled", false);
        }

    } catch (e) {
        postGerarLog(e);
    }
}

function populaTurmasContrato(xhr, Memory, filteringSelect, ready, ObjectStore, cd_contrato, cd_produto_atual, cd_curso_atual, cd_duracao_atual, cd_regime_atual, cd_nome_contrato, cdAluno, dataTurmaContrato) {
    xhr.get({
        url: Endereco() + "/api/turma/getTurmasContrato?cd_contrato=" + cd_contrato + "&cd_aluno=" + cdAluno,
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (dataTurmaContrato) {
        var dataStoreContrato = new ObjectStore({ objectStore: new Memory({ data: dataTurmaContrato }) });
        var grid = dijit.byId("gridTurmaMat");
        grid.setStore(dataStoreContrato);
        populaSemTurma(cd_produto_atual, cd_curso_atual, cd_duracao_atual, cd_regime_atual, cd_nome_contrato, xhr, Memory);
        getdAditamentoMaxDataEHistorico(cd_contrato);
        verificaMatriculaNormal()
            ? dijit.byId("btnAddTurma").set("disabled", false)
            : dijit.byId("btnAddTurma").set("disabled", true);
        dijit.byId("ckRetornoCad").set("disabled", false);
        if (dijit.byId("gridTurmaMat")._by_idx.length > 0) {
            for (var i = 0; i < dijit.byId("gridTurmaMat")._by_idx.length; i++)
                if (dijit.byId("gridTurmaMat")._by_idx[i].item.cd_situacao_aluno_turma == 1 || dijit.byId("gridTurmaMat")._by_idx[i].item.cd_situacao_aluno_turma == 8 || dijit.byId("gridTurmaMat")._by_idx[i].item.cd_situacao_aluno_turma == 3) {
                    dijit.byId("btnAddTurma").set("disabled", true);
                    dijit.byId("ckRetornoCad").set("disabled", true);
                    dadosAlunoTurma(xhr, cdAluno, dijit.byId("gridTurmaMat")._by_idx[i].item.cd_turma);
                    break;
                }
                else
                    dadosAlunoTurma(xhr, cdAluno, dijit.byId("gridTurmaMat")._by_idx[i].item.cd_turma);
            hideTagMatriculaTurma(grid);
        }
        else {
            verificaMatriculaNormal()
                ? dijit.byId("btnAddTurma").set("disabled", false)
                : dijit.byId("btnAddTurma").set("disabled", true);
            dijit.byId("ckRetornoCad").set("disabled", false);
            dadosAlunoTurma(xhr, cdAluno, 0);
            hideTagMatriculaTurma(grid);
        }
        grid.update();
    },
      function (error) {
          apresentaMensagem("apresentadorMensagemMat", error);
          showCarregando();
      });
}

function populaDadosTurma(xhr, Memory, ready, ObjectStore, contratoUI) {
    try {
        loadSelect(contratoUI.produtos, "cd_produto_atual", 'cd_produto', 'no_produto', contratoUI.contrato.cd_produto_atual);
        atualizarValoresMapStoreProdutoAtual();
        loadSelect(contratoUI.cursos, "cd_curso_atual", 'cd_curso', 'no_curso', contratoUI.contrato.cd_curso_atual);
        loadSelect(contratoUI.cursos, "cd_curso_atualCurso", 'cd_curso', 'no_curso');
        if (hasValue(contratoUI.duracoes)) {
            loadSelect(contratoUI.duracoes, "cd_duracao_atual", 'cd_duracao', 'dc_duracao', contratoUI.contrato.cd_duracao_atual);
            loadSelect(contratoUI.duracoes, "cd_duracao_atual_curso", 'cd_duracao', 'dc_duracao', contratoUI.contrato.cd_duracao_atual);
        }
        if (hasValue(contratoUI.regimes))
            loadSelect(contratoUI.regimes, "cd_regime_atual", 'cd_regime', 'no_regime', contratoUI.contrato.cd_regime_atual);
        if (hasValue(contratoUI.nomesContrato))
            loadSelectNomeContrato(contratoUI.nomesContrato, contratoUI.contrato.cd_nome_contrato, Memory);
        if (hasValue(contratoUI.localMovto)) {
            loadSelect(contratoUI.localMovto, "bancoTitMat", 'cd_local_movto', 'nomeLocal');
            loadSelect(contratoUI.localMovto, "edBanco", 'cd_local_movto', 'nomeLocal');
            //    setTimeout(verificaParametros(), 2000);
        }
        if (hasValue(contratoUI.contrato.anosEscolares))
            loadSelect(contratoUI.contrato.anosEscolares, "anoEscolar", 'cd_ano_escolar', 'dc_ano_escolar', contratoUI.contrato.cd_ano_escolar);

        if (hasValue(contratoUI.contrato.motivosBolsa))
            loadSelect(contratoUI.contrato.motivosBolsa, 'aditivobolsaMotivoBolsa', 'cd_motivo_bolsa', 'dc_motivo_bolsa', contratoUI.contrato.motivosBolsa);

        getdAditamentoMaxDataEHistorico(contratoUI.contrato.cd_contrato);
        if (hasValue(contratoUI.turmas) && contratoUI.turmas.length > 0) {
            var dataStoreContrato = new ObjectStore({ objectStore: new Memory({ data: contratoUI.turmas }) });
            var grid = dijit.byId("gridTurmaMat");
            grid.setStore(dataStoreContrato);

            verificaMatriculaNormal()
                ? dijit.byId("btnAddTurma").set("disabled", false)
                : dijit.byId("btnAddTurma").set("disabled", true);
            dijit.byId("ckRetornoCad").set("disabled", false);
            populaDadosAlunoTurma(contratoUI.alunoTurma);
            if (dijit.byId("gridTurmaMat")._by_idx.length > 0) {
                for (var i = 0; i < dijit.byId("gridTurmaMat")._by_idx.length; i++)
                    if (dijit.byId("gridTurmaMat")._by_idx[i].item.cd_situacao_aluno_turma == 1 || dijit.byId("gridTurmaMat")._by_idx[i].item.cd_situacao_aluno_turma == 8 || dijit.byId("gridTurmaMat")._by_idx[i].item.cd_situacao_aluno_turma == 3) {
                        dijit.byId("btnAddTurma").set("disabled", true);
                        dijit.byId("ckRetornoCad").set("disabled", true);
                        break;
                    }
                hideTagMatriculaTurma(grid);
            }
            else {
                verificaMatriculaNormal()
                    ? dijit.byId("btnAddTurma").set("disabled", false)
                    : dijit.byId("btnAddTurma").set("disabled", true);
                dijit.byId("ckRetornoCad").set("disabled", false);
                hideTagMatriculaTurma(grid);
            }
            grid.update();
        }
        else {
            verificaMatriculaNormal()
                ? dijit.byId("btnAddTurma").set("disabled", false)
                : dijit.byId("btnAddTurma").set("disabled", true);
            dijit.byId("ckRetornoCad").set("disabled", false);
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function populaSemTurma(cdProduto, cdCurso, cdDuracao, cdRegime, cdNomeContrato, xhr, Memory, data, pfuncao, novaMatricula) {
    try {
        if (!hasValue(data)) {
            xhr.get({
                url: Endereco() + "/api/coordenacao/componentesNovaMatricula?cdDuracao=" + cdDuracao + "&cdProduto=" + cdProduto + "&cdRegime=" + cdRegime + "&cd_nome_contrato=" + cdNomeContrato,
                preventCache: true,
                handleAs: "json",
                headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
            }).then(function (data) {
                try {
                    // apresentaMensagem("apresentadorMensagemMat", null, false);
                    if (hasValue(data.retorno)) {

                        if (hasValue(data.retorno.produtos)) {
                            loadSelect(data.retorno.produtos, "cd_produto_atual", 'cd_produto', 'no_produto', cdProduto);
                            atualizarValoresMapStoreProdutoAtual();
                            if (cdProduto > 0) {
                                if (verificaCheckedMatriculaMultipla()) {
                                   
                                    if (!verificaMatriculaNormal()) {
                                        var valorProfissionalizante = filterItemByName("cd_produto_atual", "Profissionalizante");
                                        var valorInformatica = filterItemByName("cd_produto_atual", "Informática");

                                        if (valorProfissionalizante[0].id === dijit.byId("cd_produto_atual").value ||
                                            valorInformatica[0].id === dijit.byId("cd_produto_atual").value) {
                                            dijit.byId("cd_produto_atual").reset();
                                            dijit.byId("cd_curso_atual").reset();
                                            dijit.byId("cd_curso_atual").store.data = [];

                                            var mensagensWeb = new Array();
                                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                                                msgErroSelectedInfProfMatriculaMultipla);
                                            apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                        } else {
                                            configuraCursoPorProdutoMatriculaSemMatriculaSimultanea(cdProduto, cdCurso, xhr, Memory);
                                        }
                                    } else {
                                        configuraCursoPorProdutoMatricula(cdProduto, cdCurso, xhr, Memory);
                                    }
                                } else {
                                    configuraCursoPorProdutoMatricula(cdProduto, cdCurso, xhr, Memory);
                                }
                            }
                        }
                        if (hasValue(data.retorno.duracoes)) {
                            loadSelect(data.retorno.duracoes, "cd_duracao_atual", 'cd_duracao', 'dc_duracao', cdDuracao);
                            loadSelect(data.retorno.duracoes, "cd_duracao_atual_curso", 'cd_duracao', 'dc_duracao', cdDuracao);
                        }
                        if (hasValue(data.retorno.regimes) && data.retorno.regimes.length > 0)
                            loadSelect(data.retorno.regimes, "cd_regime_atual", 'cd_regime', 'no_regime', cdRegime);
                        if (hasValue(data.retorno.nomesContrato))
                            loadSelectNomeContrato(data.retorno.nomesContrato, cdNomeContrato, Memory);
                        if (hasValue(data.retorno.localMovto))
                            loadSelect(data.retorno.localMovto, "edBanco", 'cd_local_movto', 'nomeLocal');
                        if (hasValue(data.retorno.anosEscolares))
                            loadSelect(data.retorno.anosEscolares, "anoEscolar", 'cd_ano_escolar', 'dc_ano_escolar');
                        setTimeout(function () { verificaParametros(pfuncao, novaMatricula); }, 2000);
                    }
                } catch (e) {
                    postGerarLog(e);
                }
            },
            function (error) {
                apresentaMensagem("apresentadorMensagem", error);
                showCarregando();
            });
        }
        else {
            if (data.retorno != null) {
                if (hasValue(data.retorno.produtos)) {
                    loadSelect(data.retorno.produtos, "cd_produto_atual", 'cd_produto', 'no_produto', cdProduto);
                    atualizarValoresMapStoreProdutoAtual();
                    if (cdProduto > 0) {
                        if (dijit.byId('ckMultipla').checked) {
                            configuraCursoPorProdutoMatriculaSemMatriculaSimultanea(cdProduto, cdCurso, xhr, Memory);
                        } else {
                            configuraCursoPorProdutoMatricula(cdProduto, cdCurso, xhr, Memory);
                        }
                    }
                }
                if (hasValue(data.retorno.duracoes)) {
                    loadSelect(data.retorno.duracoes, "cd_duracao_atual", 'cd_duracao', 'dc_duracao', cdDuracao);
                    loadSelect(data.retorno.duracoes, "cd_duracao_atual_curso", 'cd_duracao', 'dc_duracao', cdDuracao);
                }
                if (hasValue(data.retorno.regimes))
                    loadSelect(data.retorno.regimes, "cd_regime_atual", 'cd_regime', 'no_regime', cdRegime);
                if (hasValue(data.retorno.nomesContrato))
                    loadSelectNomeContrato(data.retorno.nomesContrato, cdNomeContrato, Memory);
                if (hasValue(data.retorno.localMovto)) {
                    loadSelect(data.retorno.localMovto, "bancoTitMat", 'cd_local_movto', 'nomeLocal');
                    loadSelect(data.retorno.localMovto, "edBanco", 'cd_local_movto', 'nomeLocal');
                }
                setTimeout(function () { verificaParametros(); }, 2000);
            }
        }
    } catch (e) {
        postGerarLog(e);
    }
}


function zerarGridTurmas(Memory, ObjectStore) {
    try {
        
        var grid = dijit.byId("gridTurmaMat");
        if (grid.store.objectStore.data.length > 0) {
            var dataStore = new ObjectStore({ objectStore: new Memory({ data: null }) });
            grid.setStore(dataStore);
            grid.update();
            if (verificaMatriculaNormal()) {
                dijit.byId("btnAddTurma").set("disabled", false);
            } else {
                dijit.byId("btnAddTurma").set("disabled", true);
            }
            dijit.byId("ckRetornoCad").set("disabled", false);
            dijit.byId('valorCurso').set('disabled', false);
            hideTagMatriculaTurma(grid);
            clearTagMatriculaSemTurma();
        }
        
    } catch (e) {
        postGerarLog(e);
    } 
}

function pesquisaPessoaResponsavelFK() {
    try {
        dojo.ready(function () {
            var myStore =
               dojo.store.Cache(
                 dojo.store.JsonRest({
                     target: Endereco() + "/api/Pessoa/GetPessoaResponsavelSearch?nome=" + dojo.byId("_nomePessoaRelFK").value +
                                   "&apelido=" + dojo.byId("_apelidoRel").value + "&inicio=" + document.getElementById("inicioPessoaRelFK").checked +
                                   "&tipoPessoa=" + dijit.byId("tipoPessoaRelFK").value +
                                   "&cnpjCpf=" + dojo.byId("CnpjCpfPessoaRel").value + "&cdPai=" + dojo.byId("cd_pessoa_aluno_mat").value +
                                   "&sexo=" + dijit.byId("sexoPessoaRelFK").value + "&papel=" + dijit.byId("papelPessoaRelFK").value,
                     handleAs: "json",
                     headers: { "Accept": "application/json", "Authorization": Token() }
                 }), dojo.store.Memory({}));
            dataStore = new dojo.data.ObjectStore({ objectStore: myStore });
            var grid = dijit.byId("gridPesquisaPessoaRel");
            grid.setStore(dataStore);
        })
    } catch (e) {
        postGerarLog(e);
    }
}

function pesquisaTurmaDisponivelAluno() {
    try {
        
        var cdCurso = hasValue(dijit.byId("pesCursoFK").value) ? dijit.byId("pesCursoFK").value : 0;
        var cdProduto = hasValue(dijit.byId("pesProdutoFK").value) ? dijit.byId("pesProdutoFK").value : 0;
        var cdDuracao = hasValue(dijit.byId("pesDuracaoFK").value) ? dijit.byId("pesDuracaoFK").value : 0;
        var cdProfessor = hasValue(dijit.byId("pesProfessorFK").value) ? dijit.byId("pesProfessorFK").value : 0;
        var cdProg = hasValue(dijit.byId("sPogramacaoFK").value) ? dijit.byId("sPogramacaoFK").value : 0;
        var situacaoFK = hasValue(dijit.byId("pesSituacaoFK").value) ? dijit.byId("pesSituacaoFK").value : 0;
        /*--combo_escola_fk
        //mostra o combo de escola
        dojo.byId("trEscolaTurmaFiltroFk").style.display = "";
        dojo.byId("lbEscolaTurmaFiltroFk").style.display = "";
        require(['dojo/dom-style', 'dijit/registry'],
            function (domStyle, registry) {

                domStyle.set(registry.byId("escolaTurmaFiltroFK").domNode, 'display', '');
            });*/

        var myStore = dojo.store.Cache(
            dojo.store.JsonRest({
                target: Endereco() + "/api/turma/getTurmaAlunoSearch?descricao=" + document.getElementById("nomTurmaFK").value + "&apelido=" + document.getElementById("_apelidoFK").value + "&inicio=" + document.getElementById("inicioTrumaFK").checked + "&tipoTurma=" + dijit.byId("tipoTurmaFK").value +
                                        "&cdCurso=" + cdCurso + "&cdDuracao=" + cdDuracao + "&cdProduto=" + cdProduto + "&situacaoTurma=" + situacaoFK + "&cdProfessor=" + cdProfessor + "&prog=" + cdProg +
                                        "&turmasFilhas=" + document.getElementById("pesTurmasFilhasFK").checked + "&cdAluno=" + dojo.byId('cd_aluno_mat').value + "&retorno=" + document.getElementById("ckRetornoCad").checked + "&cd_escola_combo_fk=0",
                handleAs: "json",
                preventCache: true,
                headers: { "Accept": "application/json", "Authorization": Token() }
            }), dojo.store.Memory({}));
        var dataStore = new dojo.data.ObjectStore({ objectStore: myStore });
        var grid = dijit.byId("gridPesquisaTurmaFK");
        grid.itensSelecionados = [];

        grid.setStore(dataStore);
        if (dijit.byId("tipoTurmaFK").get('value') == PPT) {
            grid.layout.setColumnVisibility(2, true)
            grid.layout.setColumnVisibility(3, false)
            grid.turmasFilhas = true;
        }
        else {
            grid.layout.setColumnVisibility(2, false)
            grid.layout.setColumnVisibility(3, true)
            grid.turmasFilhas = false;
        }

        //}

        dojo.byId("legendTurmaFK").style.visibility = 'visible';
        // grid.update();
    } catch (e) {
        postGerarLog(e);
    }
}

function deletarItemSelecionadoTurmaGrid(Memory, ObjectStore, nomeId, grid) {
    try {
        grid.store.save();
        var dados = grid._by_idx;

        if (!hasValue(grid.itensSelecionados) || grid.itensSelecionados.length <= 0) {
            caixaDialogo(DIALOGO_AVISO, 'Selecione algum registro para excluir.', null);
            return false;
        }
        else if (grid.itensSelecionados.length > 1) {
            caixaDialogo(DIALOGO_ERRO, 'Selecione apenas um registro para excluir.', null);
            return false;
        }
        else {
            // Verifica se os itens selecionados estão na lista e remove com busca binária (O(log n)):

  
            var turmaRemover = grid.store.objectStore.data.map(function (item, index, array) {
                return item.cd_turma;
            }).indexOf(grid.itensSelecionados[0].cd_turma);

            if (turmaRemover >= 0) {
                var posicaoTurmaRemover = turmaRemover;
                // Verifica se os itens selecionados estão na lista e remove com busca binária (O(log n)):
                if (hasValue(grid.itensSelecionados))
                {
                    //if (binaryObjSearch(grid.itensSelecionados, nomeId, eval('dados[i].' + nomeId)) != null) {
                    if (grid.store.objectStore.data[posicaoTurmaRemover].cd_situacao_aluno_turma === 9) {
                            grid.store.objectStore.data.splice(posicaoTurmaRemover, 1); // Remove o item do array
                            grid.itensSelecionados = new Array();
                            var dataStore = new ObjectStore({ objectStore: new Memory({ data: grid.store.objectStore.data }) });
                            grid.setStore(dataStore);
                            grid.update();
                            if ((hasValue(grid) &&
                                    hasValue(grid.store) &&
                                    hasValue(grid.store.objectStore) &&
                                    hasValue(grid.store.objectStore.data.length === 0)) &&
                                verificaMatriculaNormal()) {
                                dijit.byId("btnAddTurma").set("disabled", false);
                            } else {
                                dijit.byId("btnAddTurma").set("disabled", true);
                            }


                            dijit.byId("ckRetornoCad").set("disabled", false);


                        } else {

                            caixaDialogo(DIALOGO_AVISO, 'Não é possível excluir a turma, pois existe contrato.', null);
                        }
                    //}
                }
            }
            dijit.byId('valorCurso').set('disabled', false);
        }
        hideTagMatriculaTurma(grid);
        //clearTagMatriculaSemTurma();
    } catch (e) {
        postGerarLog(e);
    }
}


function incluirTurmaItemSelecionadoCursoGrid(Memory, ObjectStore, nomeId, grid) {
    try {
        grid.store.save();
        var dados = grid._by_idx;

        if (!hasValue(grid.itensSelecionados) || grid.itensSelecionados.length <= 0) {
            caixaDialogo(DIALOGO_AVISO, 'Selecione algum curso registro para incluir uma turma.', null);
            return false;
        }
        else if (grid.itensSelecionados.length > 1) {
            caixaDialogo(DIALOGO_ERRO, 'Selecione apenas um curso para incluir uma turma.', null);
            return false;
        }
        else {

            if (!hasValue(dijit.byId("gridPesquisaTurmaFK"), true)) {
                dojo.byId("idOrigemCadastro").value = TELAMATRICULA;
                montarGridPesquisaTurmaFK(function () {
                    funcaoFKTurma();
                    dijit.byId("pesAlunoTurmaFK").on("click", function (e) {
                        if (!hasValue(dijit.byId("gridPesquisaAluno"))) {
                            montarGridPesquisaAluno(false, function () {
                                abrirAlunoFKTurmaFK(true);
                            });
                        }
                        else
                            abrirAlunoFKTurmaFK(true);
                    });
                });
            } else
                funcaoFKTurma();
        }
        
    } catch (e) {
        postGerarLog(e);
    }
}

function gerarVendaItemSelecionadoCursoGrid(Memory, ObjectStore, nomeId, grid, idFutura) {
    try {
        if (!hasValue(grid.itensSelecionados) || grid.itensSelecionados.length <= 0) {
            caixaDialogo(DIALOGO_AVISO, 'Selecione algum curso registro para gerar Venda.', null);
            return false;
        }
        else if (grid.itensSelecionados.length > 1) {
            caixaDialogo(DIALOGO_ERRO, 'Selecione apenas um curso para gerar Venda.', null);
            return false;
        }
        else
            if (!hasValue(dojo.byId('cd_contrato').value) || !hasValue(dijit.byId('cd_curso_atual').value) || dojo.byId('cd_contrato').value == "0") {
                caixaDialogo(DIALOGO_AVISO, 'A matrícula deve estar salva para usar esta opção.', null);
                return false;
            }
            else
                if (dijit.byId('gridTurmaMat') != null && dijit.byId('gridTurmaMat').store.objectStore != null && dijit.byId('gridTurmaMat').store.objectStore.data.length > 0 && idFutura){
                    for (var i = 0; i < dijit.byId('gridTurmaMat').store.objectStore.data.length; i++) {
                        if (grid.itensSelecionados[0].cd_curso == dijit.byId('gridTurmaMat').store.objectStore.data[i].cd_curso) {
                            caixaDialogo(DIALOGO_AVISO, 'Opção disponível apenas para cursos ainda não vinculados à Turmas', null);
                            return false;
                        }
                    }
                }
                showCarregando();
                dojo.xhr.post({
                    url: Endereco() + "/api/secretaria/postGerarVenda",
                    handleAs: "json",
                    preventCache: true,
                    headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                    postData: JSON.stringify({
                        cd_contrato: grid.itensSelecionados[0].cd_contrato,
                        cd_curso_atual: grid.itensSelecionados[0].cd_curso,
                        id_venda_futura: idFutura
                    })
                }).then(function (data) {
                    hideCarregando();
                    data = jQuery.parseJSON(data);
                    if (hasValue(data)) {
                        dijit.byId("cd_produto_atual").set("disabled", true);
                        dijit.byId("cd_regime_atual").set("disabled", true);
                        dijit.byId("cd_curso_atual").set("disabled", true);
                        caixaDialogo(DIALOGO_AVISO, data, null);
                    }

                    }, function (error) {
                    hideCarregando();
                    haErro = jQuery.parseJSON(error.response.data);
                    if (hasValue(haErro.erro) || !hasValue(haErro.retorno)) {
                        if (hasValue(haErro.MensagensWeb)) {
                            var mensagem = haErro.MensagensWeb[0].mensagem.indexOf('||') > 0 ? haErro.MensagensWeb[0].mensagem.substring(0, haErro.MensagensWeb[0].mensagem.indexOf('||')) : haErro.MensagensWeb[0].mensagem;
                            caixaDialogo(DIALOGO_ERRO, mensagem, null);
                        }
                    }
                })
    } catch (e) {
        postGerarLog(e);
    }
}

function gerarVendaContrato(Memory, ObjectStore, idFutura) {
    try {
        var grid = dijit.byId("gridTurmaMat");
        if (!verificaMatriculaNormal()) {
            caixaDialogo(DIALOGO_AVISO, 'Opção disponivel apenas para matriculas normais. Use a ação relacionada da grade de cursos.', null);
            return false;
        }
        else
            if (!hasValue(dojo.byId('cd_contrato').value) || !hasValue(dijit.byId('cd_curso_atual').value) || dojo.byId('cd_contrato').value == "0") {
                caixaDialogo(DIALOGO_AVISO, 'A matrícula deve estar salva para usar esta opção.', null);
                return false;
            }
            else 
                if (grid != null && grid.store.objectStore != null && grid.store.objectStore.data.length > 0 && idFutura) {
                    caixaDialogo(DIALOGO_AVISO, 'Opção disponível apenas para contratos sem Turma', null);
                    return false;
                }
                else {
                    showCarregando();
                    dojo.xhr.post({
                        url: Endereco() + "/api/secretaria/PostGerarVenda",
                        handleAs: "json",
                        preventCache: true,
                        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                        postData: JSON.stringify({
                            cd_contrato: dojo.byId('cd_contrato').value,
                            cd_curso_atual: dijit.byId('cd_curso_atual').value,
                            id_venda_futura : idFutura
                        })
                    }).then(function (data) {
                        hideCarregando();
                        data = jQuery.parseJSON(data);
                        if (hasValue(data)) {
                            dijit.byId("cd_produto_atual").set("disabled", true);
                            dijit.byId("cd_regime_atual").set("disabled", true);
                            dijit.byId("cd_curso_atual").set("disabled", true);
                            caixaDialogo(DIALOGO_AVISO, data, null);
                        }

                    }, function (error) {
                        hideCarregando();
                        haErro = jQuery.parseJSON(error.response.data);
                        if (hasValue(haErro.erro) || !hasValue(haErro.retorno))
                            if (hasValue(haErro.MensagensWeb)) {
                                var mensagem = haErro.MensagensWeb[0].mensagem.indexOf('||') > 0 ? haErro.MensagensWeb[0].mensagem.substring(0, haErro.MensagensWeb[0].mensagem.indexOf('||')) : haErro.MensagensWeb[0].mensagem;
                                caixaDialogo(DIALOGO_ERRO, mensagem, null);
                            }
                    })
                }

    } catch (e) {
      
        postGerarLog(e);
    }
}

function vincularVendaMaterial(Memory, ObjectStore, xhr, ref) {
    try {
        var grid = dijit.byId("gridTurmaMat");
        if (!hasValue(grid.itensSelecionados) || grid.itensSelecionados.length <= 0) {
            caixaDialogo(DIALOGO_AVISO, 'Selecione alguma turma para vincular a venda de material.', null);
            return false;
        }
        else if (grid.itensSelecionados.length > 1) {
            caixaDialogo(DIALOGO_ERRO, 'Selecione apenas uma turma para vincular a venda de material.', null);
            return false;
        }
        else if (!hasValue(dojo.byId('cd_contrato').value) || !hasValue(dijit.byId('cd_curso_atual').value) || dojo.byId('cd_contrato').value == "0") {
            caixaDialogo(DIALOGO_AVISO, 'A matricula deve estar salva para usar esta opção.', null);
            return false;
        }
        if (grid.itensSelecionados[0].cd_curso == null) {
            caixaDialogo(DIALOGO_ERRO, 'Opção disponível apenas para turmas regulares ou personalizadas filhas.', null);
            return false;
        }
        else {
            showCarregando();
            var contrato = montarContrato();
            contrato.cd_curso_atual = grid.itensSelecionados[0].cd_curso;
            xhr.post({
                url: Endereco() + "/api/escola/postValidaMatriculaHasNFMaterial",
                handleAs: "json",
                headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                postData: ref.toJson(contrato)
            }).then(function (data) {
                try {
                    hideCarregando();
                    if (hasValue(data) && hasValue(data['retorno'] && data.retorno.status == true)) {
                        caixaDialogo(DIALOGO_ERRO, msgErroMatriculaJaPossuiVendaMaterial, null);
                    } else {
                        dojo.byId("cd_nfDev").value = 0;
                        dojo.byId("id_tipo_movimento").value = 0;
                        dijit.byId("tpNfDev").set("value", "");
                        dijit.byId('limparNFDev').set("disabled", true);
                        dojo.byId("id_tipo_movimento").value = 0;


                        dijit.byId('dialogVincularMaterial').show();
                    }

                }
                catch (e) {
                    hideCarregando();
                    postGerarLog(e);
                }
            },
                function (error) {
                    hideCarregando();
                apresentaMensagem('apresentadorMensagemMat', error);
            });
            
        }

    } catch (e) {
        postGerarLog(e);
    }
}

function postVincularMaterial(Memory, ObjectStore) {
    try {
        var grid = dijit.byId("gridTurmaMat");
        if (!hasValue(grid.itensSelecionados) || grid.itensSelecionados.length <= 0) {
            caixaDialogo(DIALOGO_AVISO, 'Selecione alguma turma para vincular a venda de material.', null);
            return false;
        }
        else if (grid.itensSelecionados.length > 1) {
            caixaDialogo(DIALOGO_ERRO, 'Selecione apenas uma turma para vincular a venda de material.', null);
            return false;
        } else if (dijit.byId("tpNfDev") != null && dijit.byId("tpNfDev") != undefined && !hasValue(dijit.byId("tpNfDev").value)) {
            caixaDialogo(DIALOGO_ERRO, 'Selecione uma nota para vincular a venda de material.', null);
            return false;
        }
        else {

            dojo.xhr.post({
                url: Endereco() + "/api/secretaria/postVincularVendaMaterial",
                handleAs: "json",
                preventCache: true,
                headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                postData: JSON.stringify({
                    cd_movimento: dojo.byId("cd_nfDev").value,
                    cd_turma_origem: grid.itensSelecionados[0].cd_turma,
                    cd_contrato: dojo.byId('cd_contrato').value
                })
            }).then(function(data) {
                    data = jQuery.parseJSON(data);
                if (hasValue(data)) {
                    dijit.byId("cd_produto_atual").set("disabled", true);
                    dijit.byId("cd_regime_atual").set("disabled", true);
                    dijit.byId("cd_curso_atual").set("disabled", true);
                    caixaDialogo(DIALOGO_AVISO, data, null);
                }

                },
                function(error) {
                    haErro = jQuery.parseJSON(error.response.data);
                    if (hasValue(haErro.erro) || !hasValue(haErro.retorno))
                        if (hasValue(haErro.MensagensWeb)) {
                            var mensagem = haErro.MensagensWeb[0].mensagem.indexOf('||') > 0
                                ? haErro.MensagensWeb[0].mensagem.substring(0,
                                    haErro.MensagensWeb[0].mensagem.indexOf('||'))
                                : haErro.MensagensWeb[0].mensagem;
                            caixaDialogo(DIALOGO_ERRO, mensagem, null);
                        }
                });
        }

    } catch (e) {
        postGerarLog(e);
    }
}

function hideTagMatriculaTurma(obj) {
    try {
        if (obj != null && obj.store.objectStore != null && obj.store.objectStore.data.length > 0){
            dojo.byId("tagSemTurma").style.display = "none";
            dojo.byId("tagTurma").style.display = "";
            }
        else{
            dojo.byId("tagSemTurma").style.display = "";
            if(obj == null)
                dojo.byId("tagTurma").style.display = "";
            else
                if (obj.store.objectStore != null && obj.store.objectStore.data.length == 0)
                   dojo.byId("tagTurma").style.display = "";

                else
                    dojo.byId("tagTurma").style.display = "none";
        }
    } catch (e) {
        postGerarLog(e);
    }
}   
//#endregion

// nova chamada para deletar procedure sp_excluir_contrato 
function DeletarMatricula(itensSelecionados) {
    try
    {
        showCarregando();     
        require(["dojo/_base/xhr", "dojox/json/ref"], function (xhr, ref) {
            var grade = true;
            if (!hasValue(itensSelecionados) || itensSelecionados.length <= 0) {
                if (dojo.byId('cd_contrato').value != 0)
                    itensSelecionados = [{
                        cd_contrato: dojo.byId("cd_contrato").value
                    }];
                grade = false;
            }
        });

        if (hasValue(itensSelecionados) && itensSelecionados["length"] != undefined && itensSelecionados["length"] != null) {
	        for (var i = 0; i < itensSelecionados.length; i++) {
		        var cd_contrato = itensSelecionados[i].cd_contrato;
		        var cd_usuario = "0";
		        var fuso = "0";
		        dojo.xhr.post({
			        url: Endereco() + "/api/secretaria/postDeleteMatricula",
			        handleAs: "json",
			        preventCache: true,
			        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
			        postData: JSON.stringify({
				        cd_contrato: cd_contrato,
				        cd_usuario: cd_usuario,
				        fuso: fuso
			        })
		        }).then(function (data) {
				        data = jQuery.parseJSON(data);
				        if (data == "0") {
					        hideCarregando();
					        caixaDialogo(DIALOGO_AVISO, msgMatriculaExcluida, null);  // "Matrícula excluída com sucesso."

					        if (hasValue(itensSelecionados) && itensSelecionados.length > 0)
						        for (var r = itensSelecionados.length - 1; r >= 0; r--) {
							        removeObjSort(dijit.byId('gridMatricula').itensSelecionados, "cd_contrato", itensSelecionados[r].cd_contrato);
							        pesquisarMatricula(true);
						        }

				        } else if (hasValue(data.erro) || !hasValue(data.retorno)) {
					        hideCarregando();
					        caixaDialogo(DIALOGO_AVISO, data, null);
				        }
			        }, function (error) {
				        hideCarregando();
				        caixaDialogo(DIALOGO_AVISO, data, null);
			        }
		        )
	        };
        }
        
        }
    catch (e) {
        postGerarLog(e);
    }
}

////#region Métodos para crud 
//function DeletarMatricula(itensSelecionados) {
//    try {
//        require(["dojo/_base/xhr", "dojox/json/ref"], function (xhr, ref) {
//            var grade = true;
//            if (!hasValue(itensSelecionados) || itensSelecionados.length <= 0) {
//                if (dojo.byId('cd_contrato').value != 0)
//                    itensSelecionados = [{
//                        cd_contrato: dojo.byId("cd_contrato").value,
//                        cd_aluno: dojo.byId("cd_aluno_mat").value,
//                        nm_contrato: dojo.byId("nm_contrato").value
//                    }];
//                grade = false;
//            }
//            xhr.post({
//                url: Endereco() + "/api/secretaria/postDeleteMatricula",
//                headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
//                postData: ref.toJson(itensSelecionados)
//            }).then(function (data) {
//                try {
//                    var todos = dojo.byId("todosItens");
//                    apresentaMensagem('apresentadorMensagem', data);
//                    dijit.byId("cadMatricula").hide();
//                    // Remove o item dos itens selecionados:
//                    if (hasValue(itensSelecionados) && itensSelecionados.length > 0)
//                        for (var r = itensSelecionados.length - 1; r >= 0; r--) {
//                            if (hasValue(itensSelecionados[r]) && hasValue(dijit.byId('gridMatricula').itensSelecionados))
//                                removeObjSort(dijit.byId('gridMatricula').itensSelecionados, "cd_contrato", itensSelecionados[r].cd_contrato);
//                        }
//                    pesquisarMatricula(true);
//                    // Habilita os botões de pesquisar e relatório, pois estão dependentes dos filtros de pesquisa de itens não selecionados:
//                    dijit.byId("pesquisarMatricula").set('disabled', false);
//                    dijit.byId("relatorioMatricula").set('disabled', false);

//                    if (hasValue(todos))
//                        todos.innerHTML = "Todos Itens";
//                } catch (e) {
//                    postGerarLog(e);
//                }
//            },
//            function (error) {
//                if (!grade)
//                    apresentaMensagem('apresentadorMensagemMat', error);
//                else
//                    apresentaMensagem('apresentadorMensagem', error);
//            });
//        })
//    } catch (e) {
//        postGerarLog(e);
//    }
//}

function limparCadMatricula(xhr, ObjectStore, Memory, novo) {
    try {
        onChangeActive(false);
        setarTabCadMatricula(false);
        gerar_titulo = false;
        dijit.byId('idCheque').set('disabled', true);
        dijit.byId('valorCurso').set('disabled', false);
        dijit.byId('btnaddTitulo').set('disabled', true);
        //Guarda o atendente para que depois de limpo o form set o valor novamente
        var atentedente = dijit.byId('atendente').get('value');

        var gridTurma = dijit.byId("gridTurmaMat");
        var gridDesconto = dijit.byId("gridDesconto");
        var gridDescontoAdt = dijit.byId('gridDescontoAdt');
        var gridTitulo = dijit.byId("gridTitulo");
        var gridBaixa = dijit.byId("gridBaixa");
        var gridAditamento = dijit.byId('gridAditamento');
        var gridDataCurso = dijit.byId("gridDataCurso");

        if (hasValue(dijit.byId("uploaderContratoDigitalizado"))) {
            dijit.byId("uploaderContratoDigitalizado")._files = [];
        }

        dijit.byId("btnAddTurma").set("disabled", true);
        dijit.byId("ckRetornoCad").set("disabled", false);
        dijit.byId("limparEmailMarketing").set('disabled', true);
        dijit.byId("cadResponsavel").set("disabled", true);
        dijit.byId("fkEmailMarketing").set('disabled', false);
        //if (novo)
            //dataDiaMat(xhr);
        dojo.byId("cd_contrato").value = 0;
        dojo.byId("cd_aluno_mat").value = 0;
        dojo.byId("cd_pessoa_aluno_mat").value = 0;

        clearForm("formPrincipalMat");
        clearForm("formTurmaMat");
        clearForm("formSemTurmaMat");
        clearForm("formNegociacaoMat");
        clearForm("formOpcoesPgtoMat");
        clearForm("formValoresPgtoMat");
        clearForm("formDescontosMat");
        clearForm("formChequeMat");
        clearForm("formAditamentoMat");
        clearForm("formTituloMat");
        clearForm("formBaixaMat");
        clearForm("FormObsAditamento");
        dijit.byId("cd_produto_atual").reset();
        dijit.byId("cd_curso_atual").reset();
        dijit.byId("cd_duracao_atual").reset();
        dijit.byId("cd_regime_atual").reset();
        dijit.byId("tipoMatricula").reset();
        dijit.byId("dtaInicioMat").reset();
        dijit.byId("dtaFinalMat").reset();
        dijit.byId("anoEscolar").reset();
        dijit.byId("dtInicioAdto").reset();
        dijit.byId("dtAdtVencInicial").reset();
        dijit.byId("VctoAdt").reset();
        dijit.byId("tipoPagto").reset();
        dijit.byId("tipoDataContratoAdto").reset();
        dijit.byId("tipoContratoAdto").reset();
        dijit.byId("tipoAditamento").reset();
        dijit.byId("descObsAditamento").reset();
        dijit.byId("dtInicioAdto").set("value", null);
        dijit.byId("dtAdtVencInicial").set("value", null);
        dijit.byId("VctoAdt").set("value", null);
        dijit.byId("edValorAulaAdto").reset();
        dijit.byId("banco").reset();
        dijit.byId("ValorParcAdic").oldValue = 0;
        dijit.byId("NroTitAdt").oldValue = 0;
        dojo.byId("pc_bolsa_aluno").value = 0;
        dojo.byId("pc_bolsa_material_aluno").value = 0;
        dijit.byId("perc_bolsa").old_value = 0;
        dijit.byId("vl_pre_matricula").reset();
        dijit.byId("pc_bolsa_material_aluno").old_value = 0;
        dijit.byId("pc_bolsa_material_aluno").value = 0;
        dijit.byId("dt_inicio_bolsa_aluno").reset();
        dojo.byId("qtd_titulos_abertos").value = 0;
        dojo.byId("edBanco").value = "";
        //TODO: DANIEL
        dijit.byId("aditivobolsaPorcentual").reset();
        dijit.byId("aditivobolsaDataComunicado").reset();
        dijit.byId("aditivobolsaDescValidade").reset();
        dijit.byId("aditivobolsaMotivoBolsa").reset();

        limparValores(true);

        clearVariablesAssitValores();

        //Taxa Matricula
        clearForm("formTaxaMatricula");
        dojo.byId("cd_taxa_matricula").value = 0;
        dojo.byId('cd_plano_contas_tx').value = 0;
        dojo.byId('cd_responsavel_tax').value = 0;
        dojo.byId("valorTaxaMatricula").old_value = 0;
        dojo.byId("numeroParcelasTaxa").old_value = 0;
        dojo.byId("tipoDocumentoTax").old_value = 0;
        dojo.byId("percentualResponsavelTax").old_value = '100';


        dijit.byId("desconto").old_value = 0;
        dijit.byId('desconto').set('value', 0);

        dijit.byId('valorDesconto').set('value', 0);
        dijit.byId("valorDesconto").old_value = 0;

        dijit.byId("tipoDocumento").reset();
        dojo.byId("tipoDocumento").old_value = 0;
        dijit.byId("tipoDocumentoTax").reset();
        dijit.byId("vencimentoTaxa").reset();
        dojo.byId('vencimentoTaxa').value = "";
        dojo.byId("vencimentoTaxa").old_value = 0;

        //Habilita os botões de pesquisa do plano de contas.
        if (!dijit.byId("fkPlanoContasMat").sugestaoAtiva)
            dijit.byId("fkPlanoContasMat").set("disabled", false);
        if (!dijit.byId("fkTaxaMatricula").sugestaoAtiva)
            dijit.byId("fkTaxaMatricula").set("disabled", false);
        if (!dijit.byId("fkTaxaMatricula").sugestaoAtiva)
            dijit.byId("limparPlanoContasMat").set("disabled", true);
        dijit.byId("cd_curso_atual").set("disabled", false);


        dojo.byId('descontoReais').value = 0;
        dijit.byId("desconto").set("open", true);
        dijit.byId('tagDescontos').set('open', false);
        dijit.byId('idTagAditivoBolsa').set('open', false);
        dojo.byId("idTagAdiciParcela").style.display = "none";
        //dojo.byId("idTagMaterialContrato").style.display = "none";
        dojo.byId("idTagAditivoBolsa").style.display = "none";
        dojo.byId("tagDescontos").style.display = "none";

        if (hasValue(gridTurma)) {
            gridTurma.setStore(dojo.data.ObjectStore({ objectStore: new Memory({ data: null }) }));
            gridTurma.itensSelecionados = [];
        }
        if (hasValue(gridDesconto)) {
            gridDesconto.setStore(dojo.data.ObjectStore({ objectStore: new Memory({ data: null }) }));
            gridDesconto.itensSelecionados = [];
            gridDesconto.listaTitulosDescontos = [];
        }
        if (hasValue(gridDescontoAdt)) {
            gridDescontoAdt.setStore(dojo.data.ObjectStore({ objectStore: new Memory({ data: null }) }));
            gridDescontoAdt.itensSelecionados = [];
            gridDescontoAdt.cloneItensDesconto = [];
            gridDescontoAdt.listaTodosTitulos = [];
        }
        if (hasValue(gridTitulo)) {
            gridTitulo.setStore(dojo.data.ObjectStore({ objectStore: new Memory({ data: null }) }));
            gridTitulo.itensSelecionados = [];
        }
        if (hasValue(gridBaixa)) {
            gridBaixa.setStore(dojo.data.ObjectStore({ objectStore: new Memory({ data: null }) }));
            gridBaixa.itensSelecionados = [];
        }
        if (hasValue(gridAditamento)) {
            gridAditamento.setStore(dojo.data.ObjectStore({ objectStore: new Memory({ data: null }) }));
            gridAditamento.itensSelecionados = [];
        }


        if (hasValue(gridDataCurso)) {
            gridDataCurso.setStore(dojo.data.ObjectStore({ objectStore: new Memory({ data: null }) }));
            gridDataCurso.itensSelecionados = [];
        }


        if (hasValue(dijit.byId('itensDC')) && !hasValue(gridDataCurso.store.objectStore.data)) {
            dijit.byId('itensDC').set('disabled', false);
        }

        dijit.byId('atendente').set('value', atentedente);
        dijit.byId("tagTurma").set("open", false);
        dijit.byId("tagSemTurma").set("open", false);
        dijit.byId("tagNegociacao").set("open", false);
        dijit.byId("editContrato").value = null;
        dijit.byId("tipoContratoAdto").aditamento = false;
        if (dojo.byId('tdVendaPacoteLb').style.display == '')
            dijit.byId('id_venda_pacote').set('checked', true);
        else
            dijit.byId('id_venda_pacote').set('checked', false);
        ALTEROU_VENDA_PACOTE = false;
        limparNewRelacMat();
        changeFieldsMensalidade(false);
        marcarMatriculaComLayoutAditamento(null, null, null);
        onChangeActive(true);
    } catch (e) {
        postGerarLog(e);
    }
}

function limparTitulos() {
    try {
        //  clearForm("formTitulo");
        dojo.byId("cd_titulo").value = 0;
        dojo.byId("cd_aluno_tit").value = 0;
        dojo.byId("cd_pessoa_responsavelTit").value = 0;
        dojo.byId("cd_bancoTitMat").value = 0;
        dijit.byId("valorMaterialTitulo").set("value", 0);
        dijit.byId("dtaEmisTit").reset();
        dijit.byId("dtaVencTit").reset();
        dijit.byId('bancoTitMat').reset();
    } catch (e) {
        postGerarLog(e);
    }
}

function IncluirMatricula() {
    try {
        showCarregando();
        VerificarValores();
        ValidarAditamento();

        require([
            "dojo/store/Memory",
            "dojo/data/ObjectStore",
            "dojo/_base/xhr",
            "dojox/json/ref"], function (Memory, ObjectStore, xhr, ref) {

            criarAtualizarTitulo(Memory, ObjectStore, xhr, ref, function () {
                //Monta contrato sem arquivo Digitalizado
                var contrato = montarContrato();

                xhr.post({
                    url: Endereco() + "/api/escola/postMatricula",
                    handleAs: "json",
                    headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                    postData: ref.toJson(contrato)
                }).then(function (data) {
                    try {
                        if (!hasValue(jQuery.parseJSON(data).erro) && hasValue(jQuery.parseJSON(data).retorno)) {
                            var itemAlterado = jQuery.parseJSON(data).retorno;
                            var gridName = 'gridMatricula';
                            var grid = dijit.byId(gridName);
                            dojo.byId("descApresMsg").value = !hasValue(dojo.byId("descApresMsg").value) ? 'apresentadorMensagem' : dojo.byId("descApresMsg").value;
                            apresentaMensagem(dojo.byId("descApresMsg").value, data);
                            retornoIncluirAlterar(gridName, itemAlterado);

                            //Tela de aluno
                            if (hasValue(dijit.byId("gridAluno")) && dijit.byId("gridAluno")._by_idx.length > 0) {
                                for (var i = 0; i <= dijit.byId("gridAluno")._by_idx.length; i++)
                                    if (hasValue(dijit.byId("gridAluno")._by_idx[i]) && hasValue(dijit.byId("gridAluno")._by_idx[i].item) && dijit.byId("gridAluno")._by_idx[i].item.cd_aluno == dojo.byId('cd_aluno_mat').value) {
                                        dijit.byId("gridAluno")._by_idx[i].item.cd_contrato = dojo.byId("cd_contrato").value;
                                        if (itemAlterado.AlunoTurma.length > 0)
                                            for (var j = 0; j <= itemAlterado.AlunoTurma.length; j++)
                                                if (itemAlterado.AlunoTurma[j].cd_aluno == parseInt(dojo.byId('cd_aluno_mat').value)) {
                                                    dijit.byId("gridAluno")._by_idx[i].item.cd_aluno_turma = itemAlterado.AlunoTurma[j].cd_aluno_turma;
                                                    break;
                                                }
                                        break;
                                    }
                                dijit.byId("gridAluno").update();
                            }
                            if (hasValue(itemAlterado.msgProcedureGerarNota && itemAlterado.msgProcedureGerarNota != ""))
                                caixaDialogo(DIALOGO_AVISO, itemAlterado.msgProcedureGerarNota, null);

                            hideCarregando();
                            apresentaMensagem('apresentadorMensagemMat', data);
                        } else {
                            hideCarregando();
                            apresentaMensagem('apresentadorMensagemMat', data);
                        }
                    } catch (e) {
                        hideCarregando();
                        postGerarLog(e);
                    }
                },
                function (error) {
                    hideCarregando();
                    apresentaMensagem('apresentadorMensagemMat', error.response.data);
                });

            }, SALVARMATRICULA);
    });
    } catch (e) {
        hideCarregando();
        postGerarLog(e);
    }
}

function alterarMatricula() {
    try {
        //showCarregando();
        if (dijit.byId("ckManual").checked == true && dijit.byId('tipoContratoAdto').aditamento == true) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroSalvarContratoComAditamentoAjusteManualMarcado);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            hideCarregando();
            return false;
        }

        VerificarValores();

        ValidarAditamento();

        //Verifica se a data inicial é menor ou igual a data final:
        require([
            "dojo/ready",
            "dojo/store/Memory",
            "dojo/data/ObjectStore",
            "dojo/_base/xhr",
            "dojox/json/ref"], function (ready, Memory, ObjectStore, xhr, ref) {

                if (dijit.byId("ckManual").checked)
                    gerar_titulo = true;

                var dadosTitulos = dijit.byId("gridTitulo").store.objectStore.data;
                if (!gerar_titulo && (dadosTitulos == null || dadosTitulos.length <= 0) && parametro_gerar_financeiro) {
                    montarPesqTitulo(parseInt(dojo.byId('cd_contrato').value), true, null);
                }

                if (gerar_titulo) {
                    criarAtualizarTitulo(Memory, ObjectStore, xhr, ref, function () {
                        salvarAlteracao(xhr, ref);
                    }, SALVARMATRICULA);
                }else {
                    var files = dijit.byId("uploaderContratoDigitalizado")._files;
                    if (ALTEROU_IMAGEM_DIGITALIZADA == true && hasValue(files) && files.length > 0) {
                        atualizarDocumentoDigitalizadoEdicaoMatricula(xhr, ref, atualizarPacoteCerttificado);
                    }else
                        if (ALTEROU_VENDA_PACOTE || ALTEROU_LIBERAR_CERTIFICADO || ALTEROU_LIBERAR_CERTIFICADO_C) 
                            atualizarPacoteCerttificado(xhr, ref);
                        else
                            salvarAlteracao(xhr, ref);
                }
               // hideCarregando();
            });

        //dijit.byId('btnNovoAdto').set("disabled", false);
    } catch (e) {
        hideCarregando();
        postGerarLog(e);
    }
}

function salvarAlteracao(xhr, ref) {
    showCarregando();
    try {
        INCLUIR = false;
        EDITAR = false;
        var files = dijit.byId("uploaderContratoDigitalizado")._files;
        if (hasValue(files) && files.length > 0) {
            if (window.FormData !== undefined) {
                var data = new FormData();
                for (i = 0; i < files.length; i++) {
                    data.append("file" + i, files[i]);
                }
                $.ajax({
                    type: "POST",
                    url: Endereco() + "/secretaria/UploadDocumentoDigitalizado",
                    ansy: false,
                    headers: { Authorization: Token() },
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (results) {
                        try {
                            if (hasValue(results) && hasValue(results.indexOf) && results.indexOf('<') >= 0) {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgSessaoExpirada3);
                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                return false;
                            }
                            if (hasValue(results) && !hasValue(results.erro)) {
                                console.log("ok");
                                //if (tipoOperacao == CADASTRO)
                                //    salvarNomeContrato(xhr, results);
                                //else
                                //    alterarNomeContrato(xhr, results);
                                var contrato = new montarContrato(results);
                                xhr.post({
                                    url: Endereco() + "/api/escola/postAlterarMatricula",
                                    handleAs: "json",
                                    headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                                    postData: ref.toJson(contrato)
                                }).then(function (data) {
                                    try {
                                        var dataAlterado = jQuery.parseJSON(data);
                                        if (dataAlterado != null && hasValue(dataAlterado) && !hasValue(dataAlterado.erro)) {
                                            var itemAlterado = dataAlterado.retorno;
                                            var gridName = 'gridMatricula';
                                            var grid = dijit.byId(gridName);
                                            dojo.byId("descApresMsg").value = !hasValue(dojo.byId("descApresMsg").value) ? 'apresentadorMensagem' : dojo.byId("descApresMsg").value;
                                            apresentaMensagem(dojo.byId("descApresMsg").value, data);
                                            retornoIncluirAlterar(gridName,itemAlterado);
                                            if (hasValue(dijit.byId("gridAlunos")) && dijit.byId("gridAlunos").listaCompletaAlunos.length > 0) 
                                                dijit.byId("gridAlunos").setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: dijit.byId("gridAlunos").listaCompletaAlunos, idProperty: "cd_aluno" }) }));
                                            // Atualizar GridAlunosPPT
                                            if (hasValue(dijit.byId("gridAlunosPPT"))) {
                                                dijit.byId("gridAlunosPPT").setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: dijit.byId("gridAlunosPPT").listaCompletaAlunos, idProperty: "cd_aluno" }) }));
                                            }
                                            if (hasValue(itemAlterado.msgProcedureGerarNota && itemAlterado.msgProcedureGerarNota != ""))
                                                caixaDialogo(DIALOGO_AVISO, itemAlterado.msgProcedureGerarNota, null);
                                            hideCarregando();
                                        } else {
                                            apresentaMensagem('apresentadorMensagemMat', data);
                                            hideCarregando();
                                        }
                                    } catch (e) {
                                        postGerarLog(e);
                                    }
                                },
                                function (error) {
                                    hideCarregando();
                                    apresentaMensagem('apresentadorMensagemMat', error);
                                });

                            } else
                                hideCarregando();
                                apresentaMensagem('apresentadorMensagemMat', results);
                        }
                        catch (e) {
                            hideCarregando();
                            postGerarLog(e);
                        }
                    },
                    error: function (error) {
                        hideCarregando();
                        apresentaMensagem('apresentadorMensagemMat', error);
                        return false;
                    }
                });
            } else {
                hideCarregando();
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_INFORMACAO, "Impossível fazer upload de arquivo.");
                apresentaMensagem('apresentadorMensagemNoCont', mensagensWeb);
            }
        } else {
            //if (tipoOperacao == CADASTRO)
            //    salvarNomeContrato(xhr, "");
            //else
            //    alterarNomeContrato(xhr, "");
            var contrato = new montarContrato();
            xhr.post({
                url: Endereco() + "/api/escola/postAlterarMatricula",
                handleAs: "json",
                headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                postData: ref.toJson(contrato)
            }).then(function (data) {
                try {
                    var dataAlterado = jQuery.parseJSON(data);
                    if (dataAlterado != null && hasValue(dataAlterado) && !hasValue(dataAlterado.erro)) {
                        var itemAlterado = dataAlterado.retorno;
                        var gridName = 'gridMatricula';
                        var grid = dijit.byId(gridName);
                        dojo.byId("descApresMsg").value = !hasValue(dojo.byId("descApresMsg").value) ? 'apresentadorMensagem' : dojo.byId("descApresMsg").value;
                        apresentaMensagem(dojo.byId("descApresMsg").value, data);
                        retornoIncluirAlterar(gridName, itemAlterado);
                        if (hasValue(dijit.byId("gridAlunos")) && dijit.byId("gridAlunos").listaCompletaAlunos.length > 0)
                            dijit.byId("gridAlunos").setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: dijit.byId("gridAlunos").listaCompletaAlunos, idProperty: "cd_aluno" }) }));
                        // Atualizar GridAlunosPPT
                        if (hasValue(dijit.byId("gridAlunosPPT"))) {
                            dijit.byId("gridAlunosPPT").setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: dijit.byId("gridAlunosPPT").listaCompletaAlunos, idProperty: "cd_aluno" }) }));
                        }
                        if (hasValue(itemAlterado.msgProcedureGerarNota && itemAlterado.msgProcedureGerarNota != ""))
                            caixaDialogo(DIALOGO_AVISO, itemAlterado.msgProcedureGerarNota, null);
                        hideCarregando();
                    } else {
                        apresentaMensagem('apresentadorMensagemMat', data);
                        hideCarregando();
                    }
                } catch (e) {
                    hideCarregando();
                    postGerarLog(e);
                }
            },
            function (error) {
                hideCarregando();
                apresentaMensagem('apresentadorMensagemMat', error);
            });
        }
    } catch (e) {
        hideCarregando();
        postGerarLog(e);
    }
}

function montarTurma() {
    try {
        var turmas = [];
        var gridTurma = dijit.byId("gridTurmaMat");

        hasValue(gridTurma) ? gridTurma.store.save() : null;
        if (hasValue(gridTurma) && hasValue(gridTurma._by_idx))
            var data = gridTurma._by_idx;
        else turmas = null;
        if (hasValue(gridTurma) && hasValue(data) && data.length > 0)
            $.each(data, function (idx, val) {
                turmas.push(val.item);
            });
        return turmas;
    } catch (e) {
        postGerarLog(e);
    }
}

function montarCheque() {
    try {
        var listaCheque = [];
        var dataCheque = {
            cd_cheque: dojo.byId("cd_cheque").value,
            cd_contrato: dojo.byId("cd_contrato").value,
            no_emitente_cheque: dojo.byId("emissorChequeName").value,
            cd_banco: dijit.byId("banco").value,
            no_agencia_cheque: dojo.byId("agencia").value,
            nm_agencia_cheque: (dojo.byId("nroAgencia").value).replace(".", ""),
            nm_digito_agencia_cheque: dojo.byId("dgAgencia").value,
            nm_conta_corrente_cheque: (dojo.byId("nroContaCorrente").value).replace(".", ""),
            nm_digito_cc_cheque: dojo.byId("dgContaCorrente").value,
            nm_primeiro_cheque: (dojo.byId("nroPrimeiroCheque").value).replace(".", "")
        }

        listaCheque.push(dataCheque);
        return listaCheque;
    } catch (e) {
        postGerarLog(e);
    }
}

function montarTituloTaxa() {
    try {
        //var dataTaxa = new Array();
        var titulosTaxa = new Array();
        var dadosTitulo = dijit.byId('gridTitulo').store.objectStore.data;
        $.each(dadosTitulo,
            function (idx, val) {
                var dataTaxa = {
                    nm_parcela_titulo: val.nm_parcela_titulo,
                    dc_tipo_titulo: val.dc_tipo_titulo,
                    vl_taxa_cartao: val.vl_taxa_cartao,
                    pc_taxa_cartao: val.pc_taxa_cartao
                }
                titulosTaxa.push(dataTaxa);
            }
        );
        return titulosTaxa;
    } catch (e) {
        postGerarLog(e);
    }
}

function montarTitulo(tipoRetorno) {
    try {
        var titulos = new Array();
        var dia = dojo.byId("dia").value > 9 ? dojo.byId("dia").value : "0" + dojo.byId("dia").value;
        var mes = dojo.byId("mes").value > 9 ? dojo.byId("mes").value : "0" + dojo.byId("mes").value;
        var dataVencimentoMensalidade = new Date(dojo.byId("ano").value, (dojo.byId("mes").value - 1), dojo.byId("dia").value);

        //Verificando ultimo dia do mês
        var ultimaDataMês = new Date(dojo.byId("ano").value, (dojo.byId("mes").value), 0);
        var ultimaDiaMês = (new Date(dojo.byId("ano").value, (dojo.byId("mes").value), 0)).getDate();
        if ((ultimaDataMês.getMonth() + 1) != (dataVencimentoMensalidade.getMonth() + 1)) {
            var dataVencimentoMensalidade = new Date(dojo.byId("ano").value, (dojo.byId("mes").value - 1), ultimaDiaMês);
        }
        //Dados de Taxa de Matricula
        if (tipoRetorno == RETORNARTITULOSMATRICULA) {
            if (parseFloat(removedecimal(dojo.byId("valorTaxaMatricula").value)) > 0 && dojo.byId("numeroParcelasTaxa").value > 0 &&
                hasValue(dijit.byId("vencimentoTaxa").value) && hasValue(dojo.byId("tipoDocumentoTax").value)) {
                    var dataTituloTaxa = {
                        cd_pessoa_responsavel: dojo.byId("cd_responsavel_tax").value,
                        nomeResponsavel: dojo.byId("pessoaResponsavelTax").value,
                        nomeAluno: dojo.byId("nomeAlunoMat").value,
                        cd_pessoa_titulo: dojo.byId("cd_pessoa_aluno_mat").value,
                        dc_tipo_titulo: "TM",
                        nm_titulo: dojo.byId("nm_contrato").value,
                        cd_tipo_financeiro: dijit.byId("tipoDocumentoTax").value,
                        tipoDoc: dojo.byId("tipoDocumentoTax").value,
                        nm_parcela_titulo: dojo.byId("numeroParcelasTaxa").value,
                        dc_num_documento_titulo: dijit.byId("tipoDocumentoTax").value == CHEQUE
                            ? dojo.byId("nroPrimeiroCheque").value
                            : null,
                        dt_emissao_titulo: dojo.date.locale.parse(dojo.byId("dtaMatricula").value,
                            { formatLength: 'short', selector: 'date', locale: 'pt-br' }),
                        dt_vcto_titulo: dojo.date.locale.parse(dojo.byId("vencimentoTaxa").value,
                            { formatLength: 'short', selector: 'date', locale: 'pt-br' }),
                        vl_titulo: (parseFloat(removedecimal(dojo.byId("valorTaxaMatricula").value)) /
                            dojo.byId("numeroParcelasTaxa").value),
                        vl_saldo_titulo: (parseFloat(removedecimal(dojo.byId("valorTaxaMatricula").value)) /
                            dojo.byId("numeroParcelasTaxa").value),
                        percentualResp: parseFloat(removedecimal(dojo.byId('percentualResponsavelTax').value)),
                        id_origem_titulo: 22,
                        cd_local_movto: dijit.byId("tipoDocumentoTax").value == CARTAO ? 0 : local_movto_parametro,
                        descLocalMovto: dojo.byId("bancoTitMat").value,
                        id_status_titulo: STATUS_TITULO_ABERTO,
                        id_natureza_titulo: NATUREZA_TITULO_RECEBER,
                        dh_cadastro_titulo: dijit.byId('dtaMatricula').original_value,
                        cd_plano_conta_tit: dojo.byId('cd_plano_contas_tx').value,
                        cd_origem_titulo: dojo.byId('cd_contrato').value,
                        diaSugerido: dijit.byId("dia").value,
                        cd_aditamento: hasValue(dojo.byId("cd_aditamento").value) ? dojo.byId("cd_aditamento").value : 0
                    }
                    titulos.push(dataTituloTaxa);
                
            }
            //Dados de Mensalidade

            var nrPrimeiroChequeMens = null;
            var stringCheque = null;
            if (dijit.byId("tipoDocumento").value == CHEQUE) {
                nrPrimeiroChequeMens = dojo.byId("nroPrimeiroCheque").value;
                if (dijit.byId("tipoDocumentoTax").value == CHEQUE) {
                    if (nrPrimeiroChequeMens != null) {
                        var legDoc = nrPrimeiroChequeMens.length;
                        for (var p = 0; p <= legDoc; p++) {
                            var nrCheque = nrPrimeiroChequeMens.substring(p, nrPrimeiroChequeMens.length);
                            if (hasValue(nrCheque) && (nrCheque - parseFloat(nrCheque) >= 0)) {
                                stringCheque = parseInt(nrCheque) + 1;
                                break;
                            }
                        }
                    }

                    var qtd_numeros = nrPrimeiroChequeMens.length - (stringCheque + "").length;
                    if (qtd_numeros > 0)
                        nrPrimeiroChequeMens = nrPrimeiroChequeMens.substring(0, (nrPrimeiroChequeMens.length - (stringCheque + "").length)) + stringCheque + "";
                    else
                        nrPrimeiroChequeMens = stringCheque;
                }
            }

            if (hasValue(dojo.byId("tipoDocumento").value) &&
                ((parseFloat(removedecimal(dojo.byId("valorParcela").value)) > 0 &&
                dojo.byId("parcelas").value > 0) || dijit.byId('incorporarMaterial').checked)) {
    
                if (verificaTipoCKMatricula() === EnumTipoCKMatricula.MULTIPLA) {
                    if ((hasValue(dijit.byId("gridDataCurso")) &&
                        hasValue(dijit.byId("gridDataCurso").store) &&
                        hasValue(dijit.byId("gridDataCurso").store.objectStore) &&
                        hasValue(dijit.byId("gridDataCurso").store.objectStore.data.length == 0))) {
                        var mensagensWeb = new Array();
                        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgValidaGerarTitulosCursoGridNaoEncontrado);
                        apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                        return [];
                    }else if ((hasValue(dijit.byId("gridDataCurso")) &&
                        hasValue(dijit.byId("gridDataCurso").store) &&
                        hasValue(dijit.byId("gridDataCurso").store.objectStore) &&
                        hasValue(dijit.byId("gridDataCurso").store.objectStore.data.length > 0))) {
                        montaTitulosMEMatriculaMultipla(titulos, nrPrimeiroChequeMens != null ? nrPrimeiroChequeMens : dojo.byId("nroPrimeiroCheque").value, local_movto_parametro);
                    }
                }else if ((verificaTipoCKMatricula() === EnumTipoCKMatricula.INFORMATICA) || (verificaTipoCKMatricula() === EnumTipoCKMatricula.PROFISSIONALIZANTE)) {
                    if ((hasValue(dijit.byId("gridDataCurso")) &&
                        hasValue(dijit.byId("gridDataCurso").store) &&
                        hasValue(dijit.byId("gridDataCurso").store.objectStore) &&
                        hasValue(dijit.byId("gridDataCurso").store.objectStore.data.length == 0))) {
                        var mensagensWeb = new Array();
                        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgValidaGerarTitulosCursoGridNaoEncontrado);
                        apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                        return [];
                    } else if ((hasValue(dijit.byId("gridDataCurso")) &&
                        hasValue(dijit.byId("gridDataCurso").store) &&
                        hasValue(dijit.byId("gridDataCurso").store.objectStore) &&
                        hasValue(dijit.byId("gridDataCurso").store.objectStore.data.length > 0))) {
                        montaTitulosMEMatriculaProfissionalizanteInformatica(titulos, nrPrimeiroChequeMens != null ? nrPrimeiroChequeMens : dojo.byId("nroPrimeiroCheque").value, local_movto_parametro);
                    }
                } else {
                    var dataTituloMensalidade = {
                        cd_pessoa_responsavel: dojo.byId("cd_responsavel_mens").value,
                        nomeResponsavel: dojo.byId("pessoaResponsavel").value,
                        nomeAluno: dojo.byId("nomeAlunoMat").value,
                        cd_pessoa_titulo: dojo.byId("cd_pessoa_aluno_mat").value,
                        dc_tipo_titulo: "ME",
                        nm_titulo: dojo.byId("nm_contrato").value,
                        cd_tipo_financeiro: dijit.byId("tipoDocumento").value,
                        tipoDoc: dojo.byId("tipoDocumento").value,
                        nm_parcela_titulo: dojo.byId("parcelas").value,
                        dc_num_documento_titulo: nrPrimeiroChequeMens,
                        dt_emissao_titulo: dojo.date.locale.parse(dojo.byId("dtaMatricula").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }),
                        dt_vcto_titulo: dataVencimentoMensalidade,
                        vl_titulo: dijit.byId("valorParcela").value,
                        vl_saldo_titulo: parseFloat(removedecimal(dojo.byId("valorParcela").value)),
                        percentualResp: dijit.byId('percentualResponsavel').value,
                        id_origem_titulo: 22,
                        cd_local_movto: hasCartao() ? 0 : local_movto_parametro,
                        descLocalMovto: hasCartao() ? dojo.byId("bancoTitMat").value : dc_local_movto_parametro,
                        primeiraParc: dijit.byId("ckPrimeiraParcela").checked,
                        vl_desc_1parc: dijit.byId("descontoPrimeiraParcela").value,
                        vl_divida: dijit.byId("divida").value,
                        id_status_titulo: STATUS_TITULO_ABERTO,
                        id_natureza_titulo: NATUREZA_TITULO_RECEBER,
                        dh_cadastro_titulo: dijit.byId('dtaMatricula').original_value,
                        cd_plano_conta_tit: dojo.byId("cd_plano_contas").value,
                        cd_origem_titulo: dojo.byId('cd_contrato').value,
                        pc_bolsa: obterPercentualDescontoAditamentoBolsa(),
                        diaSugerido: dijit.byId("dia").value,
                        cd_aditamento: hasValue(dojo.byId("cd_aditamento").value) ? dojo.byId("cd_aditamento").value : 0
                    }
                    titulos.push(dataTituloMensalidade);
                }
            }
        } else {

            var dataTituloAditamento = {
                cd_pessoa_responsavel: dojo.byId("cd_responsavel_mens").value,
                nomeResponsavel: dojo.byId("pessoaResponsavel").value,
                nomeAluno: dojo.byId("nomeAlunoMat").value,
                cd_pessoa_titulo: dojo.byId("cd_pessoa_aluno_mat").value,
                dc_tipo_titulo: "AD",
                nm_titulo: dojo.byId("nm_contrato").value,
                cd_tipo_financeiro: dijit.byId("tipoDocumento").value,
                tipoDoc: dojo.byId("tipoDocumento").value,
                nm_parcela_titulo: dijit.byId("NroTitAdt").value,
                dc_num_documento_titulo: null,
                dt_emissao_titulo: obterDataEmissaoTitulo(),
                dt_vcto_titulo: dataVencimentoMensalidade,
                //vl_titulo: dijit.byId("valorParcela").value,
                //vl_saldo_titulo: parseFloat((dojo.byId("valorParcela").value).replace(",", ".")),
                percentualResp: dijit.byId('percentualResponsavel').value,
                //id_origem_titulo: 22,
                cd_local_movto: local_movto_parametro,
                id_status_titulo: STATUS_TITULO_ABERTO,
                id_natureza_titulo: NATUREZA_TITULO_RECEBER,
                dh_cadastro_titulo: dijit.byId('dtaMatricula').original_value,
                cd_plano_conta_tit: dojo.byId("cd_plano_contas").value,
                cd_origem_titulo: dojo.byId('cd_contrato').value,
                pc_bolsa: obterPercentualDescontoAditamentoBolsa(),
                diaSugerido: dijit.byId("dia").value,
                cd_aditamento: hasValue(dojo.byId("cd_aditamento").value) ? dojo.byId("cd_aditamento").value : 0
            }
            titulos.push(dataTituloAditamento);
        }
        return titulos;
    } catch (e) {
        postGerarLog(e);
    }
}

function montaTitulosMEMatriculaProfissionalizanteInformatica(titulos, nrPrimeiroChequeMens, local_movto_parametro) {

   

            var dia = dojo.byId("dia").value > 9 ? dojo.byId("dia").value : "0" + dojo.byId("dia").value;
            var mes = dojo.byId("mes").value > 9 ? dojo.byId("mes").value : "0" + dojo.byId("mes").value;
            var dataVencimentoMensalidade = new Date(dojo.byId("ano").value, (dojo.byId("mes").value - 1), dojo.byId("dia").value);

            //Verificando ultimo dia do mês
            var ultimaDataMês = new Date(dojo.byId("ano").value, (dojo.byId("mes").value), 0);
            var ultimaDiaMês = (new Date(dojo.byId("ano").value, (dojo.byId("mes").value), 0)).getDate();
            if ((ultimaDataMês.getMonth() + 1) != (dataVencimentoMensalidade.getMonth() + 1)) {
                var dataVencimentoMensalidade = new Date(dojo.byId("ano").value, (dojo.byId("mes").value - 1), ultimaDiaMês);
            }

            var dataTituloMensalidade = {
                cd_pessoa_responsavel: dojo.byId("cd_responsavel_mens").value,
                nomeResponsavel: dojo.byId("pessoaResponsavel").value,
                nomeAluno: dojo.byId("nomeAlunoMat").value,
                cd_pessoa_titulo: dojo.byId("cd_pessoa_aluno_mat").value,
                dc_tipo_titulo: "ME",
                nm_titulo: dojo.byId("nm_contrato").value,
                cd_tipo_financeiro: dijit.byId("tipoDocumento").value,
                tipoDoc: dojo.byId("tipoDocumento").value,
                nm_parcela_titulo: dojo.byId("parcelas").value,
                dc_num_documento_titulo: nrPrimeiroChequeMens,
                dt_emissao_titulo: dojo.date.locale.parse(dojo.byId("dtaMatricula").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }),
                dt_vcto_titulo: dataVencimentoMensalidade,
                vl_titulo: dijit.byId("vl_contrato").value,
                vl_saldo_titulo: parseFloat(removedecimal(dojo.byId("vl_contrato").value)),
                percentualResp: dijit.byId('percentualResponsavel').value,
                id_origem_titulo: 22,
                cd_local_movto: hasCartao() ? 0 : local_movto_parametro,
                descLocalMovto: hasCartao() ? dojo.byId("bancoTitMat").value : dc_local_movto_parametro,
                primeiraParc: dijit.byId("ckPrimeiraParcela").checked,
                vl_desc_1parc: dijit.byId("descontoPrimeiraParcela").value,
                vl_divida: dijit.byId("divida").value,
                id_status_titulo: STATUS_TITULO_ABERTO,
                id_natureza_titulo: NATUREZA_TITULO_RECEBER,
                dh_cadastro_titulo: dijit.byId('dtaMatricula').original_value,
                cd_plano_conta_tit: dojo.byId("cd_plano_contas").value,
                cd_origem_titulo: dojo.byId('cd_contrato').value,
                pc_bolsa: obterPercentualDescontoAditamentoBolsa(),
                diaSugerido: dijit.byId("dia").value,
                cd_aditamento: hasValue(dojo.byId("cd_aditamento").value) ? dojo.byId("cd_aditamento").value : 0
            }

            titulos.push(dataTituloMensalidade);
      
}

function montaTitulosMEMatriculaMultipla(titulos, nrPrimeiroChequeMens, local_movto_parametro) {

        var cursosContrato = montarCursos();
        $.each(cursosContrato,
            function (idx, val) {

                var dataVencimentoMensalidade = new Date(val.nm_ano_vcto, (val.nm_mes_vcto - 1), val.nm_dia_vcto);

                //Verificando ultimo dia do mês
                var ultimaDataMês = new Date(val.nm_ano_vcto, (val.nm_mes_vcto), 0);
                var ultimaDiaMês = (new Date(val.nm_ano_vcto, (val.nm_mes_vcto), 0)).getDate();
                if ((ultimaDataMês.getMonth() + 1) != (dataVencimentoMensalidade.getMonth() + 1)) {
                    dataVencimentoMensalidade = new Date(val.nm_ano_vcto, (val.nm_mes_vcto - 1), ultimaDiaMês);
                }

                var dataTituloMensalidade = {
                    cd_pessoa_responsavel: val.cd_pessoa_responsavel,
                    nomeResponsavel: val.no_pessoa_responsavel,
                    nomeAluno: dojo.byId("nomeAlunoMat").value,
                    cd_pessoa_titulo: dojo.byId("cd_pessoa_aluno_mat").value,
                    dc_tipo_titulo: "ME",
                    nm_titulo: dojo.byId("nm_contrato").value,
                    cd_tipo_financeiro: val.cd_tipo_financeiro,
                    tipoDoc: val.no_tipo,
                    nm_parcela_titulo: val.nm_parcelas_mensalidade,
                    dc_num_documento_titulo: val.cd_tipo_financeiro == CHEQUE ? nrPrimeiroChequeMens : null,
                    dt_emissao_titulo: dojo.date.locale.parse(dojo.byId("dtaMatricula").value,
                        { formatLength: 'short', selector: 'date', locale: 'pt-br' }),
                    dt_vcto_titulo: dataVencimentoMensalidade,
                    vl_titulo: val.vl_parcela_contrato,
                    vl_saldo_titulo: parseFloat((val.vl_parcela_contrato)),
                    percentualResp: val.pc_responsavel_contrato,
                    id_origem_titulo: 22,
                    cd_local_movto: val.cd_tipo_financeiro == CARTAO ? 0 : local_movto_parametro,
                    descLocalMovto: val.cd_tipo_financeiro == CARTAO ? dojo.byId("bancoTitMat").value : dc_local_movto_parametro,
                    primeiraParc: dijit.byId("ckPrimeiraParcela").checked,
                    vl_desc_1parc: dijit.byId("descontoPrimeiraParcela").value,
                    vl_divida: dijit.byId("divida").value,
                    id_status_titulo: STATUS_TITULO_ABERTO,
                    id_natureza_titulo: NATUREZA_TITULO_RECEBER,
                    dh_cadastro_titulo: dijit.byId('dtaMatricula').original_value,
                    cd_plano_conta_tit: dojo.byId("cd_plano_contas").value,
                    cd_origem_titulo: dojo.byId('cd_contrato').value,
                    pc_bolsa: obterPercentualDescontoAditamentoBolsa(),
                    diaSugerido: val.nm_dia_vcto,
                    cd_aditamento: hasValue(dojo.byId("cd_aditamento").value) ? dojo.byId("cd_aditamento").value : 0,
                    CursoContrato: val
                }
                titulos.push(dataTituloMensalidade);
//                if (nrPrimeiroChequeMens != null)
//                    nrPrimeiroChequeMens += cursosContrato[idx].nm_parcelas_mensalidade;
                if (nrPrimeiroChequeMens != null) {
                    var stringCheque = null;
                    var legDoc = nrPrimeiroChequeMens.length;
                    for (var p = 0; p <= legDoc; p++) {
                        var nrCheque = nrPrimeiroChequeMens.substring(p, nrPrimeiroChequeMens.length);
                        if (hasValue(nrCheque) && (nrCheque - parseFloat(nrCheque) >= 0)) {
                            stringCheque = parseInt(nrCheque) + cursosContrato[idx].nm_parcelas_mensalidade;
                            break;
                        }
                    }
                    var qtd_numeros = nrPrimeiroChequeMens.length - (stringCheque + "").length;
                    if (qtd_numeros > 0)
                        nrPrimeiroChequeMens = nrPrimeiroChequeMens.substring(0, (nrPrimeiroChequeMens.length - (stringCheque + "").length)) + stringCheque + "";
                    else
                        nrPrimeiroChequeMens = stringCheque;
                }
            });
}



function montaTitulosTMMatriculaDiferenteNormal(titulos, nrPrimeiroChequeMens, local_movto_parametro) {

    var cursosContrato = montarCursos();
    $.each(cursosContrato,
        function (idx, val) {

            var dataVencimentoMensalidade = new Date(val.nm_ano_vcto, (val.nm_mes_vcto - 1), val.nm_dia_vcto);

            //Verificando ultimo dia do mês
            var ultimaDataMês = new Date(val.nm_ano_vcto, (val.nm_mes_vcto), 0);
            var ultimaDiaMês = (new Date(val.nm_ano_vcto, (val.nm_mes_vcto), 0)).getDate();
            if ((ultimaDataMês.getMonth() + 1) != (dataVencimentoMensalidade.getMonth() + 1)) {
                dataVencimentoMensalidade = new Date(val.nm_ano_vcto, (val.nm_mes_vcto - 1), ultimaDiaMês);
            }

            var dataTituloTaxa = {
                cd_pessoa_responsavel: dojo.byId("cd_responsavel_tax").value,
                nomeResponsavel: dojo.byId("pessoaResponsavelTax").value,
                nomeAluno: dojo.byId("nomeAlunoMat").value,
                cd_pessoa_titulo: dojo.byId("cd_pessoa_aluno_mat").value,
                dc_tipo_titulo: "TM",
                nm_titulo: dojo.byId("nm_contrato").value,
                cd_tipo_financeiro: dijit.byId("tipoDocumentoTax").value,
                tipoDoc: dojo.byId("tipoDocumentoTax").value,
                nm_parcela_titulo: dojo.byId("numeroParcelasTaxa").value,
                dc_num_documento_titulo: dijit.byId("tipoDocumentoTax").value == CHEQUE
                    ? dojo.byId("nroPrimeiroCheque").value
                    : null,
                dt_emissao_titulo: dojo.date.locale.parse(dojo.byId("dtaMatricula").value,
                    { formatLength: 'short', selector: 'date', locale: 'pt-br' }),
                dt_vcto_titulo: dojo.date.locale.parse(dojo.byId("vencimentoTaxa").value,
                    { formatLength: 'short', selector: 'date', locale: 'pt-br' }),
                vl_titulo: (parseFloat(removedecimal(dojo.byId("valorTaxaMatricula").value)) /
                    dojo.byId("numeroParcelasTaxa").value),
                vl_saldo_titulo: (parseFloat(removedecimal(dojo.byId("valorTaxaMatricula").value)) /
                    dojo.byId("numeroParcelasTaxa").value),
                percentualResp: parseFloat(removedecimal(dojo.byId('percentualResponsavelTax').value)),
                id_origem_titulo: 22,
                cd_local_movto: dijit.byId("tipoDocumentoTax").value == CARTAO ? 0 : local_movto_parametro,
                descLocalMovto: dojo.byId("bancoTitMat").value,
                id_status_titulo: STATUS_TITULO_ABERTO,
                id_natureza_titulo: NATUREZA_TITULO_RECEBER,
                dh_cadastro_titulo: dijit.byId('dtaMatricula').original_value,
                cd_plano_conta_tit: dojo.byId('cd_plano_contas_tx').value,
                cd_origem_titulo: dojo.byId('cd_contrato').value,
                diaSugerido: val.nm_dia_vcto,
                cd_aditamento: hasValue(dojo.byId("cd_aditamento").value) ? dojo.byId("cd_aditamento").value : 0
            }
            titulos.push(dataTituloTaxa);
        });
}


function montarDescontoContrato() {
    try {
        var descontoContrato = [];
        var contrato = hasValue(dojo.byId('cd_contrato')) ? dojo.byId('cd_contrato').value : 0;
        var gridTipoDesconto = hasValue(dijit.byId('gridDesconto')) ? dijit.byId('gridDesconto') : [];

        if (hasValue(gridTipoDesconto) && hasValue(gridTipoDesconto._by_idx))
            var data = gridTipoDesconto._by_idx;
        else descontoContrato = null;

        if (hasValue(gridTipoDesconto) && hasValue(data) && data.length > 0)
            $.each(data, function (idx, val) {
                descontoContrato.push({
                    cd_desconto_contrato: val.item.cd_desconto_contrato,
                    cd_contrato: parseInt(contrato),
                    cd_tipo_desconto: val.item.cd_tipo_desconto,
                    pc_desconto_contrato: unmaskFixed(val.item.pc_desconto, 2),
                    id_desconto_ativo: val.item.id_desconto_ativo,
                    vl_desconto_contrato: unmaskFixed(val.item.vl_desconto_contrato, 2),
                    id_incide_baixa: val.item.id_incide_baixa,
                    nm_parcela_ini: val.item.nm_parcela_ini,
                    nm_parcela_fim: val.item.nm_parcela_fim
                });
            });
        return descontoContrato;
    } catch (e) {
        postGerarLog(e);
    }
}

function montarTaxaMatricula() {
    try {
        var listTaxaMatricula = [];

        var valor_taxa = dijit.byId('valorTaxaMatricula').get('value');
        valor_taxa = unmaskFixed(valor_taxa, 2);

        var perc_taxa = dijit.byId('percentualResponsavelTax').get('value');
        perc_taxa = unmaskFixed(perc_taxa, 2);

        cd_plano_conta = dojo.byId('cd_plano_contas_tx').value == 0 ? null : dojo.byId('cd_plano_contas_tx').value;
        if (eval(valor_taxa) > 0) {
            var taxaMatricula = {
                cd_taxa_matricula: dojo.byId('cd_taxa_matricula').value,
                cd_contrato: dojo.byId("cd_contrato").value,
                vl_matricula_taxa: valor_taxa,
                dt_vcto_taxa: dojo.date.locale.parse(dojo.byId("vencimentoTaxa").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }),
                nm_parcelas_taxa: dijit.byId('numeroParcelasTaxa').get('value'),
                cd_tipo_financeiro_taxa: dijit.byId('tipoDocumentoTax').get('value'),
                cd_pessoa_responsavel_taxa: dojo.byId('cd_responsavel_tax').value,
                pc_responsavel_taxa: perc_taxa,
                cd_plano_conta_taxa: cd_plano_conta
            }
            listTaxaMatricula.push(taxaMatricula);
        }
        else listTaxaMatricula = null;

        return listTaxaMatricula;
    } catch (e) {
        postGerarLog(e);
    }
}

function montarAditamento() {
    try {
        var aditamento = null;
        var descontoAdt = [];
        var aditamentosBolsa = new Array();
        var nroTitulos = dijit.byId("NroTitAdt").value; // getNroParcelas("NroTitAdt");
        if (isNaN(nroTitulos) || nroTitulos == "")
            nroTitulos = 0;
        else nroTitulos = parseInt(nroTitulos);
        if (dijit.byId('tipoDataContratoAdto').get('value') == 0
            && (isNaN(dijit.byId('spDiaVencAdto').get('value'))
            || dijit.byId('spDiaVencAdto').get('value') == 0)
            && dijit.byId('tipoContratoAdto').get('value') == "") {
            aditamento = null;
        } else {
            if (hasValue(dijit.byId("gridDescontoAdt").store.objectStore.data) && dijit.byId("gridDescontoAdt").store.objectStore.data.length > 0) {
                descontoAdt = new Array();
                $.each(dijit.byId("gridDescontoAdt").store.objectStore.data, function (idx, val) {
                    descontoAdt.push({
                        cd_desconto_contrato: val.cd_desconto_contrato,
                        //cd_contrato: parseInt(contrato),
                        cd_tipo_desconto: val.cd_tipo_desconto,
                        pc_desconto_contrato: unmaskFixed(val.pc_desconto, 2),
                        id_desconto_ativo: val.id_desconto_ativo,
                        vl_desconto_contrato: unmaskFixed(val.vl_desconto_contrato, 2),
                        id_incide_baixa: val.id_incide_baixa,
                        nm_parcela_ini: val.nm_parcela_ini,
                        nm_parcela_fim: val.nm_parcela_fim
                    });
                });
            }
            if (hasValue(dijit.byId("tipoAditamento").value) && dijit.byId("tipoAditamento").value == ADITIVO_BOLSA)
                aditamentosBolsa.push({
                    pc_bolsa: hasValue(dijit.byId("aditivobolsaPorcentual").value) ? dijit.byId("aditivobolsaPorcentual").value : 0,
                    dt_comunicado_bolsa: hasValue(dojo.byId("aditivobolsaDataComunicado").value) ? dojo.date.locale.parse(dojo.byId("aditivobolsaDataComunicado").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }) : null,
                    dc_validade_bolsa: hasValue(dijit.byId("aditivobolsaDescValidade").value) ? dijit.byId("aditivobolsaDescValidade").value : null,
                    cd_motivo_bolsa: hasValue(dijit.byId('aditivobolsaMotivoBolsa').value) && dijit.byId('aditivobolsaMotivoBolsa').value != 0 ? dijit.byId('aditivobolsaMotivoBolsa').value : null
                });

            aditamento = {
                cd_aditamento: hasValue(dojo.byId("cd_aditamento").value) ? dojo.byId("cd_aditamento").value : 0,
                cd_contrato: hasValue(dojo.byId("cd_contrato").value) ? dojo.byId("cd_contrato").value : 0,
                dt_inicio_aditamento: hasValue(dojo.byId("dtInicioAditamento").value) ? dojo.date.locale.parse(dojo.byId("dtInicioAditamento").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }) :
                    hasValue(dojo.byId("dtInicioAdto").value) ? dojo.date.locale.parse(dojo.byId("dtInicioAdto").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }) : null,
                dt_vencto_inicial: hasValue(dojo.byId("dtAdtVencInicial").value) ? dojo.date.locale.parse(dojo.byId("dtAdtVencInicial").value,
                                       { formatLength: 'short', selector: 'date', locale: 'pt-br' }) : null,
                id_tipo_data_inicio: hasValue(dijit.byId("tipoDataContratoAdto").value) ? dijit.byId("tipoDataContratoAdto").value : null,
                nm_dia_vcto_desconto: hasValue(dojo.byId("spDiaVencAdto").value) ? dojo.byId("spDiaVencAdto").value : null,
                cd_nome_contrato: hasValue(dijit.byId("tipoContratoAdto").value) ? dijit.byId("tipoContratoAdto").value : null,
                id_tipo_aditamento: hasValue(dijit.byId("tipoAditamento").value) ? dijit.byId("tipoAditamento").value : null,
                nm_previsao_inicial: hasValue(dijit.byId("edPrevDias").value) ? dijit.byId("edPrevDias").value : null,
                vl_aula_hora: hasValue(dojo.byId("edValorAulaAdto").value) ? parseFloat(removedecimal(dojo.byId("edValorAulaAdto").value)) : null,
                id_tipo_pagamento: hasValue(dijit.byId("tipoPagto").value) ? dijit.byId("tipoPagto").value : null,
                nm_titulos_aditamento: nroTitulos,
                dt_vcto_aditamento: hasValue(dojo.byId("VctoAdt").value) ? dojo.date.locale.parse(dojo.byId("VctoAdt").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }) : null,
                vl_aditivo: hasValue(dijit.byId("valorAditivo").value) ? dijit.byId("valorAditivo").value : null,
                tx_obs_aditamento: dojo.byId('descObsAditamento').value,
                Desconto: descontoAdt,
                vl_parcela_titulo_aditamento: hasValue(dijit.byId("ValorParcAdic").value) ? dijit.byId("ValorParcAdic").value : 0,
                pc_bolsa_anterior_aditamento: hasValue(dojo.byId("pc_desconto_anterior").value) ? dojo.byId("pc_desconto_anterior").value : 0,
                id_ajuste_manual: dojo.byId("ckManual").checked ? dojo.byId("ckManual").checked : parseInt(dojo.byId("id_ajuste_manual_anterior").value) == 0 ? false : true,
                vl_aditivo_anterior: dijit.byId('VlAnteriorAdt').value,
                cd_tipo_financeiro: (hasValue(dijit.byId("tipoFinanceiroAditamento")) && dijit.byId("tipoFinanceiroAditamento").value > 0) ? dijit.byId("tipoFinanceiroAditamento").value : dijit.byId("tipoDocumento").value,
                tipoDoc: (hasValue(dojo.byId("tipoFinanceiroAditamento")) && dijit.byId("tipoFinanceiroAditamento").value > 0) ? dojo.byId("tipoFinanceiroAditamento").value : dojo.byId("tipoDocumento").value,
                AditamentoBolsa: aditamentosBolsa
            };
        }
        return aditamento;
    } catch (e) {
        postGerarLog(e);
    }
}

function montarCursos() {
    try {
        var cursos = [];

        if (hasValue(dijit.byId("gridDataCurso").store.objectStore.data) &&
            dijit.byId("gridDataCurso").store.objectStore.data.length > 0) {
            cursos = new Array();
            $.each(dijit.byId("gridDataCurso").store.objectStore.data, function (idx, val) {
                cursos.push({
                    cd_curso_contrato: 0,
                    cd_contrato: dojo.byId("cd_contrato").value,
                    cd_curso_contrato: (val.cd_curso_contrato != null && val.cd_curso_contrato > 0) ? val.cd_curso_contrato : 0,
                    cd_curso: val.cd_curso,
                    cd_duracao: val.cd_duracao,
                    cd_tipo_financeiro: val.cd_tipo,
                    no_tipo: val.no_tipo,
                    cd_pessoa_responsavel: val.cd_pessoa_responsavel,
                    no_pessoa_responsavel: val.no_pessoa_responsavel,
                    nm_dia_vcto: val.nm_dia,
                    nm_mes_vcto: val.nm_mes,
                    nm_ano_vcto: val.nm_ano,
                    nm_parcelas_mensalidade: val.nm_parcelas,
                    vl_curso_contrato: val.vl_curso,
                    pc_desconto_contrato: val.pc_desconto_contrato,
                    vl_matricula_curso: val.val_matricula,
                    vl_parcela_contrato: val.valorParcela,
                    vl_desconto_contrato: val.vl_desconto_contrato,
                    pc_responsavel_contrato: val.pc_responsavel_contrato,
                    vl_parcela_liquida: val.vl_parcela_liquida,
                    id_liberar_certificado: val.id_liberar,
                    vl_curso_liquido: val.vl_curso_liquido,
                    vl_parcela_liquida: val.vl_parcela_liquida,
                    nm_mes_curso_inicial: (hasValue(val.nm_mes_curso_inicial) && hasValue(val.nm_ano_curso_inicial)) ? val.nm_mes_curso_inicial : null,
                    nm_ano_curso_inicial: (hasValue(val.nm_mes_curso_inicial) && hasValue(val.nm_ano_curso_inicial)) ? val.nm_ano_curso_inicial : null,
                    nm_mes_curso_final: (hasValue(val.nm_mes_curso_final) && hasValue(val.nm_ano_curso_final)) ? val.nm_mes_curso_final : null,
                    nm_ano_curso_final: (hasValue(val.nm_mes_curso_final) && hasValue(val.nm_ano_curso_final)) ? val.nm_ano_curso_final : null,
                    id_valor_incluso: val.id_valor_incluso,
                    id_incorporar_valor_material: val.id_incorporar_valor_material,
                    nm_parcelas_material: val.nm_parcelas_material,
                    vl_parcela_material: val.vl_parcela_material,
                    pc_bolsa_material: val.pc_bolsa_material,
                    vl_parcela_liq_material: val.vl_parcela_liq_material,
                    vl_material_contrato: val.vl_material_contrato,
                    cd_curso_ordem: val.cd_curso_ordem
                });
            });
        }
        return cursos;
    } catch (e) {
        postGerarLog(e);
    }
}


function montarCurso(curso) {
    try {

        var newCurso = null;
        if (hasValue(curso)) {
            newCurso = {
                cd_curso_contrato: (curso.cd_curso_contrato != null && curso.cd_curso_contrato != undefined && curso.cd_curso_contrato > 0) ? curso.cd_curso_contrato : 0,
                cd_contrato: dojo.byId("cd_contrato").value,
                cd_curso: curso.cd_curso,
                cd_duracao: curso.cd_duracao,
                cd_tipo_financeiro: curso.cd_tipo,
                cd_pessoa_responsavel: curso.cd_pessoa_responsavel,
                nm_dia_vcto: curso.nm_dia,
                nm_mes_vcto: curso.nm_mes,
                nm_ano_vcto: curso.nm_ano,
                nm_parcelas_mensalidade: curso.nm_parcelas,
                vl_curso_contrato: curso.vl_curso,
                pc_desconto_contrato: curso.pc_desconto_contrato,
                vl_matricula_curso: curso.val_matricula,
                vl_parcela_contrato: curso.valorParcela,
                vl_desconto_contrato: curso.vl_desconto_contrato,
                pc_responsavel_contrato: curso.pc_responsavel_contrato,
                vl_parcela_liquida: curso.vl_parcela_liquida,
                id_liberar_certificado: curso.id_liberar,
                vl_curso_liquido: curso.vl_curso_liquido,
                vl_parcela_liquida: curso.vl_parcela_liquida,
                nm_mes_curso_inicial: (hasValue(curso.nm_mes_curso_inicial) && hasValue(curso.nm_ano_curso_inicial)) ? curso.nm_mes_curso_inicial : null,
                nm_ano_curso_inicial: (hasValue(curso.nm_mes_curso_inicial) && hasValue(curso.nm_ano_curso_inicial)) ? curso.nm_ano_curso_inicial : null,
                nm_mes_curso_final: (hasValue(curso.nm_mes_curso_final) && hasValue(curso.nm_ano_curso_final)) ? curso.nm_mes_curso_final : null,
                nm_ano_curso_final: (hasValue(curso.nm_mes_curso_final) && hasValue(curso.nm_ano_curso_final)) ? curso.nm_ano_curso_final : null,
                id_valor_incluso: curso.id_valor_incluso,
                id_incorporar_valor_material: curso.id_incorporar_valor_material,
                nm_parcelas_material: curso.nm_parcelas_material,
                vl_parcela_material: curso.vl_parcela_material,
                pc_bolsa_material: curso.pc_bolsa_material,
                vl_parcela_liq_material: curso.vl_parcela_liq_material,
                vl_material_contrato: curso.vl_material_contrato,
                cd_curso_ordem: curso.cd_curso_ordem
            }
        } else {
            return null;
        }
        

    return newCurso;
    } catch (e) {
        postGerarLog(e);
    }
}

function montarCursoCertificado() {
    try {
        var newCurso = [];
        if (hasValue(dijit.byId("gridDataCurso").store.objectStore.data) &&
            dijit.byId("gridDataCurso").store.objectStore.data.length > 0) {
            newCurso = new Array();
            $.each(dijit.byId("gridDataCurso").store.objectStore.data, function (idx, val) {
                newCurso.push({
                cd_curso_contrato: (val.cd_curso_contrato != null && val.cd_curso_contrato != undefined && val.cd_curso_contrato > 0) ? val.cd_curso_contrato : 0,
                cd_contrato: val.cd_contrato,
                cd_curso: val.cd_curso,
                id_liberar_certificado: val.id_liberar
                });
            });
        }
        return newCurso;
    } catch (e) {
        postGerarLog(e);
    }
}


function montarCursoContratoMatriculaNormal() {
    try {

        var newCurso = [];
       
        newCurso.push({
            cd_curso_contrato: 0,
            cd_contrato: dojo.byId(cd_contrato).value,
            cd_curso: getCursoId(dijit.byId("gridTurmaMat")),
            cd_duracao: dijit.byId('cd_duracao_atual').value,
            cd_tipo_financeiro: dijit.byId('tipoDocumento').value,
            cd_pessoa_responsavel: dojo.byId('cd_responsavel_mens').value,
            nm_dia_vcto: dijit.byId('dia').get("value"),
            nm_mes_vcto: dijit.byId('mes').get("value"),
            nm_ano_vcto: dijit.byId('ano').get("value"),
            nm_parcelas_mensalidade: dijit.byId('parcelas').value,
            vl_curso_contrato: dijit.byId('valorCurso').value,
            pc_desconto_contrato: dijit.byId('desconto').value,
            vl_matricula_curso: dijit.byId('valorMatricula').value,
            vl_parcela_contrato: dijit.byId('valorParcela').value,
            vl_desconto_contrato: dijit.byId('valorDesconto').value,
            pc_responsavel_contrato: dijit.byId('percentualResponsavel').value,
            id_liberar_certificado: dijit.byId('ckCertificado').checked,
            vl_curso_liquido: dijit.byId('valorFaturar').value,
            vl_parcela_liquida: dijit.byId('edParcelaLiquida').value,
            nm_mes_curso_inicial: (hasValue(dijit.byId('mesInicial').value) && hasValue(dijit.byId('anoInicial').value)) ? dijit.byId('mesInicial').value : null,
            nm_ano_curso_inicial: (hasValue(dijit.byId('mesInicial').value) && hasValue(dijit.byId('anoInicial').value)) ? dijit.byId('anoInicial').value : null,
            nm_mes_curso_final: (hasValue(dijit.byId('mesFinal').value) && hasValue(dijit.byId('anoFinal').value)) ? dijit.byId('mesFinal').value : null,
            nm_ano_curso_final: (hasValue(dijit.byId('mesFinal').value) && hasValue(dijit.byId('anoFinal').value)) ? dijit.byId('anoFinal').value : null,
            id_valor_incluso: dijit.byId("vlInclusoMaterial").checked,
            id_incorporar_valor_material: dijit.byId("incorporarMaterial").checked,
            nm_parcelas_material: dijit.byId("NroParMaterial").value,
            vl_parcela_material: hasValue(dijit.byId("vlParcMaterial").value) ? dijit.byId("vlParcMaterial").value : 0,
            pc_bolsa_material: hasValue(dijit.byId("pcBolsaMaterial").value) ? dijit.byId("pcBolsaMaterial").value : 0,
            vl_parcela_liq_material: hasValue(dijit.byId("vlMaterialContratoCDesconto").value) ? dijit.byId("vlMaterialContratoCDesconto").value : 0,
            vl_material_contrato: hasValue(dijit.byId("vlMaterialContrato").value) ? dijit.byId("vlMaterialContrato").value : 0
        });
        return newCurso;
    } catch (e) {
        postGerarLog(e);
    }
}

function getCursoId(grid) {
    try {
       if (hasValue(grid) &&
            hasValue(grid.store) &&
            hasValue(grid.store.objectStore) &&
            hasValue(grid.store.objectStore.data) &&
            hasValue(grid.store.objectStore.data.length > 0) &&
            hasValue(grid.store.objectStore.data[0].cd_curso)) {
            return grid.store.objectStore.data[0].cd_curso;
        }else {
           return dijit.byId('cd_curso_atual').value;
       }
    } catch (e) {
        postGerarLog(e);
    } 
    
}

function montarObjArquivoDigitalizado(nomeContratoDigitalizadoTemporario) {
    try {
        var dadosRetorno = null;

            dadosRetorno = {
                cd_contrato: dojo.byId("cd_contrato").value,
                nm_contrato: dojo.byId("nm_contrato").value.replace('.', ''),
                nm_arquivo_digitalizado: dojo.byId("edlayoutContratoDigitalizado").value,
                nm_arquivo_digitalizado_temporario: nomeContratoDigitalizadoTemporario
            }
       
        return dadosRetorno;
    } catch (e) {
        postGerarLog(e);
    }
}

function montarObjPacoteCertificado() {
    try {
        var dadosRetorno = null;

        dadosRetorno = {
            cd_contrato: dojo.byId("cd_contrato").value,
            nm_contrato: dojo.byId("nm_contrato").value.replace('.', ''),
            id_venda_pacote: dijit.byId("id_venda_pacote").checked,
            id_liberar_certificado: dijit.byId("ckCertificado").checked,
            CursoContrato: dijit.byId('ckMultipla').checked ? montarCursoCertificado() : null 
        }

        return dadosRetorno;
    } catch (e) {
        postGerarLog(e);
    }
}

function montarContrato(nomeContratoDigitalizadoTemporario) {
    try {
        var dtaInicioMat = hasValue(dojo.byId("dtaInicioMat").value) ? dojo.date.locale.parse(dojo.byId("dtaInicioMat").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }) : null;
        var dtaFinalMat = hasValue(dojo.byId("dtaFinalMat").value) ? dojo.date.locale.parse(dojo.byId("dtaFinalMat").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }) : null;
        var dtaMatricula = hasValue(dojo.byId("dtaMatricula").value) ? dojo.date.locale.parse(dojo.byId("dtaMatricula").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }) : null;
        var turmas = montarTurma();
        var notasMaterial = dijit.byId('notasMaterialDidatico').store.data;

        if (hasValue(turmas)) {
            dijit.byId("cd_curso_atual").set("required", false);
            dijit.byId("cd_produto_atual").set("required", false);
            dijit.byId("cd_duracao_atual").set("required", false);
            dijit.byId("cd_regime_atual").set("required", false);
        } else {
            dijit.byId("cd_curso_atual").set("required", true);
            dijit.byId("cd_produto_atual").set("required", true);
            dijit.byId("cd_duracao_atual").set("required", true);
            dijit.byId("cd_regime_atual").set("required", true);
        }
        var dadosTurma = turmaAguardando();
        var cheque = null;
        var aditamentos = null;
        var descontoContrato = [];
        if (dijit.byId("tipoDocumento").value == CHEQUE || dijit.byId("tipoDocumentoTax").value == CHEQUE)
            cheque = new montarCheque();
        else {
            if (dijit.byId("gridDataCurso").store.objectStore.data.length > 0)
                for (var i = 0; i < dijit.byId("gridDataCurso").store.objectStore.data.length; i++) 
                    if(dijit.byId("gridDataCurso").store.objectStore.data[i].cd_tipo == CHEQUE){
                        cheque = new montarCheque();
                        break;
                    }
        }
        descontoContrato = montarDescontoContrato();

        var dadosTitulos = dijit.byId("gridTitulo").store.objectStore.data;

        var taxaMatricula = new montarTaxaMatricula();
        
        if (!verificaMatriculaNormal()) {
            var valorParcela = dijit.byId("valorParcela").get('value');
            valorParcela = unmaskFixed(valorParcela, 2);
        } else {
            var valorParcela = dijit.byId("edValParcela").get('value');
            valorParcela = unmaskFixed(valorParcela, 2);
        }
        
        var valorDescontoParcela = dijit.byId("descontoPrimeiraParcela").get('value');
        valorDescontoParcela = unmaskFixed(valorDescontoParcela, 2);

        if (!verificaMatriculaNormal()) {
            var valorCurso = dijit.byId("vl_contrato").get('value');
            valorCurso = unmaskFixed(valorCurso, 2);
        } else {
            var valorCurso = dijit.byId("valorCurso").get('value');
            valorCurso = unmaskFixed(valorCurso, 2);
        }
       

        var divida = dijit.byId("divida").get('value');
        divida = unmaskFixed(divida, 2);

        var valorMatricula = dijit.byId("valorMatricula").get('value');
        valorMatricula = unmaskFixed(valorMatricula, 2);

        var valorFaturar = dijit.byId("valorFaturar").get('value');
        valorFaturar = unmaskFixed(valorFaturar, 2);

        var desconto = dijit.byId("desconto").get('value');
        desconto = unmaskFixed(desconto, 4);

        var valorDesconto = dijit.byId("valorDesconto").get('value');
        valorDesconto = unmaskFixed(valorDesconto, 2);

        var valorMaterial = dijit.byId("vlMaterialContrato").get('value');
        valorMaterial = unmaskFixed(valorMaterial, 2);
        
        var valorLiqMaterial = dijit.byId("vlMaterialContratoCDesconto").get('value');
        valorLiqMaterial = unmaskFixed(valorLiqMaterial, 2);

        var valorParcelaMat = dijit.byId("vlParcMaterial").get('value');
        valorParcelaMat = unmaskFixed(valorParcelaMat, 2);

        var nroPacelasMat = dijit.byId("NroParMaterial").get('value');
        nroPacelasMat = unmaskFixed(nroPacelasMat, 0);

        var pcBolaMat = dijit.byId("pcBolsaMaterial").get('value');
        pcBolaMat = unmaskFixed(pcBolaMat, 2);

        if (hasValue(dijit.byId("gridAditamento").store.objectStore.data) && dijit.byId("gridAditamento").store.objectStore.data.length > 0)
            aditamentos = dijit.byId("gridAditamento").store.objectStore.data;

        var aditamento = montarAditamento();

        var cursosContrato = null; 
        if (verificaMatriculaNormal()) {
            if (hasValue(turmas)) {
                var cursoContratoVinc = montarCursoContratoMatriculaNormal();
                if (hasValue(cursoContratoVinc)) {
                    //vincula o curso contrato ao alunoTurma
                    turmas[0].CursoContrato = cursoContratoVinc;
                    cursosContrato = montarCursoContratoMatriculaNormal();
                }

            } else {
                cursosContrato = montarCursoContratoMatriculaNormal();
            }
        } else {
            var cursos = montarCursos();
        }

        var dadosRetorno = null;

        if (dijit.byId("ckMultipla").checked || dijit.byId('ckProfissional').checked || dijit.byId('ckInformatica').checked) {
            var dataCursos = dijit.byId('gridDataCurso').store.objectStore.data;
            dadosRetorno = {
                cd_contrato: dojo.byId("cd_contrato").value,
                cd_aluno: dojo.byId("cd_aluno_mat").value,
                cd_pessoa_aluno: dojo.byId("cd_pessoa_aluno_mat").value,
                no_pessoa: dojo.byId("nomeAlunoMat").value,
                no_turma: hasValue(dadosTurma) ? dadosTurma[0].noTurma : "Sem Turma",
                dc_situacao_turma: hasValue(dadosTurma) ? dadosTurma[0].situacao : "",
                nm_contrato: dojo.byId("nm_contrato").value.replace('.', ''),
                dc_serie_contrato: dojo.byId("dc_serie_contrato").value,
                nm_matricula_contrato: dojo.byId("matriculaNro").value.replace('.', ''),
                dt_inicial_contrato: dtaInicioMat,
                dt_final_contrato: dtaFinalMat,
                dt_matricula_contrato: dtaMatricula,
                id_ajuste_manual: dojo.byId("ckManual").checked,
                id_contrato_aula: dojo.byId("ckAula").checked,
                id_liberar_certificado: dojo.byId("ckCertificado").checked,
                cd_tipo_financeiro: dataCursos[0].cd_tipo,
                cd_pessoa_responsavel: dataCursos[0].cd_pessoa_responsavel,
                pc_responsavel_contrato: dataCursos[0].pc_responsavel_contrato,
                cd_produto_atual: dijit.byId("cd_produto_atual").value,
                cd_curso_atual: dijit.byId("cd_curso_atual").value,
                cd_regime_atual: dijit.byId("cd_regime_atual").value,
                cd_duracao_atual: dijit.byId("cd_duracao_atual").value,
                nm_dia_vcto: dataCursos[0].nm_dia,
                nm_mes_vcto: dataCursos[0].nm_mes,
                nm_ano_vcto: dataCursos[0].nm_ano,
                nm_parcelas_mensalidade: dijit.byId("ckMultipla").checked ? getAllNumeroParcelasCursoGrid(dijit.byId("gridDataCurso")) : dojo.byId("parcelas").value,
                id_tipo_matricula: dijit.byId("tipoMatricula").value,
                dc_tipo_matricula: dojo.byId("tipoMatricula").value,
                id_transferencia: dijit.byId("ckTransfCad").checked,
                id_retorno: dijit.byId("ckRetornoCad").checked,
                cd_mala_direta: dojo.byId("cd_mala_direta").value > 0 ? dojo.byId("cd_mala_direta").value : null,
                //valores
                id_divida_primeira_parcela: dijit.byId("ckPrimeiraParcela").checked,
                vl_curso_contrato: dijit.byId("vl_contrato").get("value"),
                vl_matricula_contrato: dijit.byId("valorMatriculaTotal").value,
                vl_parcela_contrato: dijit.byId("edValParcela").value,
                vl_desconto_contrato: valorDesconto,
                pc_desconto_contrato: desconto,
                vl_divida_contrato: divida,
                vl_desc_primeira_parcela: valorDescontoParcela,
                vl_liquido_contrato: valorFaturar,
                id_venda_pacote: dijit.byId("id_venda_pacote").checked,
                pc_desconto_bolsa: obterPercentualDescontoAditamentoBolsa(),
                vl_pre_matricula: hasValue(dijit.byId("vl_pre_matricula").value) ? dijit.byId("vl_pre_matricula").value : 0,
                AlunoTurma: turmas,
                Cheque: cheque,
                cd_plano_conta: hasValue(dojo.byId('cd_plano_contas').value) && dojo.byId('cd_plano_contas').value != "0" ? dojo.byId('cd_plano_contas').value : null,
                DescontoContrato: descontoContrato,
                TaxaMatricula: taxaMatricula,
                titulos: dadosTitulos,
                aditamentoMaxData: aditamento,
                Aditamento: aditamentos,
                alterouTitulos: abriuTagTitulos,
                pessoaFisicaResponsavel: null,
                pessoajuridicaResponsavel: null,
                valorSaldoMatricula: dijit.byId("vl_saldo_matricula").value,
                cd_ano_escolar: hasValue(dijit.byId('anoEscolar').value) && dijit.byId('anoEscolar').value != 0 ? dijit.byId('anoEscolar').value : null,
                CursoContrato: cursos,
                id_tipo_contrato: verificaTipoCKMatricula(),
                nm_mes_curso_inicial: dataCursos[0].nm_mes_curso_inicial,
                nm_ano_curso_inicial: dataCursos[0].nm_ano_curso_inicial,
                nm_mes_curso_final: dataCursos[0].nm_mes_curso_final,
                nm_ano_curso_final: dataCursos[0].nm_ano_curso_final,
                nm_arquivo_digitalizado: dojo.byId("edlayoutContratoDigitalizado").value,
                nm_arquivo_digitalizado_temporario: nomeContratoDigitalizadoTemporario,
                id_valor_incluso: dijit.byId("vlInclusoMaterial").checked,
                id_incorporar_valor_material: dijit.byId("incorporarMaterial").checked,
                nm_parcelas_material: nroPacelasMat,
                vl_parcela_material: valorParcelaMat,
                pc_bolsa_material: pcBolaMat,
                vl_parcela_liq_material: valorLiqMaterial,
                vl_material_contrato: valorMaterial,
                alterou_responsavel: ALTEROU_RESPONSAVEL,
                alterou_dt_vcto: ALTEROU_DT_VENCIMENTO,
                notas_material_didatico: notasMaterial
            }
        } else {
            dadosRetorno = {
                cd_contrato: dojo.byId("cd_contrato").value,
                cd_aluno: dojo.byId("cd_aluno_mat").value,
                cd_pessoa_aluno: dojo.byId("cd_pessoa_aluno_mat").value,
                no_pessoa: dojo.byId("nomeAlunoMat").value,
                no_turma: hasValue(dadosTurma) ? dadosTurma[0].noTurma : "Sem Turma",
                dc_situacao_turma: hasValue(dadosTurma) ? dadosTurma[0].situacao : "",
                nm_contrato: dojo.byId("nm_contrato").value.replace('.', ''),
                dc_serie_contrato: dojo.byId("dc_serie_contrato").value,
                nm_matricula_contrato: dojo.byId("matriculaNro").value.replace('.', ''),
                dt_inicial_contrato: dtaInicioMat,
                dt_final_contrato: dtaFinalMat,
                dt_matricula_contrato: dtaMatricula,
                id_ajuste_manual: dojo.byId("ckManual").checked,
                id_contrato_aula: dojo.byId("ckAula").checked,
                id_liberar_certificado: dojo.byId("ckCertificado").checked,
                cd_tipo_financeiro: dijit.byId("tipoDocumento").value,
                cd_pessoa_responsavel: dojo.byId("cd_responsavel_mens").value,
                pc_responsavel_contrato: dojo.byId("percentualResponsavel").value,
                cd_produto_atual: dijit.byId("cd_produto_atual").value,
                cd_curso_atual: dijit.byId("cd_curso_atual").value,
                cd_regime_atual: dijit.byId("cd_regime_atual").value,
                cd_duracao_atual: dijit.byId("cd_duracao_atual").value,
                nm_dia_vcto: dojo.byId("dia").value,
                nm_mes_vcto: dojo.byId("mes").value,
                nm_ano_vcto: dojo.byId("ano").value,
                nm_parcelas_mensalidade: ((verificaMatriculaNormal() || dijit.byId('ckProfissional').checked || dijit.byId('ckInformatica').checked) ? dojo.byId("parcelas").value : getAllNumeroParcelasCursoGrid(dijit.byId('gridDataCurso'))),
                id_tipo_matricula: dijit.byId("tipoMatricula").value,
                dc_tipo_matricula: dojo.byId("tipoMatricula").value,
                id_transferencia: dijit.byId("ckTransfCad").checked,
                id_retorno: dijit.byId("ckRetornoCad").checked,
                cd_mala_direta: dojo.byId("cd_mala_direta").value > 0 ? dojo.byId("cd_mala_direta").value : null,
                //valores
                id_divida_primeira_parcela: dijit.byId("ckPrimeiraParcela").checked,
                vl_curso_contrato: valorCurso,
                vl_matricula_contrato: valorMatricula,
                vl_parcela_contrato: valorParcela,
                vl_desconto_contrato: valorDesconto,
                pc_desconto_contrato: desconto,
                vl_divida_contrato: divida,
                vl_desc_primeira_parcela: valorDescontoParcela,
                vl_liquido_contrato: valorFaturar,
                id_venda_pacote: dijit.byId("id_venda_pacote").checked,
                pc_desconto_bolsa: obterPercentualDescontoAditamentoBolsa(),
                vl_pre_matricula: hasValue(dijit.byId("vl_pre_matricula").value) ? dijit.byId("vl_pre_matricula").value : 0,
                AlunoTurma: turmas,
                Cheque: cheque,
                cd_plano_conta: hasValue(dojo.byId('cd_plano_contas').value) && dojo.byId('cd_plano_contas').value != "0" ? dojo.byId('cd_plano_contas').value : null,
                DescontoContrato: descontoContrato,
                TaxaMatricula: taxaMatricula,
                titulos: dadosTitulos,
                aditamentoMaxData: aditamento,
                Aditamento: aditamentos,
                alterouTitulos: abriuTagTitulos,
                pessoaFisicaResponsavel: null,
                pessoajuridicaResponsavel: null,
                valorSaldoMatricula: dijit.byId("vl_saldo_matricula").value,
                cd_ano_escolar: hasValue(dijit.byId('anoEscolar').value) && dijit.byId('anoEscolar').value != 0 ? dijit.byId('anoEscolar').value : null,
                CursoContrato: cursosContrato,
                id_tipo_contrato: verificaTipoCKMatricula(),
                nm_mes_curso_inicial: (hasValue(dijit.byId('mesInicial').value) && dijit.byId('anoInicial').value)? dijit.byId('mesInicial').value : null,
                nm_ano_curso_inicial: (hasValue(dijit.byId('mesInicial').value) && dijit.byId('anoInicial').value)? dijit.byId('anoInicial').value : null,
                nm_mes_curso_final: (dijit.byId('mesFinal').value && dijit.byId('anoFinal').value)? dijit.byId('mesFinal').value : null,
                nm_ano_curso_final: (dijit.byId('mesFinal').value && dijit.byId('anoFinal').value) ? dijit.byId('anoFinal').value : null,
                nm_arquivo_digitalizado: dojo.byId("edlayoutContratoDigitalizado").value,
                nm_arquivo_digitalizado_temporario: nomeContratoDigitalizadoTemporario,
                id_valor_incluso: dijit.byId("vlInclusoMaterial").checked,
                id_incorporar_valor_material: dijit.byId("incorporarMaterial").checked,
                nm_parcelas_material: nroPacelasMat,
                vl_parcela_material: valorParcelaMat,
                pc_bolsa_material: pcBolaMat,
                vl_parcela_liq_material: valorLiqMaterial,
                vl_material_contrato: valorMaterial,
                alterou_responsavel: ALTEROU_RESPONSAVEL,
                alterou_dt_vcto: ALTEROU_DT_VENCIMENTO,
                notas_material_didatico: notasMaterial
        }
        }

         
        if (dijit.byId("cadResponsavel").incluidoResponsavel && hasValue(dijit.byId("inputRelacMat") && validarCadastroResponsavelMat())) {
            if (dijit.byId("naturezaPessoaRelacMat").value == PAPELCPF)
                dadosRetorno.pessoaFisicaResponsavel = montarDataPessoaFisicaRelac();
            if (dijit.byId("naturezaPessoaRelacMat").value == PAPELCNPJ)
                dadosRetorno.pessoajuridicaResponsavel = montarObjPessoaJuridica();
        }
        return dadosRetorno;
    } catch (e) {
        postGerarLog(e);
    }
}

function turmaAguardando() {
    try {
        var dadosTurma = [];
        var gridTurma = dijit.byId("gridTurmaMat");
        hasValue(gridTurma) ? gridTurma.store.save() : null;
        if (hasValue(gridTurma) && hasValue(gridTurma._by_idx))
            var data = gridTurma._by_idx;
        if (hasValue(gridTurma) && hasValue(data) && data.length > 0)
            $.each(data, function (idx, val) {
                if (val.item.cd_situacao_aluno_turma == 9 || val.item.cd_situacao_aluno_turma == 8 || val.item.cd_situacao_aluno_turma == 1) {
                    dadosTurma.push({
                        noTurma: val.item.no_turma,
                        situacao: val.item.situacaoAlunoTurma
                    });
                }
            });
        return dadosTurma;
    } catch (e) {
        postGerarLog(e);
    }
}

function retornarPessoaRel() {
    try {
        var gridPesPessoaRel = dijit.byId("gridPesquisaPessoaRel");
        if (!hasValue(gridPesPessoaRel.itensSelecionados) || gridPesPessoaRel.itensSelecionados.length <= 0)
            caixaDialogo(DIALOGO_AVISO, msgNotSelectReg, null);
        else if (gridPesPessoaRel.itensSelecionados.length > 1)
            caixaDialogo(DIALOGO_ERRO, msgMaisDeUmRegSelect, null);
        else {
            //TODO Melhorar esse código  HAS_RESPONSAVEL_TIT??
            if (HAS_RESPONSAVEL_TIT == 1) {
                gerar_titulo = true;
                dojo.byId("cd_responsavel_tax").value = gridPesPessoaRel.itensSelecionados[0].cd_pessoa;
                dojo.byId("pessoaResponsavelTax").value = gridPesPessoaRel.itensSelecionados[0].no_pessoa;
            } else if (HAS_RESPONSAVEL_TIT == 2) {
                gerar_titulo = true;
                dojo.byId("cd_responsavel_mens").value = gridPesPessoaRel.itensSelecionados[0].cd_pessoa;
                dojo.byId("pessoaResponsavel").value = gridPesPessoaRel.itensSelecionados[0].no_pessoa;

                dojo.byId("cd_responsavel_mensCurso").value = gridPesPessoaRel.itensSelecionados[0].cd_pessoa;
                dojo.byId("pessoaResponsavelCurso").value = gridPesPessoaRel.itensSelecionados[0].no_pessoa;


                if (dijit.byId("ckMultipla").checked === true ||
                    dijit.byId("ckProfissional").checked === true ||
                    dijit.byId("ckInformatica").checked === true) {
                    changeOpcoesMensalidades(dijit.byId("gridDataCurso"));
                }
            } else if (HAS_RESPONSAVEL_TIT == 3) {
                dojo.byId("cd_pessoa_responsavelTit").value = gridPesPessoaRel.itensSelecionados[0].cd_pessoa;
                dojo.byId("pessoaResponsavelTit").value = gridPesPessoaRel.itensSelecionados[0].no_pessoa;
            } else if (HAS_RESPONSAVEL_TIT == 4) {
	            dojo.byId("cd_pessoa_responsavelTitAlterarResponsavel").value = gridPesPessoaRel.itensSelecionados[0].cd_pessoa;
	            dojo.byId("pessoaResponsavelTitAlterarResponsavel").value = gridPesPessoaRel.itensSelecionados[0].no_pessoa;
            }

        }
        dijit.byId("proPessoaRel").hide();
    } catch (e) {
        postGerarLog(e);
    }
}

function verificaParametros(pfuncao, novaMatricula) {
    dojo.xhr.get({
        url: Endereco() + "/api/escola/getParametrosMatricula",
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {

            if (hasValue(data.retorno)) {
                parametro_gerar_financeiro = data.retorno.id_gerar_financeiro_contrato;
                if (!data.retorno.id_empresa_propria) {
                    dojo.byId('tdVendaPacoteLb').style.display = "none";
                    dojo.byId('tdVendaPacote').style.display = "none";
                }
                else {
                    dojo.byId('tdVendaPacoteLb').style.display = "";
                    dojo.byId('tdVendaPacote').style.display = "";
                }
                if (data.retorno.id_nro_contrato_automatico)
                    dijit.byId("nm_contrato").set("disabled", true);
                else
                    dijit.byId("nm_contrato").set("disabled", false);

                if (data.retorno.id_tipo_numero_contrato == 3) { //MANUAL
                    dijit.byId("matriculaNro").set("disabled", false);
                    dijit.byId("matriculaNro").set("required", true);
                }
                else {
                    dijit.byId("matriculaNro").set("disabled", true);
                    dijit.byId("matriculaNro").set("required", false);
                }

                //Verifica o parametro de obrigatoriedade do plano de contas:
                if (data.retorno.id_requer_plano_contas_mov) {
                    dijit.byId('planoContasMat').set('required', true);
                    dijit.byId('planoContasTaxa').set('required', true);
                }
                else {
                    dijit.byId('planoContasMat').set('required', false);
                    dijit.byId('planoContasTaxa').set('required', false);
                }
                local_movto_parametro = data.retorno.cd_local_movto;
                dc_local_movto_parametro = data.retorno.dc_local_movto;
                if (data.retorno.cd_plano_conta_mat) {
                    dojo.byId("cd_plano_contas").value = data.retorno.cd_plano_conta_mat;
                    dijit.byId("planoContasMat").set("value", data.retorno.desc_plano_conta_mat);
                    dijit.byId("fkPlanoContasMat").set("disabled", true);
                    dijit.byId("limparPlanoContaTx").set("disabled", true);
                    dijit.byId("fkPlanoContasMat").sugestaoAtiva = true;
                }
                if (data.retorno.cd_plano_conta_tax) {
                    dojo.byId("cd_plano_contas_tx").value = data.retorno.cd_plano_conta_tax;
                    dijit.byId("planoContasTaxa").set("value", data.retorno.desc_plano_conta_tax);
                    dijit.byId("fkTaxaMatricula").set("disabled", true);
                    dijit.byId("limparPlanoContasMat").set("disabled", true);
                    dijit.byId("fkTaxaMatricula").sugestaoAtiva = true;
                }
                somar_desconto = data.retorno.id_somar_descontos_financeiros;
                if (hasValue(pfuncao)) {
                    pfuncao.call();
                } 
            }
        } catch (e) {
            postGerarLog(e);
        }
        //hideCarregando();

    },
    function (error) {
        //hideCarregando();
        apresentaMensagem('apresentadorMensagem', error);
    });
}

function verificaTxMatricula() {
    showCarregando();
    dojo.xhr.get({
        url: Endereco() + "/api/escola/getParametrosPlanoTxMatricula",
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            if (hasValue(data.retorno) && data.retorno.cd_plano_conta_tax) {
                dojo.byId("cd_plano_contas_tx").value = data.retorno.cd_plano_conta_tax;
                dijit.byId("planoContasTaxa").set("value", data.retorno.desc_plano_conta_tax);
                dijit.byId("fkTaxaMatricula").set("disabled", true);
                dijit.byId("limparPlanoContasMat").set("disabled", true);
                dijit.byId("fkTaxaMatricula").sugestaoAtiva = true;
            }
            showCarregando();
        } catch (e) {
            postGerarLog(e);
        }
    },
    function (error) {
        apresentaMensagem('apresentadorMensagem', error);
    });
}

//#endregion

//#region CHEQUE

function abrirTabCheque() {
    try {
        apresentaMensagem('apresentadorMensagem', null);
        if ((dijit.byId("tipoDocumento").value == CHEQUE || dijit.byId("tipoDocumentoTax").value == CHEQUE) && dojo.byId("cd_contrato").value > 0)
            montarCadastroCheque(dojo.byId("cd_contrato").value);
    } catch (e) {
        postGerarLog(e);
    }
}

function montarCadastroCheque(cdContrato) {
    dojo.xhr.get({
        url: Endereco() + "/api/financeiro/getChequeByContrato?id=" + cdContrato,
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            if (hasValue(data.retorno) && data.retorno.cd_cheque > 0) {
                apresentaMensagem("apresentadorMensagemMat", null);
                populaBanco(data.retorno.cd_banco, 'banco');
                loadDataCheque(data.retorno);
            }
        } catch (e) {
            postGerarLog(e);
        }
    },
    function (error) {
        apresentaMensagem("apresentadorMensagemMat", error);
        showCarregando();
    });
}

function montarPesqTitulo(cdContrato, gerar, pFuncao) {
    dojo.xhr.get({
        url: Endereco() + "/api/financeiro/getTitulosByContrato?cdContrato=" + cdContrato,
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            dataTit = jQuery.parseJSON(data).retorno;
            if (hasValue(dataTit) && dataTit.length > 0) {
                apresentaMensagem("apresentadorMensagemMat", null);
                var dataStore = new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: dataTit }) });
                var gridTitulo = dijit.byId("gridTitulo");
                gridTitulo.setStore(dataStore);
                //gridTitulo.sortInfo = 3;
                abriuTagTit = true;
                if (hasValue(pFuncao))
                    pFuncao.call();
            }
            else
                if (gerar)
                    gerar_titulo = true;
        } catch (e) {
            postGerarLog(e);
        }
    },
    function (error) {
        apresentaMensagem("apresentadorMensagemMat", error);
        showCarregando();
    });
}

function criarAtualizarTitulo(Memory, ObjectStore, xhr, ref, pFuncao, tipoOrigemChamada) {
    try {
        //gerar_titulo = true;
        if (dijit.byId("ckManual").checked && gerar_titulo && parametro_gerar_financeiro && !abriuTagTitulos) {
            montarPesqTitulo(parseInt(dojo.byId('cd_contrato').value), false, pFuncao);
            hideCarregando();
            return false;
        }
        if (!dijit.byId("ckManual").checked && gerar_titulo && parametro_gerar_financeiro) {
            abriuTagTitulos = true;
            var existeBolsa = false;
            var existeBolsa_old = false;
            var vl_perc_bolsa_contrato = hasValue(dijit.byId("perc_bolsa").value) ? dijit.byId("perc_bolsa").value : 0;
            var vl_perc_bolsa_contrato_old = hasValue(dijit.byId("perc_bolsa").old_value) ? dijit.byId("perc_bolsa").old_value : 0;
            var valorCurso = dijit.byId("vl_contrato").get('value'); //Era vl_curso
            valorCurso = unmaskFixed(valorCurso, 2);
            var CursoContrato = null;
           

            if (dijit.byId('ckMultipla').checked) {
                CursoContrato = montarCursos();
            }

            if (vl_perc_bolsa_contrato > 0)
                existeBolsa = true;
            if (vl_perc_bolsa_contrato_old > 0)
                existeBolsa_old = true;
            var gridTitulo = dijit.byId('gridTitulo').store.objectStore.data;
            if (!dijit.byId("tipoContratoAdto").aditamento && gridTitulo.length > 0)
                for (var i = 0; i < gridTitulo.length; i++) {
                    var vl_saldo_titulo_calc = gridTitulo[i].vl_saldo_titulo;
                    //if (hasValue(gridTitulo[i].vl_abatimento) && gridTitulo[i].vl_abatimento > 0)
                    //    vl_saldo_titulo_calc += gridTitulo[i].vl_abatimento;
                    if (gridTitulo[i].dc_tipo_titulo == "ME" || gridTitulo[i].dc_tipo_titulo == "MA" || gridTitulo[i].dc_tipo_titulo == "MM") {
                        if (existeBolsa) {
                            if (hasValue(gridTitulo[i].vl_material_titulo) && gridTitulo[i].vl_material_titulo > 0)
                                vl_saldo_titulo_calc = unmaskFixed(vl_saldo_titulo_calc + ((gridTitulo[i].vl_titulo - gridTitulo[i].vl_material_titulo + gridTitulo[i].vl_abatimento) * vl_perc_bolsa_contrato / 100), 2);
                            else
                                vl_saldo_titulo_calc = unmaskFixed(vl_saldo_titulo_calc + ((gridTitulo[i].vl_titulo + gridTitulo[i].vl_abatimento) * vl_perc_bolsa_contrato / 100), 2);
                        } else {
                            if (existeBolsa_old) {
                                if (hasValue(gridTitulo[i].vl_material_titulo) && gridTitulo[i].vl_material_titulo > 0)
                                    vl_saldo_titulo_calc = unmaskFixed(vl_saldo_titulo_calc + ((gridTitulo[i].vl_titulo - gridTitulo[i].vl_material_titulo + gridTitulo[i].vl_abatimento) * vl_perc_bolsa_contrato_old / 100), 2);
                                else
                                    vl_saldo_titulo_calc = unmaskFixed(vl_saldo_titulo_calc + ((gridTitulo[i].vl_titulo + gridTitulo[i].vl_abatimento) * vl_perc_bolsa_contrato_old / 100), 2);
                            }
                        }
                    }
                    if (unmaskFixed(vl_saldo_titulo_calc, 2) != gridTitulo[i].vl_titulo && gridTitulo[i].vl_titulo != gridTitulo[i].vl_saldo_titulo) {
                        var mensagensWeb = new Array();
                        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroTituloBaixado);
                        apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                        if (tipoOrigemChamada == SALVARMATRICULA)
                            hideCarregando();
                        return false;
                    }
                }

            var gridTitulo = dijit.byId("gridTitulo");
            gridTitulo.itensSelecionados = [];
            var verificaCheque = true;
            if ((dijit.byId("tipoDocumento").value == CHEQUE || dijit.byId("tipoDocumentoTax").value == CHEQUE) &&
                !hasValue(dojo.byId("nroPrimeiroCheque").value))
                verificaCheque = false;

            var verificaTxMatricula = true;
            if ((hasValue(dijit.byId("valorTaxaMatricula").value) && dijit.byId("valorTaxaMatricula").value > 0) &&
                (!hasValue(dijit.byId("tipoDocumentoTax").value) || !hasValue(dojo.byId("vencimentoTaxa").value)))
                verificaTxMatricula = false;

            if (hasValue(dojo.byId("dtaMatricula").value) &&
                    hasValue(dojo.byId("dia").value) &&
                    hasValue(dojo.byId("mes").value) &&
                    hasValue(dojo.byId("ano").value) &&
                    hasValue(dijit.byId("parcelas").value) &&
                    hasValue(dijit.byId("tipoDocumento").value) &&
                    hasValue(dojo.byId("cd_responsavel_mens").value) &&
                    dijit.byId("percentualResponsavel").value >= 0 &&
                    hasValue(dojo.byId("valorParcela").value) &&
                    verificaCheque && verificaTxMatricula
                ) {

                if (!dijit.byId("tipoContratoAdto").aditamento) {
                    var titulos = montarTitulo(RETORNARTITULOSMATRICULA);
                    var titulosTaxa = montarTituloTaxa();
                    if (titulos.length > 0) {
                        for (var i = 0; i < titulos.length; i++)
                            if (!titulos[i].cd_tipo_financeiro == CARTAO && (!hasValue(titulos[i].cd_local_movto) || titulos[i].cd_local_movto <= 0)) {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroLocalMovtoObrigatorio);
                                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                                if (tipoOrigemChamada == SALVARMATRICULA)
                                    hideCarregando();
                                return false;
                            }
                        xhr.post({
                            url: Endereco() + "/api/escola/postGerarTitulosGrid",
                            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                            handleAs: "json",
                            postData: ref.toJson({
                                //dt_final_contrato: dtaFinalMat,
                                //dt_matricula_contrato: dtaMatricula,
                                id_ajuste_manual: dojo.byId("ckManual").checked,
                                cd_tipo_financeiro: dijit.byId("tipoDocumento").value,
                                nm_dia_vcto: dojo.byId("dia").value,
                                nm_mes_vcto: dojo.byId("mes").value,
                                nm_ano_vcto: dojo.byId("ano").value,
                                nm_parcelas_mensalidade: dojo.byId("parcelas").value,
                                vl_curso_contrato: valorCurso,
                                vl_matricula_contrato: valorMatricula,
                                vl_parcela_contrato: valorParcela,
                                vl_desconto_contrato: valorDesconto,
                                vl_liquido_contrato: unmaskFixed(dijit.byId("valorFaturar").value, 2),
                                pc_desconto_contrato: desconto,
                                vl_divida_contrato: divida,
                                vl_desc_primeira_parcela: valorDescontoParcela,
                                titulos: titulos,
                                aditamentoMaxData: montarAditamento(),
                                id_tipo_aditamento: dijit.byId("tipoAditamento").value,
                                pc_responsavel_contrato: dijit.byId("percentualResponsavel").value,
                                pc_desconto_bolsa: hasValue(dijit.byId("perc_bolsa").value) ? dijit.byId("perc_bolsa").value : 0,
                                vl_pre_matricula: hasValue(dijit.byId('vl_pre_matricula').value) ? dijit.byId('vl_pre_matricula').value : 0,
                                titulosDescontoParcela: dijit.byId('gridDesconto').listaTitulosDescontos,
                                CursoContrato: CursoContrato,
                                id_tipo_contrato: verificaTipoCKMatricula(),
                                id_valor_incluso: dijit.byId("vlInclusoMaterial").checked,
                                id_incorporar_valor_material: dijit.byId("incorporarMaterial").checked,  //6260
                                nm_parcelas_material: unmaskFixed(dojo.byId("NroParMaterial").value, 0),
                                vl_parcela_material: unmaskFixed(dojo.byId("vlParcMaterial").value, 2),
                                pc_bolsa_material: unmaskFixed(dojo.byId("pcBolsaMaterial").value, 4),
                                vl_parcela_liq_material: unmaskFixed(dojo.byId("vlMaterialContratoCDesconto").value, 2),
                                vl_material_contrato: unmaskFixed(dojo.byId("vlMaterialContrato").value, 2),
                                DescontoContrato: montarDescontoContrato(),
                                titulosTaxaParcela: titulosTaxa

                            })
                        }).then(function (data) {
                            try {
                                dataTit = jQuery.parseJSON(data).retorno;
                                if (hasValue(dataTit) && dataTit.length > 0) {
                                    apresentaMensagem("apresentadorMensagemMat", null);
                                    var gridTitulo = dijit.byId("gridTitulo");
                                    gerar_titulo = false;
                                    dataStore = new ObjectStore({ objectStore: new Memory({ data: dataTit }) });
                                    gridTitulo.setStore(dataStore);

                                    if (hasValue(pFuncao))
                                        pFuncao.call();
                                }
                                else
                                    if (hasValue(pFuncao))
                                        pFuncao.call();
                            } catch (e) {
                                postGerarLog(e);
                            }

                        },
                        function (error) {
                            setarTabCadMatricula(false);
                            abriuTagTitulos = false;
                            if (tipoOrigemChamada == SALVARMATRICULA)
                                hideCarregando();
                            apresentaMensagem("apresentadorMensagemMat", error);
                        });
                    }
                    else {
                        var dataNull = Array();
                        var dataStore = new ObjectStore({ objectStore: new Memory({ data: dataNull }) });
                        gridTitulo.setStore(dataStore);
                        if (hasValue(pFuncao))
                            pFuncao.call();
                    }
                } else {
                    //Não gerar títulos quando o aditivo for "Reajuste Anual".
                    if (!hasValue(dijit.byId('tipoAditamento').value) || dijit.byId('tipoAditamento').value != REAJUSTE_ANUAL_ADITIVO) {

                        if (dijit.byId('tipoAditamento').value == ADICIONAR_PARCELAS)
                            dijit.byId("gridDescontoAdt").setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: pegarDescontoMatriculaOuDescontoAnteriorAditamento() }) }));

                        var titulos = montarTitulo(RETORNARTITULOADITAMENTO);
                        var taxaMatricula = new montarTaxaMatricula();
                        var valorParcela = dijit.byId("valorParcela").get('value');
                        valorParcela = unmaskFixed(valorParcela, 2);
                        var valorDescontoParcela = dijit.byId("descontoPrimeiraParcela").get('value');
                        valorDescontoParcela = unmaskFixed(valorDescontoParcela, 2);
                        var valorCurso = dijit.byId("valorCurso").get('value');
                        valorCurso = unmaskFixed(valorCurso, 2);
                        var divida = dijit.byId("divida").get('value');
                        divida = unmaskFixed(divida, 2);
                        var valorMatricula = dijit.byId("valorMatricula").get('value');
                        valorMatricula = unmaskFixed(valorMatricula, 2);
                        var desconto = dijit.byId("desconto").get('value');
                        desconto = unmaskFixed(desconto, 4);
                        var valorDesconto = dijit.byId("valorDesconto").get('value');
                        valorDesconto = unmaskFixed(valorDesconto, 2);
                        if (!validarAditamentoCrud(dojo.window)) {
                            var tabs = dijit.byId("tabContainerMatricula");
                            var pane = dijit.byId("tagAditivo");
                            tabs.selectChild(pane);
                            return false;
                        }
                        xhr.post({
                            url: Endereco() + "/api/escola/postGerarTitulosAditamento",
                            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                            handleAs: "json",
                            postData: ref.toJson(
                                {
                                    //dt_final_contrato: dtaFinalMat,
                                    //dt_matricula_contrato: dtaMatricula,
                                    id_ajuste_manual: dojo.byId("ckManual").checked,
                                    cd_tipo_financeiro: dijit.byId("tipoDocumento").value,
                                    nm_dia_vcto: dojo.byId("dia").value,
                                    nm_mes_vcto: dojo.byId("mes").value,
                                    nm_ano_vcto: dojo.byId("ano").value,
                                    nm_parcelas_mensalidade: dojo.byId("parcelas").value,
                                    vl_curso_contrato: valorCurso,
                                    vl_matricula_contrato: valorMatricula,
                                    vl_parcela_contrato: valorParcela,
                                    vl_desconto_contrato: valorDesconto,
                                    pc_desconto_contrato: desconto,
                                    vl_divida_contrato: divida,
                                    vl_desc_primeira_parcela: valorDescontoParcela,
                                    titulos: titulos,
                                    aditamentoMaxData: montarAditamento(),
                                    id_tipo_aditamento: dijit.byId("tipoAditamento").value,
                                    pc_responsavel_contrato: dijit.byId("percentualResponsavel").value,
                                    pc_desconto_bolsa: obterPercentualDescontoAditamentoBolsa(),
                                    DescontoContrato: pegarDescontoMatriculaOuDescontoAnteriorAditamento(),
                                    valorSaldoMatricula: dijit.byId("vl_saldo_matricula").value
                                })
                        }).then(function (data) {
                            try {
                                var gridTitulo = dijit.byId("gridTitulo");
                                dataTit = jQuery.parseJSON(data).retorno;
                                if (hasValue(dataTit) && dataTit.length > 0) {
                                    apresentaMensagem("apresentadorMensagemMat", null);
                                    var dataStore = new ObjectStore({ objectStore: new Memory({ data: dataTit }) });

                                    gerar_titulo = false;
                                    gridTitulo.setStore(dataStore);

                                    if (hasValue(pFuncao))
                                        pFuncao.call();
                                }
                            } catch (e) {
                                postGerarLog(e);
                            }
                        },
                            function (error) {
                                if (tipoOrigemChamada == SALVARMATRICULA)
                                    hideCarregando();
                                apresentaMensagem("apresentadorMensagemMat", error);
                            });
                    } else {
                        var mensagensWeb = new Array();
                        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "Não se pode mexer nas conidções de pagamento quando o último aditivo for \"Reajuste Anual\", favor faça um novo aditivo.");
                        apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                        return false;
                    }
                }
            }
            else {
                var camposPreencher = "";
                if (!hasValue(dojo.byId("dtaMatricula").value))
                    camposPreencher = " data de matrícula ";
                if (!hasValue(dojo.byId("dia").value))
                    camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", dia" : " dia";
                if (!hasValue(dojo.byId("mes").value))
                    camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", mês" : " mês";
                if (!hasValue(dojo.byId("ano").value))
                    camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", ano" : " ano";
                if (!hasValue(dojo.byId("parcelas").value))
                    camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", nº de parcelas" : " nº de parcelas";
                if (!hasValue(dijit.byId("tipoDocumento").value))
                    camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", tipo financeiro" : " tipo financeiro";
                if (!hasValue(dojo.byId("cd_responsavel_mens").value))
                    camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", responsável" : " responsável";
                if (!hasValue(dojo.byId("percentualResponsavel").value))
                    camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", percentual responsável" : " percentual responsável";
                if (!hasValue(dojo.byId("valorParcela").value))
                    camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", valor da parcela" : " valor da parcela";

                //Quando for cheque existe mais informações  a ser preenchida
                if (dijit.byId("tipoDocumento").value == CHEQUE || dijit.byId("tipoDocumentoTax").value == CHEQUE)
                    if (!hasValue(dojo.byId("nroPrimeiroCheque").value))
                        camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", nro. primeiro cheque" : " nro. primeiro cheque";
                if (hasValue(dijit.byId("valorTaxaMatricula").value) && dijit.byId("valorTaxaMatricula").value > 0) {
                    if (!hasValue(dijit.byId("tipoDocumentoTax").value))
                        camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", tipo financeiro da taxa de matrícula" : " tipo financeiro da taxa de matrícula";
                    if (!hasValue(dojo.byId("vencimentoTaxa").value))
                        camposPreencher = hasValue(camposPreencher) ? camposPreencher + ", vencimento 1ª da taxa de matrícula" : " vencimento 1ª da taxa de matrícula";
                }

                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, msgInfCamposGerarTitulo + camposPreencher + ".");
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                hideCarregando();

                var dataTit = new Array();
                var dataStore = new ObjectStore({ objectStore: new Memory({ data: dataTit }) });
                gridTitulo.setStore(dataStore);

            }
        }
        else {
            if (hasValue(pFuncao))
                pFuncao.call();
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function loadDataCheque(cheque) {
    try {
        dojo.byId("cd_cheque").value = cheque.cd_cheque;
        dojo.byId("cd_contrato").value = cheque.cd_contrato;
        dojo.byId("emissorChequeName").value = cheque.no_emitente_cheque;
        dijit.byId("banco").set("value", cheque.cd_banco);
        dojo.byId("agencia").value = cheque.no_agencia_cheque;
        dojo.byId("nroAgencia").value = cheque.nm_agencia_cheque;
        dojo.byId("dgAgencia").value = cheque.nm_digito_agencia_cheque;
        dojo.byId("nroContaCorrente").value = cheque.nm_conta_corrente_cheque;
        dojo.byId("dgContaCorrente").value = cheque.nm_digito_cc_cheque;
        dojo.byId("nroPrimeiroCheque").value = cheque.nm_primeiro_cheque;
    } catch (e) {
        postGerarLog(e);
    }
}

function populaBanco(idBanco, field) {
    // Popula os produtos:
    dojo.xhr.get({
        url: Endereco() + "/api/financeiro/getAllBanco",
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (dataBanco) {
        try {
            if (hasValue(dataBanco.retorno))
                loadBanco(dataBanco.retorno, field, idBanco);
        } catch (e) {
            postGerarLog(e);
        }
    },
    function (error) {
        apresentaMensagem('apresentadorMensagemMat', error);
    });
}

function loadBanco(items, linkBanco, idBanco) {
    require(["dojo/store/Memory", "dojo/_base/array"],
    function (Memory, Array) {
        try {
            var itemsCb = [];
            var cbBanco = dijit.byId(linkBanco);

            Array.forEach(items, function (value, i) {
                itemsCb.push({ id: value.cd_banco, name: value.no_banco });
            });
            var stateStore = new Memory({
                data: itemsCb
            });
            cbBanco.store = stateStore;
            if (hasValue(idBanco)) {
                cbBanco._onChangeActive = false;
                cbBanco.set("value", idBanco);
                cbBanco._onChangeActive = true;
            }
        } catch (e) {
            postGerarLog(e);
        }
    });
}

function validarMatriculaCadastro(windowUtils) {
    try {


        var validado = true;

        if (!dijit.byId("formPrincipalMat").validate() || !dijit.byId("tipoMatricula").validate()) {
            dijit.byId("titPrincipalMat").set("open", true);
            validado = false;
        }

        if (!dijit.byId("formSemTurmaMat").validate()) {
            dojo.byId("tagSemTurma").style.display = "";
            dijit.byId("tagSemTurma").set("open", true);
            validado = false;
        }
        //if (!dijit.byId("formOpcoesPgtoMat").validate()) {
        //    dijit.byId("tagNegociacao").set("open", true);
        //    dijit.byId("tabContainerNegociacao").selectChild(dijit.byId("tabMensalidade"));
        //    dijit.byId("opcoes").set("open", true);
        //    validado = false;
        //}
        if (!dijit.byId("formValoresPgtoMat").validate()) {
            dijit.byId("tagNegociacao").set("open", true);
            dijit.byId("tabContainerNegociacao").selectChild(dijit.byId("tabMensalidade"));
            dijit.byId("valores").set("open", true);
            validado = false;
        }

        if ((dijit.byId("tipoDocumento").value == CHEQUE || dijit.byId("tipoDocumentoTax").value == CHEQUE) && !dijit.byId("formChequeMat").validate()) {
            dijit.byId("tagNegociacao").set("open", true);
            dijit.byId("tabContainerNegociacao").selectChild(dijit.byId("idCheque"));
            validado = false;
        }

        //taxa de matricula
        var taxaMatricula = dijit.byId('valorTaxaMatricula').get('value');

        if (!isNaN(taxaMatricula) && taxaMatricula != "")
            taxaMatricula = parseFloat(taxaMatricula);

        if (eval(taxaMatricula) > 0) {

            dijit.byId("vencimentoTaxa").set("required", true);
            dijit.byId("tipoDocumentoTax").set("required", true);

            if (!dijit.byId("formTaxaMatricula").validate()) {
                dijit.byId("tagNegociacao").set("open", true);
                dijit.byId("tabContainerNegociacao").selectChild(dijit.byId("tabTaxaMatricula"));
                validado = false;
            }
        } else {
            dijit.byId("vencimentoTaxa").set("required", false);
            dijit.byId("tipoDocumentoTax").set("required", false);
            dijit.byId('planoContasTaxa').set('required', false);
        }
        if (hasValue(dijit.byId("vlMaterialContrato").value) || hasValue(dijit.byId("vlMaterialContratoCDesconto").value) || //hasValue(dijit.byId("pcBolsaMaterial").value) ||
            hasValue(dijit.byId("NroParMaterial").value) || hasValue(dijit.byId("vlParcMaterial").value) || dijit.byId("vlInclusoMaterial").checked || dijit.byId("incorporarMaterial").checked) {
            if (!dijit.byId("vlInclusoMaterial").checked && !dijit.byId("incorporarMaterial").checked) {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroCamposRequiridosMaterial);
                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                validado = false;
            }
            if (dijit.byId("incorporarMaterial").checked && dijit.byId("vlMaterialContratoCDesconto").value <= 0 && hasValue(dijit.byId("pcBolsaMaterial").value) && dijit.byId("pcBolsaMaterial").value != 100) {
                mostrarMensagemCampoValidado(windowUtils, dijit.byId("vlMaterialContratoCDesconto"));
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroCamposRequiridosValorMaterialCDesc);
                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                validado = false;
            }

            dijit.byId("vlInclusoMaterial").set("required", true);
            dijit.byId("vlParcMaterial").set("required", true);
            if (hasValue(dijit.byId("pcBolsaMaterial").value))
                dijit.byId("vlMaterialContratoCDesconto").set("required", true);
            else
                dijit.byId("vlMaterialContrato").set("required", true);
        } else {
            dijit.byId("NroParMaterial").set("required", false);
            dijit.byId("vlParcMaterial").set("required", false);
            dijit.byId("vlMaterialContratoCDesconto").set("required", false);
            dijit.byId("vlMaterialContrato").set("required", false);
        }
        //LBM retirado pois vai ficar zero mesmo
        //if ((dijit.byId("incorporarMaterial").checked || dijit.byId("vlInclusoMaterial").checked) && dijit.byId("vlMaterialContrato").value <= 0)
        //    dijit.byId("vlMaterialContrato").set("value", null);

        return validado;
    } catch (e) {
        postGerarLog(e);
    }
}

function deletarItemSelecionadoTitulo(Memory, ObjectStore) {
    try {
        var grid = dijit.byId("gridTitulo");
        if (hasValue(grid)) {
            var dados = grid.store.objectStore.data;
            var restaurarTitulos = false;
            var nomeId = 'id';
            if (dados.length > 0 && hasValue(grid.itensSelecionados) && grid.itensSelecionados.length > 0) {
                var cloneTitulos = grid.store.objectStore.data.slice();
                quickSortObj(cloneTitulos, 'id');
                $.each(grid.itensSelecionados, function (index, value) {
                    if (binaryObjSearch(cloneTitulos, nomeId, eval('value.' + nomeId)) != null) {
                        var posicao = binaryObjSearch(cloneTitulos, nomeId, eval('value.' + nomeId));
                        if (hasValue(cloneTitulos[posicao].possuiBaixa) && cloneTitulos[posicao].possuiBaixa) {
                            restaurarTitulos = true;
                            var mensagensWeb = new Array();
                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroNotExclItulo);
                            apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                            return false;
                        }
                        cloneTitulos.splice(posicao, 1); // Remove o item do array
                    }
                });

                if (!restaurarTitulos) {
                    grid.itensSelecionados = new Array();
                    dados = cloneTitulos;
                }
                var dataStore = new ObjectStore({ objectStore: new Memory({ data: dados }) });
                grid.setStore(dataStore);
                grid.update();
            }
            else
                caixaDialogo(DIALOGO_AVISO, 'Selecione algum registro para excluir.', null);
        }
    } catch (e) {
        postGerarLog(e);
    }
}

//#endregion

//#region Desconto e valores - getSearchDescontoContrato - getValoresForMatricula - retornarTipoDescontoFK - getSearchTaxaMatricula

function getSearchDescontoContrato(desconto, pFuncao, xhr, ObjectStore, Memory) {
    try {
        var grid = dijit.byId("gridDesconto");
        if (hasValue(desconto)) {
            dijit.byId("desconto").set("open", true);
            var dataStore = new ObjectStore({ objectStore: new Memory({ data: desconto, idProperty: "cd_desconto_contrato" }) });
            grid.setStore(dataStore);
            grid.itensSelecionados = [];
            dijit.byId("gridDesconto").update();
        }
        getValoresParaDesconto(null, null, null, false);
        if (hasValue(pFuncao)) {
            pFuncao.call();
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function getValoresForMatricula(xhr, cd_curso, cd_duracao, cd_regime, isEditar) {
    try {
        var dtaMatricula = dojo.byId('dtaMatricula').value;
        if (dtaMatricula == "") {
            dijit.byId('dtaMatricula').attr("value", new Date(ano, mes, dia));
            dtaMatricula = dojo.byId('dtaMatricula').value;
            dijit.byId('dtaMatricula').reset();
        }

        if (cd_curso <= 0)
            cd_curso = hasValue(dijit.byId('cd_curso_atual')) ? dijit.byId('cd_curso_atual').get('value') : 0;

        if (cd_duracao <= 0)
            cd_duracao = hasValue(dijit.byId('cd_duracao_atual')) ? dijit.byId('cd_duracao_atual').get('value') : 0;

        if (cd_regime <= 0)
            cd_regime = hasValue(dijit.byId('cd_regime_atual')) ? dijit.byId('cd_regime_atual').get('value') : 0;

        xhr.get({
            preventCache: true,
            url: Endereco() + "/api/financeiro/getValoresForMatricula?dta_matricula=" + dtaMatricula + "&cd_curso=" + cd_curso + "&cd_duracao=" + cd_duracao + "&cd_regime=" + cd_regime,
            handleAs: "json",
            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
        }).then(function (data) {
            try {
                data = jQuery.parseJSON(data).retorno;
                var isAula = dijit.byId('ckAula').checked;
                if (hasValue(data)) {
                    onChangeActive(false);
                    if (!isEditar) {
                        apresentaMensagem("apresentadorMensagemMat", "");
                        apresentaMensagem("apresentadorMensagemsDataCurso", "");
                        if (hasValue(data.val_matricula) <= 0) {
                            var mensagensWeb = new Array();
                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, msgInfValoresTaxaMatricula);
                            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, false);
                            apresentaMensagem("apresentadorMensagemsDataCurso", mensagensWeb, false);

                            onChangeActive(true);
                            desabilitarCampos(data.vl_total, isEditar);
                            return false;
                        }

                        if (data.nm_parcelas != null || data.nm_parcelas > 0)
                            dijit.byId('parcelas').set('value', data.nm_parcelas);
                        else
                            dijit.byId('parcelas').set('value', 1);
                        if (dijit.byId('parcelas').value > 0 && !hasValue(dojo.byId('dtaFinalMat').value)) {
                            mesI = dijit.byId('mesInicial').value + dijit.byId('parcelas').value - 1;
                            if (hasValue(dijit.byId("dtaInicioMat").value)) 
                                anoI = dijit.byId("dtaInicioMat").value.getFullYear();
                            if (mesI > 12) {
                                while (mesI > 12) {
                                    dijit.byId('mesFinal').set("value", mesI - 12);
                                    if (hasValue(dijit.byId("dtaInicioMat").value)) 
                                        dijit.byId('anoFinal').set("value", anoI + 1);
                                    mesI = mesI - 12;
                                    anoI = anoI + 1;
                                }
                            }
                            else {
                                dijit.byId('mesFinal').set("value", mesI);
                                if (hasValue(dijit.byId("dtaInicioMat").value)) 
	                                dijit.byId('anoFinal').set("value", anoI);
                            }
                        }
                        dijit.byId('valorMatricula').set('value', data.vl_matricula);
                        dijit.byId('valorTaxaMatricula').set('value', data.vl_matricula);
                        dojo.byId('valorTaxaMatricula').old_value = dojo.byId('valorTaxaMatricula').value;

                        if (!isAula) {
                            dijit.byId('valorParcela').set('value', data.val_parcela);
                            dijit.byId('valorParcela').value = parseFloat(removedecimal(data.val_parcela));
                            dijit.byId('valorParcela').old_value = data.val_parcela;

                            dijit.byId('edValParcela').set('value', data.val_parcela);
                            dijit.byId('edValParcela').value = parseFloat(removedecimal(data.val_parcela));
                            dijit.byId('edValParcela').old_value = data.val_parcela;
                        }
                        else {
                            dijit.byId('valorParcela').set('value', data.val_aula);
                            dijit.byId('valorParcela').value = parseFloat(removedecimal(data.val_aula));
                            dijit.byId('valorParcela').old_value = data.val_aula;

                            dijit.byId('edValParcela').set('value', data.val_aula);
                            dijit.byId('edValParcela').value = parseFloat(removedecimal(data.val_aula));
                            dijit.byId('edValParcela').old_value = data.val_aula;
                        }

                        var nroParcelas = getNroParcelas("parcelas");
                        var valorLiquido = calcularERetornarValorFaturar(data.vl_total, data.nm_parcelas, 0);
                        dijit.byId('valorFaturar')._onChangeActive = false;
                        dijit.byId('valorFaturar').set('value', unmaskFixed(valorLiquido, 2));
                        dijit.byId('valorFaturar').old_value = valorLiquido;
                        dijit.byId('valorFaturar')._onChangeActive = true;
                        
                        if (verificaMatriculaNormal()) {
                            dijit.byId('vl_contrato')._onChangeActive = false;
                            if (data.vl_total != null && parseFloat(data.vl_total) > 0) {
                                dijit.byId('vl_contrato').set('value', data.vl_total);
                            } else {
                                dijit.byId('vl_contrato').set('value', 0);
                            }
                            dijit.byId('vl_contrato')._onChangeActive = true;
                        }
                    }
                    onChangeActive(true);
                    desabilitarCampos(data.vl_total, isEditar);
                }
            } catch (e) {
                postGerarLog(e);
            }
        },
        function (error) {
            apresentaMensagem('apresentadorMensagemMat', error);
        });
    } catch (e) {
        postGerarLog(e);
    }
}


function getValoresTabelaPrecoCursoGrid(xhr, cd_curso, cd_duracao, cd_regime, isEditar) {
    try {
        var dtaMatricula = dojo.byId('dtaMatricula').value;
        if (cd_curso <= 0)
            cd_curso = hasValue(dijit.byId('cd_curso_atualCurso')) ? dijit.byId('cd_curso_atual').get('value') : 0;

        if (cd_duracao <= 0)
            cd_duracao = hasValue(dijit.byId('cd_duracao_atual_curso')) ? dijit.byId('cd_duracao_atual').get('value') : 0;

        if (cd_regime <= 0)
            cd_regime = hasValue(dijit.byId('cd_regime_atual')) ? dijit.byId('cd_regime_atual').get('value') : 0;

        var isAula = dijit.byId('ckAula').checked;
        xhr.get({
            preventCache: true,
            url: Endereco() + "/api/financeiro/getValoresForMatricula?dta_matricula=" + dtaMatricula + "&cd_curso=" + cd_curso + "&cd_duracao=" + cd_duracao + "&cd_regime=" + cd_regime,
            handleAs: "json",
            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
        }).then(function (data) {
            try {
                data = jQuery.parseJSON(data).retorno;
                if (hasValue(data)) {
                    onChangeActive(false);
                    if (!isEditar) {
                        apresentaMensagem("apresentadorMensagemMat", "");
                        apresentaMensagem("apresentadorMensagemsDataCurso", "");
                        if (hasValue(data.val_matricula) <= 0) {
                            var mensagensWeb = new Array();
                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, msgInfValoresTaxaMatricula);
                            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, false);
                            apresentaMensagem("apresentadorMensagemsDataCurso", mensagensWeb, false);

                            onChangeActive(true);
                            //desabilitarCampos(data.vl_total, isEditar);
                            desabilitarCamposValorCursoGrid(data.vl_total, isEditar);
                            return false;
                        }

                        if (data.nm_parcelas != null || data.nm_parcelas > 0)
                            dijit.byId('parcelasCurso').set('value', data.nm_parcelas);
                        else
                            dijit.byId('parcelasCurso').set('value', 1);
                        dijit.byId('valorMatriculaGrid').set('value', data.vl_matricula);
                        dojo.byId('valorMatriculaGrid').old_value = dojo.byId('valorMatriculaGrid').value;

                        if (!isAula) {
                            dijit.byId('valorParcelaGrid').set('value', data.val_parcela);
                            dijit.byId('valorParcelaGrid').value = parseFloat(removedecimal(data.val_parcela));
                            dijit.byId('valorParcelaGrid').old_value = data.val_parcela;
                        }
                        else {
                            dijit.byId('valorParcelaGrid').set('value', data.val_aula);
                            dijit.byId('valorParcelaGrid').value = parseFloat(removedecimal(data.val_aula));
                            dijit.byId('valorParcelaGrid').old_value = data.val_aula;
                        }

                        var nroParcelas = getNroParcelas("parcelasCurso");
                        var valorLiquido = calcularERetornarValorFaturar(data.vl_total, data.nm_parcelas, 0);
                        dijit.byId('valorLiquidoGrid')._onChangeActive = false;
                        dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(valorLiquido, 2));
                        dijit.byId('valorLiquidoGrid').old_value = valorLiquido;
                        dijit.byId('valorLiquidoGrid')._onChangeActive = true;
                        var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(valorLiquido, nroParcelas);
                        dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
                        dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
                        dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
                        dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
                        dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;
                    }
                    onChangeActive(true);
                    desabilitarCamposValorCursoGrid(data.vl_total, isEditar);
                }
               
            } catch (e) {
                postGerarLog(e);
            }
        },
        function (error) {
            apresentaMensagem('apresentadorMensagemMat', error);
        });
    } catch (e) {
        postGerarLog(e);
    }
}


function retornarTipoDescontoFK() {
    try {
        var tipoOrigem = dojo.byId("idOrigemTipoDescFK").value;
        if (tipoOrigem == ORIGEMDESCMENSALMATRICULA) {
            //variáveis valores
            var valorCurso = dijit.byId('vl_contrato').get('value');
            valorCurso = unmaskFixed(valorCurso, 2);

            var parcelas = dijit.byId('parcelas').get('value');
            parcelas = unmaskFixed(parcelas, 2);

            // gerar_titulo = true;
            require(["dojo/store/Memory", "dojo/data/ObjectStore"],
                function (Memory, ObjectStore) {
                    var gridDesconto = dijit.byId("gridDesconto");
                    var gridTipoDescontoFK = dijit.byId("gridTipoDescontoFK");
                    atualizar_desconto = true;
                    if (!dijit.byId("tipoContratoAdto").aditamento) {
                        if (!hasValue(gridTipoDescontoFK.itensSelecionados) || gridTipoDescontoFK.itensSelecionados.length <= 0)
                            caixaDialogo(DIALOGO_AVISO, msgNotSelectReg, null);
                        else {
                            apresentaMensagem("apresentadorMensagemMat", null);
                            if (eval(valorCurso) > 0) {
                                var storeGridTipoDesconto = (hasValue(gridDesconto) && hasValue(gridDesconto.store.objectStore.data)) ? gridDesconto.store.objectStore.data : [];

                                if (storeGridTipoDesconto != null && storeGridTipoDesconto.length > 0) {
                                    $.each(gridTipoDescontoFK.itensSelecionados, function (idx, value) {
                                        insertObjSort(gridDesconto.store.objectStore.data, "cd_tipo_desconto", {
                                            cd_tipo_desconto: value.cd_tipo_desconto,
                                            dc_tipo_desconto: value.dc_tipo_desconto,
                                            pc_desconto: value.pc_desc,
                                            vl_desconto_contrato: value.vl_desconto,
                                            id_incide_baixa: value.id_incide_baixa,
                                            id_desconto_ativo: value.id_tipo_desconto_ativo,
                                            nm_parcela_ini: 0,
                                            nm_parcela_fim: 0
                                        });
                                    });
                                    gridDesconto.setStore(new ObjectStore({ objectStore: new Memory({ data: gridDesconto.store.objectStore.data }) }));

                                } else {
                                    var dados = [];
                                    $.each(gridTipoDescontoFK.itensSelecionados, function (index, value) {
                                        insertObjSort(dados, "cd_tipo_desconto", {
                                            cd_tipo_desconto: value.cd_tipo_desconto,
                                            dc_tipo_desconto: value.dc_tipo_desconto,
                                            pc_desconto: value.pc_desc,
                                            vl_desconto_contrato: value.vl_desconto,
                                            id_incide_baixa: value.id_incide_baixa,
                                            id_desconto_ativo: value.id_tipo_desconto_ativo,
                                            nm_parcela_ini: 0,
                                            nm_parcela_fim: 0
                                        });
                                    });
                                    gridDesconto.setStore(new ObjectStore({ objectStore: new Memory({ data: dados }) }));
                                }
                                dijit.byId("proTipoDescontoFK").hide();
                                gerar_titulo = true;
                            }//if valorCurso
                            else {
                                var mensagensWeb = new Array();
                                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "Informe o valor do curso, antes de atribuir o desconto.");
                                apresentaMensagem("apresentadorMensagemTipoDescontoFK", mensagensWeb, false);
                                return false;
                            }
                        }//if gridTipoDescontoFK.itensSelecionados
                    } else
                        caixaDialogo(DIALOGO_ERRO, msgErroIncluirDescontoContratoAditado, null);
                });
        } else {
            apresentaMensagem("apresentadorMensagemMat", null);
            var gridDescontoAdt = dijit.byId("gridDescontoAdt");
            var gridTipoDescontoFK = dijit.byId("gridTipoDescontoFK");
            var cloneItens = new Array();
            var storeGridTipoDesconto = (hasValue(gridDescontoAdt) && hasValue(gridDescontoAdt.store.objectStore.data)) ? gridDescontoAdt.store.objectStore.data : [];
            cloneItens = cloneArray(storeGridTipoDesconto);
            $.each(gridTipoDescontoFK.itensSelecionados, function (idx, value) {
                insertObjSort(cloneItens, "cd_tipo_desconto", {
                    cd_tipo_desconto: value.cd_tipo_desconto,
                    dc_tipo_desconto: value.dc_tipo_desconto,
                    pc_desconto: value.pc_desc,
                    vl_desconto_contrato: value.vl_desconto,
                    id_incide_baixa: value.id_incide_baixa,
                    id_desconto_ativo: value.id_tipo_desconto_ativo,
                    nm_parcela_ini: 0,
                    nm_parcela_fim: 0
                });
            });
            gridDescontoAdt.update();
            gridDescontoAdt.setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: cloneItens }) }));
            dijit.byId("proTipoDescontoFK").hide();
            gerar_titulo = false;
            //calcularESetarValoresDescontoAdt(ADICIONAR, null, null, true, null);
            simuladorAditamento(gerar_titulo);

            alternarHabilitacaoValorAditivo(cloneItens);
        }
    } catch (e) {
        postGerarLog(e);
    }

}

function getSearchTaxaMatricula(cd_contrato) {
    dojo.xhr.get({
        url: Endereco() + "/api/secretaria/getSearchTaxaMatricula?cd_contrato=" + cd_contrato,
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
        idProperty: "cd_desconto_contrato"
    }).then(function (data) {
        try {
            onChangeActive(false);
            var result = $.parseJSON(data).retorno;
            if (result != null) {
                populaTaxaMatricula(result, cd_contrato);
            }
            onChangeActive(true);
        } catch (e) {
            postGerarLog(e);
        }
    },
    function (error) {
        apresentaMensagem('apresentadorMensagemMat', error);
    });
}

function populaTaxaMatricula(result, cd_contrato, bancos, cheque) {
    try {
        if (hasValue(result)) {
            dojo.byId('cd_taxa_matricula').value = result.cd_taxa_matricula;
            dijit.byId('valorTaxaMatricula').set("value", result.vl_matricula_taxa);
            dojo.byId("valorTaxaMatricula").old_value = dojo.byId("valorTaxaMatricula").value;
            dijit.byId('numeroParcelasTaxa').set('value', result.nm_parcelas_taxa);
            dojo.byId("numeroParcelasTaxa").old_value = dojo.byId("numeroParcelasTaxa").value;
            dijit.byId('tipoDocumentoTax').set('value', result.cd_tipo_financeiro_taxa);
            dojo.byId("tipoDocumentoTax").old_value = dojo.byId("tipoDocumentoTax").value;
            dojo.byId('cd_responsavel_tax').value = result.cd_pessoa_responsavel_taxa;
            dijit.byId('percentualResponsavelTax').set('value', result.pec_responsavel_taxa);
            dojo.byId("percentualResponsavelTax").old_value = dojo.byId("percentualResponsavelTax").value;
            dojo.byId('cd_plano_contas_tx').value = result.cd_plano_conta_taxa;
            dojo.byId("vencimentoTaxa").value = result.dta_vcto_taxa;
            dojo.byId("vencimentoTaxa").old_value = dojo.byId("vencimentoTaxa").value;
            dijit.byId("vencimentoTaxa").set('value', result.dt_vcto_taxa);
            dojo.byId("pessoaResponsavelTax").value = result.no_pessoa_responsavel;
            dojo.byId("planoContasTaxa").value = result.dc_plano_conta_taxa;
            if (result.cd_plano_conta_taxa > 0)
                if (!dijit.byId("fkPlanoContasMat").sugestaoAtiva)
                    dijit.byId("limparPlanoContaTx").set('disabled', false);
            if (result.cd_tipo_financeiro_taxa == CHEQUE) {
                dijit.byId('idCheque').setAttribute('disabled', false);
                loadBanco(bancos, 'banco', cheque.cd_banco);
                loadDataCheque(cheque);
            }
        }
    } catch (e) {
        postGerarLog(e);
    }
}

//#endregion

//#region regras para a impressão de contrato

function imprimirContrato(cd_contrato) {
    dojo.xhr.get({
        url: Endereco() + "/relatorio/postImprimirContrato?cd_contrato=" + cd_contrato,
        sync: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            if (hasValue(data.erro))
                apresentaMensagem('apresentadorMensagem', data);
            else
                window.open(data);
        } catch (e) {
            postGerarLog(e);
        }
    },
    function (error) {
        apresentaMensagem('apresentadorMensagem', error);
    });
}
//#endregion

//#region metodos tag Opções de Impressão/Aditamento

function loadSelectNomeContrato(nomesContrato, cdNomeContrato, Memory) {
    try {
        var dados = [];
        var eAditamento = false;
        $.each(nomesContrato, function (index, val) {
            if (hasValue(cdNomeContrato) && val.cd_nome_contrato == cdNomeContrato && val.id_motivo_aditamento)
                eAditamento = true;
            dados.push({
                'id': val.cd_nome_contrato,
                'name': val.no_contrato,
                'id_previsao_dias': val.id_previsao_dias,
                'id_valor_hora_aula': val.id_valor_hora_aula,
                'id_motivo_aditamento': val.id_motivo_aditamento,
                'id_tipo_pgto': val.id_tipo_pgto,
                'id_nome_ativo': val.id_nome_ativo,
                'id_valor_material': val.id_valor_material
            });
        });

        var stateStore = new Memory({
            data: dados
        });
        var tipoContratoAdto = dijit.byId("tipoContratoAdto");
        tipoContratoAdto.store = stateStore;
        tipoContratoAdto._onChangeActive = false;
        if (hasValue(cdNomeContrato))
            tipoContratoAdto.set("value", cdNomeContrato);
        tipoContratoAdto._onChangeActive = true;
        //marcarMatriculaComLayoutAditamento(tipoContratoAdto, eAditamento, cdNomeContrato);
    } catch (e) {
        postGerarLog(e);
    }
}

function marcarMatriculaComLayoutAditamento(compAditamento, bool, cdNomeContrato) {
    try {
        var aditamento = false;
        apresentaMensagem("apresentadorMensagemMat", null);
        if (hasValue(compAditamento)) {
            compAditamento.aditamento = bool;
            travarMatriculaGerarTitulo(bool);
            if (bool)
                aditamento = bool;
        }
        else {
            var compLayoutContrto = dijit.byId("tipoContratoAdto");
            var eAditamento = false;
            if (hasValue(cdNomeContrato)) {
                var nomesContrato = compLayoutContrto.store.data;
                $.each(nomesContrato, function (index, val) {
                    if (hasValue(cdNomeContrato) && val.id == cdNomeContrato && val.id_motivo_aditamento) {
                        eAditamento = true;
                        return false;
                    }
                });
                if (eAditamento && hasValue(dojo.byId("cd_contrato").value) && dojo.byId("cd_contrato").value == 0) {
                    var mensagensWeb = new Array();
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroAditandoNovaMatricula);
                    apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                    compLayoutContrto._onChangeActive = false;
                    compLayoutContrto.reset();
                    compLayoutContrto._onChangeActive = true;

                    ativarTagAditamento("none");
                    //var tabs = dijit.byId("tabContainerMatricula");
                    //var pane = dijit.byId("tabPrincipalMat");
                    //tabs.selectChild(pane);

                    return false;
                } else
                    compLayoutContrto.aditamento = eAditamento;
            } else
                compLayoutContrto.aditamento = eAditamento;
            travarMatriculaGerarTitulo(eAditamento);
            aditamento = eAditamento;
        }
        if (!aditamento) {
            dojo.byId('tdLabelTifpoFinanceiro').style.display = "none";
            dojo.byId('tdTifpoFinanceiro').style.display = "none";

            dojo.byId('tdLabelTifpoFinanceiroDisabled').style.display = "";
            dojo.byId('tdTifpoFinanceiroDisabled').style.display = "";

            var contratoBD = dijit.byId("editContrato").value;
            var contratoJaAditado = false;
            var gridAditamento = dijit.byId("gridAditamento");
            if (hasValue(gridAditamento) && hasValue(gridAditamento.store.objectStore.data) && gridAditamento.store.objectStore.data.length > 0) {
                var lenthAdt = gridAditamento.store.objectStore.data.length;
                lenthAdt = lenthAdt - 1;
                if (hasValue(gridAditamento.store.objectStore.data[lenthAdt].id_tipo_aditamento))
                    contratoJaAditado = true;
            }
            // se já tiver aditamento não podera retirar o editamento
            if (contratoJaAditado) {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErrorEditMatriculaRetirarAdt);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                if (hasValue(dijit.byId("gridAditamento").editAditamento)) {
                    dijit.byId('tipoContratoAdto')._onChangeActive = false;
                    dijit.byId('tipoContratoAdto').set("value", contratoBD.contrato.cd_nome_contrato);
                    dijit.byId('tipoContratoAdto')._onChangeActive = true;
                    loadDataAditamento(dijit.byId("gridAditamento").editAditamento, false);
                }
                return false;
            }


            if (verificarAlteracaoMensalidadeContrato()) {

                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroEditMensalidadesAditamentoContrato);
                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                dijit.byId('tipoContratoAdto')._onChangeActive = false;
                dijit.byId('tipoContratoAdto').reset();
                ativarTagAditamento("none");
                dijit.byId('tipoContratoAdto')._onChangeActive = true;
                return false;
            }
        } else {
            if ((tipoAditamento == ADICIONAR_PARCELAS || (hasValue(tipoAditamento.value) && tipoAditamento.value == "Adicionar Parcelas"))) {
                dojo.byId('tdLabelTifpoFinanceiro').style.display = "";
                dojo.byId('tdTifpoFinanceiro').style.display = "";

                dojo.byId('tdLabelTifpoFinanceiroDisabled').style.display = "none";
                dojo.byId('tdTifpoFinanceiroDisabled').style.display = "none";
            } else {

                dojo.byId('tdLabelTifpoFinanceiro').style.display = "none";
                dojo.byId('tdTifpoFinanceiro').style.display = "none";

                dojo.byId('tdLabelTifpoFinanceiroDisabled').style.display = "";
                dojo.byId('tdTifpoFinanceiroDisabled').style.display = "";
            }


            if (verificarAlteracaoMensalidadeContrato()) {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroEditMensalidadesAditamentoContrato);
                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                dijit.byId('tipoContratoAdto')._onChangeActive = false;
                dijit.byId('tipoContratoAdto').reset();
                ativarTagAditamento("none");
                dijit.byId('tipoContratoAdto')._onChangeActive = true;
                return false;
            }
        }

        dijit.byId("gridDesconto").update();
    } catch (e) {
        postGerarLog(e);
    }
}

function configurarLayouTagAditamento(cdNomeContrato, id_tipo_aditamento) {
    try {
        var tipoContratoAdto = dijit.byId("tipoContratoAdto");
        var tipoAditamento = dijit.byId('tipoAditamento');
        var edPrevDias = dijit.byId('edPrevDias');
        var edValorAulaAdto = dijit.byId('edValorAulaAdto');
        var tipoPagto = dijit.byId('tipoPagto');
        var compValorAditivo = dijit.byId('valorAditivo');
        var compVlMaterialCont = dijit.byId("vlMaterialContrato");


        if (cdNomeContrato > 0) {
            var nomeContrato = null;
            var dados = [];
            var data = hasValue(tipoContratoAdto) && hasValue(tipoContratoAdto.store.data) ? tipoContratoAdto.store.data : null;
            if (hasValue(data))
                $.each(data, function (index, val) {
                    if (cdNomeContrato == val.id)
                        nomeContrato = val;
                });
            if (hasValue(nomeContrato)) {
                //aditamento
                if (nomeContrato.id_motivo_aditamento) {


                    dijit.byId('dtaInicioMat').set('disabled', true);
                    dijit.byId('dtaFinalMat').set('disabled', true);
                    dijit.byId('tipoMatricula').set('disabled', true);
                    dijit.byId('vl_pre_matricula').set('disabled', true);
                    dijit.byId('ckTransfCad').set('disabled', true);
                    //dijit.byId('id_venda_pacote').set('disabled', true);
                    //dijit.byId('ckManual').set('disabled', true);
                    //dijit.byId('ckCertificado').set('disabled', true);
                    dojo.byId('id_motivo_aditamento').value = true;

                    require([
                            "dojo/on",
                            "dijit/registry",
                            "dojo/ready",
                            "dojo/require"
                        ],
                        function(on, registry, ready) {
                            ready(function () {
                                console.log(registry.byId("acoesRelacionadasTit"));
                                console.log(nomeContrato);
                                if (nomeContrato.id_motivo_aditamento) {
                                    //registry.byId("acoesRelacionadasTit").dropDown._getFirst().set("disabled", true);

                                } else {
                                    registry.byId("acoesRelacionadasTit").dropDown._getFirst().set("disabled", false);
                                }
                            });
                        });

                   

                    
                    dijit.byId('tipoDataContratoAdto').set("value", ESCOLHERDATA);
                    dijit.byId('dtInicioAdto').set("disabled", false);
                    dijit.byId('dtInicioAdto').set("required", true);
                    compValorAditivo.set("disabled", false);
                    compValorAditivo.set("required", true);
                    //tipoAditamento.set("disabled", false);
                    tipoContratoAdto.aditamento = true;
                    
                    //Novas implementações
                    ativarTagAditamento("");
                    dojo.byId('trDataAdto').style.display = "none";
                    dijit.byId("VctoAdt").set("disabled", true);
                    dijit.byId("dtInicioAditamento").set("required", true);
                    dijit.byId("dtAdtVencInicial").set("required", true);
                    dijit.byId("aditivobolsaDataComunicado").set("disabled", true);
                    tipoAditamento.set("required", true);
                }
                else {


                    //tipoAditamento.set("disabled", true);
                    tipoAditamento.reset();
                    if (!hasValue(dijit.byId('tipoDataContratoAdto'))) {
                        dijit.byId('tipoDataContratoAdto').set("value", NAOINFORMADA);
                    }
                    
                    dijit.byId('dtInicioAdto').set("disabled", true);
                    dijit.byId('dtInicioAdto').set("required", false);
                    compValorAditivo.set("disabled", true);
                    compValorAditivo.set("required", false);
                    compValorAditivo.reset();
                    compValorAditivo.oldValue = 0;
                    tipoContratoAdto.aditamento = false;
                    //if (hasValue(nomeContrato.id_valor_material)) {
                    //    dojo.byId("idTagMaterialContrato").style.display = "";
                    //} else {
                    //    dojo.byId("idTagMaterialContrato").style.display = "none";
                    //}
                    dojo.byId("idTagAdiciParcela").style.display = "none";
                    dojo.byId("idTagAditivoBolsa").style.display = "none";
                    //dojo.byId('divNovoAditivo').style.display = 'none';

                    // Novas implementações
                    ativarTagAditamento("none");
                    dojo.byId('trDataAdto').style.display = "";
                    dijit.byId("dtInicioAditamento").set("required", false);
                    dijit.byId("dtAdtVencInicial").set("required", false);
                    tipoAditamento.set("required", false);
                    dijit.byId("dtInicioAditamento").set("value", null);
                    dijit.byId("dtAdtVencInicial").set("value", null);
                }
                if (hasValue(nomeContrato.id_valor_hora_aula)) {
                    edValorAulaAdto.set("disabled", false);
                } else {
                    edValorAulaAdto.set("disabled", true);
                    edValorAulaAdto.set('value', 0);
                }

                if (hasValue(nomeContrato.id_previsao_dias)) {
                    edPrevDias.set("disabled", false);
                } else {
                    edPrevDias.set("disabled", true);
                    edPrevDias.set('value', 0);
                }

                if (hasValue(nomeContrato.id_tipo_pgto)) {
                    tipoPagto.set("disabled", false);
                } else {
                    tipoPagto.set("disabled", true);
                    tipoPagto.set('value', "");
                }
            }
        } else {
            
            //tipoAditamento.set("disabled", true);
            tipoAditamento.set('value', "");
            tipoAditamento.set("disabled", true);
            tipoAditamento.set("required", false);
            dijit.byId('tipoDataContratoAdto').set("value", NAOINFORMADA);
            dijit.byId('dtInicioAdto').set("disabled", true);
            dijit.byId('dtInicioAdto').set("required", false);

            dijit.byId('dtInicioAditamento').set("disabled", true);
            dijit.byId('dtAdtVencInicial').set("disabled", true);
            dijit.byId("dtInicioAditamento").set("required", false);
            dijit.byId("dtAdtVencInicial").set("required", false);
            dijit.byId("dtInicioAditamento").set("value", null);
            dijit.byId("dtAdtVencInicial").set("value", null);

            compValorAditivo.set("disabled", true);
            compValorAditivo.set("required", false);
            compValorAditivo.reset();
            compValorAditivo.oldValue = 0;
            tipoContratoAdto.aditamento = false;
            edValorAulaAdto.set("disabled", true);
            edValorAulaAdto.set('value', 0);
            edPrevDias.set("disabled", true);
            edPrevDias.set('value', 0);
            tipoPagto.set("disabled", true);
            tipoPagto.set('value', "");
        }
    } catch (e) {
        postGerarLog(e);
    }
}

//TODO: Michelangelo
function loadHistoricoAditamento() {
    dojo.xhr.get({
        preventCache: true,
        url: Endereco() + "/api/escola/getSugestaoDiaOpcoesPgto?str_data_matricula=" + 1,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            data = jQuery.parseJSON(data).retorno;
            if (hasValue(data)) {
                dijit.byId('dia').set("value", data.dia);
                dijit.byId('mes').set("value", data.mes);
                dijit.byId('ano').set("value", data.ano);
                if (hasValue(data.nro_parcelas))
                    dijit.byId('parcelas').set('value', data.nro_parcelas);
            }
        } catch (e) {
            postGerarLog(e);
        }
    },
    function (error) {
        apresentaMensagem('apresentadorMensagemMat', error);
    });
}

function validarAditamentoCrud(windowUtils) {
    try {
        var validado = true;
        dijit.byId("ValorParcAdic").set("required", false);
        dijit.byId("dtInicioAdto").set("required", false);

        var tipoData = dijit.byId('tipoDataContratoAdto').get('value');
        var tipoAditamento = dijit.byId("tipoAditamento").value;
        var spDiaVencAdto = dijit.byId("spDiaVencAdto");

        if (dojo.byId("tgAditamento").style.display == "none") {
            dijit.byId("tipoAditamento").set("required", false);
        } else {
            dijit.byId("tipoAditamento").set("required", true);
        }

        if (hasValue(parseInt(tipoData)) && parseInt(tipoData) == 4 && !dijit.byId("formAditamentoMat").validate())
            validado = false;

        if (hasValue(spDiaVencAdto.value) && spDiaVencAdto.value > 0) {
            if (!spDiaVencAdto.validate()) {
                mostrarMensagemCampoValidado(windowUtils, spDiaVencAdto);
                validado = false;
            }
        }

        // Com nova implementação do aditamento este campo será preenchido automaticamente.
        //if (parseInt(tipoData) == 4) {
        //    dijit.byId("dtInicioAdto").set("required", true);
        //    var dataInicio = dijit.byId("dtInicioAdto");
        //    if (!dataInicio.validate()) {
        //        mostrarMensagemCampoValidado(windowUtils, dataInicio);
        //        validado = false;
        //    }
        //} else
        //    dijit.byId("dtInicioAdto").set("required", false);

        if (hasValue(tipoAditamento) && tipoAditamento > 0 && tipoAditamento != PERDA_DESCONTO) {
            var vl_aditivo = dijit.byId("valorAditivo").value;
            if (!hasValue(dijit.byId("valorAditivo").value))
                vl_aditivo = dojo.byId("valorAditivo").value;

            if (!hasValue(vl_aditivo) || vl_aditivo <= 0) {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroNaoExisteValorAditivo);
                apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                validado = false;
            }

            if (tipoAditamento == ADICIONAR_PARCELAS) {
                dijit.byId("ValorParcAdic").set("required", true);
                var vl_parcela = dijit.byId("ValorParcAdic").value;
                var nroTitAdt = dijit.byId("NroTitAdt").value;
                if (!hasValue(vl_parcela) || vl_parcela <= 0) {
                    var mensagensWeb = new Array();
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroNaoExisteValorParcela);
                    apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                    validado = false;
                }

                if (!hasValue(nroTitAdt) || nroTitAdt <= 0) {
                    var mensagensWeb = new Array();
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroNaoInformadoNroParcelas);
                    apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
                    validado = false;
                }
            }
        }
        return validado;
    } catch (e) {
        postGerarLog(e);
    }
}

function getdAditamentoMaxDataEHistorico(cd_contrato) {
    dojo.xhr.get({
        url: Endereco() + "/api/secretaria/getAditamentosGridByContrato?cd_contrato=" + cd_contrato,
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
        idProperty: "cd_aditamento"
    }).then(function (data) {
        try {
            var grid = dijit.byId("gridAditamento");
            var result = $.parseJSON(data).retorno;
            if (hasValue(result)) {
                verificarSetarPcDescontoBolsaAditivo(result);
                var dataStore = new dojo.data.ObjectStore({
                    objectStore: new dojo.store.Memory({ data: result, idProperty: "cd_aditamento" })
                });
                grid.setStore(dataStore);
                if (hasValue(result.length)) {
                    dijit.byId("gridAditamento").editAditamento = result[0];
                    dijit.byId("gridAditamento").historicoAditamento = clone(result);
                } else
                    dijit.byId("gridAditamento").editAditamento = null;
                loadDataAditamento(result[0], true);
                dijit.byId("gridAditamento").update();
                buscarAjusteManualAditamentosAnteriores();
            } else {
                resetAditamento();

                //dijit.byId("vl_saldo_matricula").reset();LBM Não pode resetar se não mata o valor populado pelo loadDataMatricula, que chama o populaDadosTurma que chama esta função.
                dijit.byId("VlAnteriorAdt").reset();
                dijit.byId("tipoContratoAdto").reset();
                grid.setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: null }) }));
                dijit.byId("gridAditamento").editAditamento = null;
            }
        } catch (e) {
            postGerarLog(e);
        }
    },
    function (error) {
        apresentaMensagem('apresentadorMensagemMat', error);
    });
}

function  alterarLocalMovtoTitulos(Memory, ObjectStore, xhr, ref) {
    try {
        var itensAlterar = dijit.byId("gridTitulo").itensSelecionados;

        if (!hasValue(itensAlterar) || itensAlterar.length <= 0)
            caixaDialogo(DIALOGO_AVISO, msgSelectRegUpdate, null);
        else {
        var titulosRollback = cloneArray(itensAlterar);
            gerar_titulo = false;

            if (dijit.byId("edBanco").value > 0) {
                apresentaMensagem("apresentadorMensagemMat", null);

                if (itensAlterar.length > 0) {
                    for (var i = 0; i < itensAlterar.length; i++) {

                        if (itensAlterar[i].cd_tipo_financeiro == 5 && (dijit.byId("edBanco").item.nm_tipo_local != 5 && dijit.byId("edBanco").item.nm_tipo_local != 4)) {
                            var mensagensWeb = new Array();
                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "Para títulos com tipo financeiro “cartão” somente Locais de Movimento tipo “cartão de débito/crédito poderão ser selecionados, caso contrário estes tipos não poderão.");
                            apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                            return;//mensagem
                        }

                        if (itensAlterar[i].cd_tipo_financeiro != 5 && (dijit.byId("edBanco").item.nm_tipo_local == 5 || dijit.byId("edBanco").item.nm_tipo_local == 4)) {
                            var mensagensWeb = new Array();
                            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "Para títulos com tipo financeiro diferente de “cartão”, os Locais de Movimento do tipo “cartão de débito/crédito não poderão ser selecionados");
                            apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                            return;//mensagem
                        }

                    }

                    //item.vl_liquidacao_titulo > 0 || (hasValue(item.possuiBaixa) && item.possuiBaixa)
                    var titulosComBaixa = "";
                    var titulosCartao = false;
                    for (var i = 0; i < itensAlterar.length; i++) {
                        if (itensAlterar[i].vl_saldo_titulo > 0 &&
                            itensAlterar[i].vl_saldo_titulo == itensAlterar[i].vl_titulo && 
                            itensAlterar[i].vl_liquidacao_titulo === 0 &&
                            (itensAlterar[i].possuiBaixa != undefined &&
                                itensAlterar[i].possuiBaixa != null &&
                                itensAlterar[i].possuiBaixa === false)) {
                            itensAlterar[i].cd_local_movto = dijit.byId("edBanco").value;
                            itensAlterar[i].descLocalMovto = dojo.byId("edBanco").value;
                            itensAlterar[i].alterou_local_movto = true;

                            var titulosGrid = dijit.byId('gridTitulo').store.objectStore.data;

                            jQuery.grep(titulosGrid, function(titulo) {
                                    if (((titulo.cd_titulo > 0 && titulo.cd_titulo === itensAlterar[i].cd_titulo) || (titulo.cd_titulo === 0 && titulo.nm_parcela_titulo === itensAlterar[i].nm_parcela_titulo)) &&
                                        titulo.vl_saldo_titulo > 0 &&
                                        titulo.vl_titulo == titulo.vl_saldo_titulo) {
                                        titulo.cd_local_movto = itensAlterar[i].cd_local_movto;
                                        titulo.descLocalMovto = itensAlterar[i].descLocalMovto;
                                    }
                                });
                        } else {
                            titulosComBaixa += "Parcela:" + itensAlterar[i].nm_parcela_titulo + "<br>";
                            
                        }
                        if (!titulosCartao) titulosCartao = itensAlterar[i].cd_tipo_financeiro == CARTAO
                    }

                    dijit.byId("gridTitulo")._refresh();

                    if (titulosCartao) {
                        alterarLocalMovtoAplicarTaxaBancaria(itensAlterar, titulosRollback);
                    }

                    if (hasValue(titulosComBaixa)) {
                        var mensagensWeb = new Array();
                        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgTitulosComBaixa + "<br>" + titulosComBaixa);
                        apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                    }

                }
            }
            else {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgEscolherLocalMovto);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            }
        }
    } catch (e) {
        postGerarLog(e);
    }
}

//#region Metodos Baixa Titulos - keepValuesTitulos -  eventoEditarTitulo

function keepValuesTitulos(item) {
    try {
        IncluirAlterar(1, 'divAlterarTitulo', 'divIncluirTitulo', 'divExcluirTitulo', 'apresentadorMensagemTitulo', 'divCancelarTitulo', 'divClearTitulo');
        document.getElementById("divExcluirTitulo").style.display = "none";
        dojo.byId("cd_pessoa_responsavelTit").value = hasValue(item) ? item.cd_pessoa_responsavel : dojo.byId("cd_responsavel_mens").value;//dojo.byId("cd_pessoa_aluno_mat").value
        var proxTit = verificaNrProxPacerla();

        var cd_titulo = 0;
        var cd_localMvto = 0;
        if (hasValue(item) && hasValue(item.cd_local_movto))
            cd_localMvto = item.cd_local_movto;
        if (hasValue(item) && hasValue(item.cd_titulo))
            cd_titulo = item.cd_titulo;
        cd_titulo = (hasValue(item) && hasValue(item.cd_tipo_financeiro)) ? item.cd_tipo_financeiro : 0;
        var nome_api = "";
        if (cd_titulo != 0)
            nome_api = "/api/financeiro/getLocalMovtoGeralOuCartao?cd_tipo_financeiro=" + cd_titulo;
        else
            nome_api = "/api/financeiro/getLocalMovtoByEscolaLogin?cd_local_movto=" + cd_localMvto;
        dojo.xhr.get({
            url: Endereco() + nome_api,
            preventCache: true,
            handleAs: "json",
            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
        }).then(function (data) {
            try {
                if (cd_titulo != 0)
                    data = jQuery.parseJSON(data).retorno;
                apresentaMensagem("apresentadorMensagemTitulo", null);
                onChangeActive(false);
                //loadSelect(data, "bancoTitMat", 'cd_local_movto', 'nomeLocal');
                if (cd_titulo != CARTAO)
                    loadSelectLocalMovimento(data, "bancoTitMat", 'cd_local_movto', 'nomeLocal', 'nm_tipo_local');
                else
                    loadSelectLocalMovimento(data, "bancoTitMat", 'cd_local_movto', 'no_local_movto', 'nm_tipo_local');
                dojo.byId("cd_titulo").value = hasValue(item) ? item.cd_titulo : 0;
                dojo.byId("cd_aluno_tit").value = hasValue(item) ? item.cd_pessoa_titulo : dojo.byId("cd_pessoa_aluno_mat").value;
                dojo.byId("nomeAlunoTit").value = hasValue(item) ? item.nomeAluno : dojo.byId("nomeAlunoMat").value;

                dojo.byId("pessoaResponsavelTit").value = hasValue(item) ? item.nomeResponsavel : dojo.byId("pessoaResponsavel").value; //dojo.byId("nomeAlunoMat").value;
                dojo.byId("parcTit").value = hasValue(item) ? item.nm_parcela_titulo : proxTit;
                dojo.byId("nrtitulo").value = hasValue(item) ? item.nm_titulo : dojo.byId("nm_contrato").value;
                dojo.byId("tipoTit").value = hasValue(item) ? item.dc_tipo_titulo : "ME";
                dijit.byId("tipoDocumentoTit")._onChangeActive = false;
                dijit.byId("tipoDocumentoTit").set("value", hasValue(item) ? item.cd_tipo_financeiro : dijit.byId("tipoDocumento").value);
                dijit.byId("tipoDocumentoTit")._onChangeActive = true;
                dojo.byId("nrDoc").value = hasValue(item) ? item.dc_num_documento_titulo : null;
                if (hasValue(item))
                    dojo.byId("dtaEmisTit").value = item.dt_emissao;
                else
                    dijit.byId('dtaEmisTit').attr("value", new Date(ano, mes, dia));
                dojo.byId("dtaVencTit").value = hasValue(item) ? item.dt_vcto : null;
                dojo.byId("valorTit").value = hasValue(item) ? item.vlTitulo : dojo.byId("valorParcela").value;
                dijit.byId("valorMaterialTitulo").set("value", hasValue(item) ? item.vl_material_titulo : 0);
                dojo.byId("cd_bancoTitMat").value = hasValue(item) ? item.cd_local_movto : null;
                //dijit.byId("bancoTitMat").value = hasValue(item) ? item.descLocalMovto : null;
                dojo.byId("bancoTitMat").value = hasValue(item) ? item.descLocalMovto : dc_local_movto_parametro;
                dijit.byId("bancoTitMat").set("value", hasValue(item) ? item.cd_local_movto : local_movto_parametro);

                dijit.byId("nm_dias_cartao")._onChangeActive = false;
                dijit.byId("pc_taxa_cartao").set("value", item.pc_taxa_cartao);
                dijit.byId("nm_dias_cartao").set("value", item.nm_dias_cartao);
                dijit.byId("nm_dias_cartao")._onChangeActive = true;
                dojo.byId('vl_taxa_cartao').value = item.vlTaxaCartao;

                var tgCartao = dojo.byId("tgCartao");
                if (item.cd_tipo_financeiro == CARTAO) {
	                tgCartao.style.display = "block";
                } else {
	                tgCartao.style.display = "none";
                }
                
                //if (hasValue(dijit.byId("tipoDocumentoTit").item) &&
                //(dijit.byId("tipoDocumentoTit").item.id == CARTAO ||
                //    dijit.byId("tipoDocumentoTit").item.id == CHEQUE)) {
                //    dijit.byId("tipoDocumentoTit").set("disabled", true);
                //} else {
                //    dijit.byId("tipoDocumentoTit").set("disabled", false);

                //}

                onChangeActive(true);
            } catch (e) {
                postGerarLog(e);
            }
        },
        function (error) {
            apresentaMensagem("apresentadorMensagemTitulo", error);
        });
    } catch (e) {
        postGerarLog(e);
    }
}

function eventoEditarTitulo(itensSelecionados) {
    try {
        if (!hasValue(itensSelecionados) || itensSelecionados.length <= 0)
            caixaDialogo(DIALOGO_AVISO, msgSelectRegUpdate, null);
        else if (itensSelecionados.length > 1)
            caixaDialogo(DIALOGO_ERRO, msgSelectOneRegUpdate, null);
        else {
            var gridTitulo = dijit.byId('gridTitulo');

            if (itensSelecionados[0].vl_liquidacao_titulo > 0) {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroTituloBaixado);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                return false;
            }

            apresentaMensagem('apresentadorMensagem', '');
            gridTitulo.itemSelecionado = itensSelecionados[0];
            keepValuesTitulos(gridTitulo.itemSelecionado);

            verificaAjusteManual();

            //TODO VERIFICAR DEPOIS
            IncluirAlterar(0, 'divAlterarTitulo', 'divIncluirTitulo', 'divExcluirTitulo', 'apresentadorMensagemTitulo', 'divCancelarTitulo', 'divClearTitulo');
            document.getElementById("divExcluirTitulo").style.display = "none";
            dijit.byId("dialogTitulo").show();
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function eventoAlterarResponsavel(itensSelecionados, Memory, ObjectStore, xhr, ref) {
	try {
		if (!hasValue(itensSelecionados) || itensSelecionados.length <= 0)
			caixaDialogo(DIALOGO_AVISO, msgSelectRegUpdate, null);
		//else if (itensSelecionados.length > 1)
			//caixaDialogo(DIALOGO_ERRO, msgSelectOneRegUpdate, null);
		else {
            var gridTitulo = dijit.byId('gridTitulo');

            apresentaMensagem("apresentadorMensagemAlterarResponsavel", null);

            var titulosBaixaORCnab = itensSelecionados.filter(function (value) {
				return ( //possui baixa
						value.vl_saldo_titulo != value.vl_titulo &&
							value.vl_liquidacao_titulo > 0 &&
							((value.possuiBaixa != undefined &&
								value.possuiBaixa != null &&
								value.possuiBaixa === true) || (value.possuiBaixaBolsa != undefined &&
								value.possuiBaixaBolsa != null &&
								value.possuiBaixaBolsa === true))) ||
					(value.id_emitido_CNAB === true || value.id_cnab_contrato === true) //possui cnab
            });

			if (hasValue(titulosBaixaORCnab) && titulosBaixaORCnab.length > 0) {
				titulosComBaixaOrCnabMsg = titulosBaixaORCnab.map(function (value) {
					return "Parcela:" + value.nm_parcela_titulo + "<br>";
				}).join();

				if (hasValue(titulosComBaixaOrCnabMsg)) {
                    var mensagensWeb = new Array();
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, msgTitulosComBaixaOrCnab + "<br>" + titulosComBaixaOrCnabMsg);
					apresentaMensagem("apresentadorMensagemAlterarResponsavel", mensagensWeb);
				}

			}

			apresentaMensagem('apresentadorMensagem', '');
			//gridTitulo.itemSelecionado = itensSelecionados[0];
			//keepValuesTitulos(gridTitulo.itemSelecionado);

			//verificaAjusteManual();
			dojo.byId("cd_pessoa_responsavelTitAlterarResponsavel").value = 0;
            dojo.byId("pessoaResponsavelTitAlterarResponsavel").value = "";

			
            dijit.byId("dialogAlterarResponsavel").show();
		}
	} catch (e) {
		postGerarLog(e);
	}
}



function alterarResponsavelTitulos(Memory, ObjectStore, xhr, ref) {
    try {
        var itensAlterar = dijit.byId("gridTitulo").itensSelecionados;

        if (!hasValue(itensAlterar) || itensAlterar.length <= 0)
            caixaDialogo(DIALOGO_AVISO, msgSelectRegUpdate, null);
        else {
            var titulosRollback = cloneArray(itensAlterar);
            gerar_titulo = false;

            apresentaMensagem("apresentadorMensagemAlterarResponsavel", null);

            if (dojo.byId("cd_pessoa_responsavelTitAlterarResponsavel").value > 0) {


	            var titulosBaixaORCnab = itensAlterar.filter(function(value) {
                    return ( //possui baixa
                        value.vl_saldo_titulo != value.vl_titulo &&
			                    value.vl_liquidacao_titulo > 0 &&
                        ((value.possuiBaixa != undefined &&
	                        value.possuiBaixa != null &&
                            value.possuiBaixa === true) || (value.possuiBaixaBolsa != undefined &&
	                        value.possuiBaixaBolsa != null &&
	                        value.possuiBaixaBolsa === true))) ||
                        (value.id_emitido_CNAB === true || value.id_cnab_contrato === true) //possui cnab
                });

                var titulosAlterar = itensAlterar.filter(function (value) {
	                return ( //não possui baixa
			                value.vl_saldo_titulo === value.vl_titulo &&
			                value.vl_liquidacao_titulo === 0 &&
			                ((value.possuiBaixa != undefined &&
				                value.possuiBaixa != null &&
                            value.possuiBaixa === false) && (value.possuiBaixaBolsa != undefined &&
				                value.possuiBaixaBolsa != null &&
				                value.possuiBaixaBolsa === false) )) &&
                        (value.id_emitido_CNAB === false && value.id_cnab_contrato === false) //não possui cnab
                });

                if (hasValue(titulosAlterar) && titulosAlterar.length > 0) {
	                ALTEROU_RESPONSAVEL = true;
                }

                for (var i = 0; i < titulosAlterar.length; i++) {

	                var titulosGrid = dijit.byId('gridTitulo').store.objectStore.data;

	                jQuery.grep(titulosGrid,
		                function (titulo) {
                            if (((titulo.cd_titulo > 0 && titulo.cd_titulo === titulosAlterar[i].cd_titulo) || (titulo.cd_titulo === 0 && titulo.nm_parcela_titulo === titulosAlterar[i].nm_parcela_titulo)) &&
				                titulo.vl_saldo_titulo > 0 &&
                                titulo.vl_titulo == titulo.vl_saldo_titulo) {
	                            titulo.cd_pessoa_responsavel = dojo.byId("cd_pessoa_responsavelTitAlterarResponsavel").value;
                                titulo.nomeResponsavel = dojo.byId("pessoaResponsavelTitAlterarResponsavel").value;
                                titulo.alterou_responsavel_titulo = true;
                            }
		                });

                }

                dijit.byId("gridTitulo")._refresh();


                var titulosComBaixaOrCnabMsg = "";

                if (hasValue(titulosBaixaORCnab) && titulosBaixaORCnab.length > 0) {
	                titulosComBaixaOrCnabMsg = titulosBaixaORCnab.map(function(value) {
		                return "Parcela:" + value.nm_parcela_titulo + "<br>";
                    }).join();

                    if (hasValue(titulosComBaixaOrCnabMsg)) {
		                var mensagensWeb = new Array();
                        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgTitulosComBaixaOrCnab + "<br>" + titulosComBaixaOrCnabMsg);
                        apresentaMensagem("apresentadorMensagemAlterarResponsavel", mensagensWeb);
	                }

                } 


                
            }
            else {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgEscolherLocalMovto);
                apresentaMensagem("apresentadorMensagemAlterarResponsavel", mensagensWeb);
            }
        }
    } catch (e) {
        postGerarLog(e);
    }
}


function verificaAjusteManual() {
    try {
        
        if (dijit.byId("ckManual").checked == false) {
            dijit.byId("pessoaResponsavelTit").set("disabled", true);
            //dijit.byId("cadPessoaResponsavelTit").set("disabled", true);
            dijit.byId("nrDoc").set("disabled", true);
            dijit.byId("dtaEmisTit").set("disabled", true);
            //dijit.byId("valorTit").set("disabled", true);
            dijit.byId("valorMaterialTitulo").set("disabled", true);
        } else {
            dijit.byId("pessoaResponsavelTit").set("disabled", true);
            dijit.byId("cadPessoaResponsavelTit").set("disabled", false);
            dijit.byId("nrDoc").set("disabled", false);
            dijit.byId("dtaEmisTit").set("disabled", false);
            //dijit.byId("valorTit").set("disabled", false);
            dijit.byId("valorMaterialTitulo").set("disabled", false);
        }

    } catch (e) {
        postGerarLog(e);
    } 
}

function alterarTitulo() {
    try {
        var titulo = dijit.byId("gridTitulo").itemSelecionado;
        if (dijit.byId("ckManual").checked == true) {
            var tipoTitulo = dojo.byId("tipoTit").value == "TM" ? "TA" : dojo.byId("tipoTit").value == "ME" ? "MA" : dojo.byId("tipoTit").value == "AD" ? "AA" : dojo.byId("tipoTit").value;
        } else { tipoTitulo = titulo.dc_tipo_titulo;}
        
        if (!validaTitulo())
            return false;
       
        if (titulo.id > 0) {
            titulo.cd_titulo = dojo.byId("cd_titulo").value,
            titulo.cd_pessoa_titulo = dojo.byId("cd_aluno_tit").value,
            titulo.nomeAluno = dojo.byId("nomeAlunoTit").value,
            titulo.cd_pessoa_responsavel = dojo.byId("cd_pessoa_responsavelTit").value,
            titulo.nomeResponsavel = dojo.byId("pessoaResponsavelTit").value,
            titulo.nm_parcela_titulo = dojo.byId("parcTit").value,
            titulo.nm_titulo = dojo.byId("nrtitulo").value,
            titulo.dc_tipo_titulo = tipoTitulo,
            titulo.cd_tipo_financeiro = dijit.byId("tipoDocumentoTit").value,
            titulo.tipoDoc = dojo.byId("tipoDocumentoTit").value,
            titulo.dc_num_documento_titulo = dojo.byId("nrDoc").value,
            titulo.dt_emissao = dojo.byId("dtaEmisTit").value,
            titulo.dt_emissao_titulo = dojo.date.locale.parse(dojo.byId("dtaEmisTit").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }),
            titulo.dt_vcto_titulo = dojo.date.locale.parse(dojo.byId("dtaVencTit").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }),
            titulo.dt_vcto = dojo.byId("dtaVencTit").value,
            titulo.vlTitulo = dojo.byId("valorTit").value,
                titulo.vl_titulo = parseFloat(removedecimal(dojo.byId("valorTit").value)),
                titulo.vl_saldo_titulo = parseFloat(removedecimal(dojo.byId("valorTit").value)),
                titulo.vl_material_titulo = hasValue(dijit.byId("valorMaterialTitulo").value) ? parseFloat(removedecimal(dojo.byId("valorMaterialTitulo").value)) : 0,
            titulo.vlSaldoTitulo = dojo.byId("valorTit").value,
            titulo.cd_local_movto = dijit.byId("bancoTitMat").value,
            titulo.tituloEdit = true,
            titulo.descLocalMovto = dojo.byId("bancoTitMat").value,
            titulo.nm_dias_cartao = dijit.byId("nm_dias_cartao").value,
                titulo.pc_taxa_cartao = dijit.byId("pc_taxa_cartao").value,
                titulo.vl_taxa_cartao = parseFloat(removedecimal(dojo.byId("vl_taxa_cartao").value)),
            titulo.VlTaxaCartao = dojo.byId("vl_taxa_cartao").value
        }
        
        dijit.byId("gridTitulo").update();
        dijit.byId("dialogTitulo").hide();
        abriuTagTitulos = true; //Provocar a geração dos titulos
    } catch (e) {
        postGerarLog(e);
    }
}
function RowBackTipoTitulosAjusteManual() {
    try {
        var grid = dijit.byId("gridTitulo");
        if (hasValue(grid) &&
                hasValue(grid.store) &&
                hasValue(grid.store.objectStore) &&
                hasValue(grid.store.objectStore.data.length > 0)) {
            var titulosRowBackTipoTitulo = grid.store.objectStore.data.map(function (item, index, array) {
                var tipoTitulo = item.dc_tipo_titulo == "TA" ? "TM" : item.dc_tipo_titulo == "MA" ? "ME" : item.dc_tipo_titulo == "AA" ? "AD" : item.dc_tipo_titulo;
                item.dc_tipo_titulo = tipoTitulo;
                return item;
            });

            if (hasValue(titulosRowBackTipoTitulo)) {
                grid.setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: titulosRowBackTipoTitulo }) }));
                grid.itensSelecionados = [];
                grid.update();
            }
            
        }
       
    } catch (e) {
        postGerarLog(e);
    } 
}


function validaTitulo() {
    try {
        var retorna = true;
        if (!dijit.byId("formTitulo").validate())
            retorna = false;
        var dataMin = new Date(1899, 12, 01);
        var dataMax = new Date(2079, 05, 06);
        if (dojo.date.compare(dataMin, dijit.byId("dtaEmisTit").value) > 0) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaEmisMatMin);
            apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
            retorna = false;
        }
        if (dojo.date.compare(dijit.byId("dtaEmisTit").value, dataMax) > 0) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaEmisMatMax);
            apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
            retorna = false;
        }
        if (dojo.date.compare(dataMin, dijit.byId("dtaVencTit").value) > 0) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaVencMatMin);
            apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
            retorna = false;
        }
        if (dojo.date.compare(dijit.byId("dtaVencTit").value, dataMax) > 0) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDtaVencMatMax);
            apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
            retorna = false;
        }
        if (!hasValue(dojo.byId("valorTit")) || dojo.byId("valorTit").value <= 0) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgTituloSemValor);
            apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
            retorna = false;
        }
        if (dijit.byId("tipoDocumento").value != CHEQUE && dijit.byId("tipoDocumentoTit").value == CHEQUE) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgTipoFinanceiroDiferente);
            apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
            retorna = false;
        }
        
        if (tgCartao.style.display = "block" && (dijit.byId("pc_taxa_cartao").value < 0 || dijit.byId("pc_taxa_cartao").value > 100)) {
	        var mensagensWeb = new Array();
	        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "O valor do campo %Taxa deve estar entre 0 e 100");
	        apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
	        retorna = false;
        }

        if (tgCartao.style.display = "block" && (dijit.byId("nm_dias_cartao").value < 0 || dijit.byId("nm_dias_cartao").value > 31)) {
	        var mensagensWeb = new Array();
	        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "O valor do campo Número de dias deve estar entre 0 e 31");
	        apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
	        retorna = false;
        }

        return retorna;
    } catch (e) {
        postGerarLog(e);
    }
}

function incluirTitulo() {
    require([
           "dojo/data/ObjectStore",
           "dojo/store/Memory"
    ], function (ObjectStore, Memory) {
        try {
            var gridTitulo = dijit.byId("gridTitulo");

            if (!validaTitulo())
                return false;

            var idTitulo = geradorIdTitulos(gridTitulo);
            myNewItem = {
                id: idTitulo,
                cd_pessoa_titulo: dojo.byId("cd_aluno_tit").value,
                nomeAluno: dojo.byId("nomeAlunoTit").value,
                dc_tipo_titulo: "MM",
                cd_pessoa_responsavel: dojo.byId("cd_pessoa_responsavelTit").value,
                nomeResponsavel: dojo.byId("pessoaResponsavelTit").value,
                nm_parcela_titulo: dojo.byId("parcTit").value,
                nm_titulo: dojo.byId("nrtitulo").value,
                cd_tipo_financeiro: dijit.byId("tipoDocumentoTit").value,
                tipoDoc: dojo.byId("tipoDocumentoTit").value,
                dc_num_documento_titulo: dojo.byId("nrDoc").value,
                dt_emissao: dojo.byId("dtaEmisTit").value,
                dt_emissao_titulo: dojo.date.locale.parse(dojo.byId("dtaEmisTit").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }),
                dt_vcto_titulo: dojo.date.locale.parse(dojo.byId("dtaVencTit").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }),
                dt_vcto: dojo.byId("dtaVencTit").value,
                vlTitulo: dojo.byId("valorTit").value,
                vl_titulo: parseFloat(removedecimal(dojo.byId("valorTit").value)),
                vl_saldo_titulo: parseFloat(removedecimal(dojo.byId("valorTit").value)),
                vl_material_titulo: hasValue(dijit.byId("valorMaterialTitulo").value) ? parseFloat(removedecimal(dojo.byId("valorMaterialTitulo").value)) : 0,
                vlSaldoTitulo: dojo.byId("valorTit").value,
                cd_local_movto: dijit.byId("bancoTitMat").value,
                tituloEdit: true,
                percentualResp: 100,
                id_origem_titulo: 22,
                id_status_cnab: false,
                id_emitido_CNAB: false,
                descLocalMovto: dojo.byId("bancoTitMat").value,
                cd_plano_conta_tit: dojo.byId('cd_plano_contas').value,
                cd_origem_titulo: dojo.byId('cd_contrato').value,
                cd_pessoa_empresa: dojo.byId("cd_pessoa_escola").value
            };
            if (hasValue(gridTitulo)) {
                store = gridTitulo.store.objectStore.data;

                store.push(myNewItem);
                gridTitulo.setStore(new ObjectStore({ objectStore: new Memory({ data: store, id: "id" }) }));
            }
            dijit.byId("dialogTitulo").hide();
            abriuTagTitulos = true; //Provocar a geração dos titulos
        } catch (e) {
            postGerarLog(e);
        }
    });
}

function geradorIdTitulos(gridTitulo) {
    try {
        var id = gridTitulo.store.objectStore.data.length;
        var itensArray = gridTitulo.store.objectStore.data.sort(function byOrdem(a, b) { return a.id - b.id; });
        if (id == 0)
            id = 1;
        else if (id > 0)
            id = itensArray[id - 1].id + 1;
        return id;
    }
    catch (e) {
        postGerarLog(e);
    }
}

function verificaNrProxPacerla() {
    try {
        var gridTitulo = dijit.byId('gridTitulo');
        var contTitulo = 0;
        //Pegar títulos de Mensalidade
        if (hasValue(gridTitulo.store.objectStore.data))
            for (var i = 0 ; i < gridTitulo.store.objectStore.data.length; i++)
                if ((dijit.byId("gridTitulo").store.objectStore.data[i].dc_tipo_titulo == "ME" || dijit.byId("gridTitulo").store.objectStore.data[i].dc_tipo_titulo == "MA" || dijit.byId("gridTitulo").store.objectStore.data[i].dc_tipo_titulo == "MM") &&
                   dijit.byId("gridTitulo").store.objectStore.data[i].cd_pessoa_responsavel == dojo.byId("cd_pessoa_responsavelTit").value)
                    contTitulo++;
        var nmProximaParc = contTitulo + 1;
        return nmProximaParc;
    } catch (e) {
        postGerarLog(e);
    }
}

//#region Persitência das Baixas

function setarEventosBotoesPrincipaisCadTransacao(xhr, on) {
    try {
        dijit.byId("incluirBaixa").on("click", function () {
            incluirBaixa(xhr, dojox.json.ref);
        });

        dijit.byId("alterarBaixa").on("click", function () {
            alterarBaixa(xhr, dojox.json.ref);
        });

        dijit.byId("deleteBaixa").on("click", function () {
            caixaDialogo(DIALOGO_CONFIRMAR, '', function executaRetorno() { deletarTransFinan(xhr, dojox.json.ref, dojo.store.Memory, dojo.data.ObjectStore) });
        });

        dijit.byId("fecharBaixa").on("click", function () {
            dijit.byId("cadBaixaFinanceira").hide();
        })

        dijit.byId("cancelarBaixa").on("click", function () {
            limparCamposBaixaCad();
            eventoEditarBaixaTitulo(dijit.byId("gridBaixa").itensSelecionados, xhr, dojo.ready, dojo.store.Memory, dijit.form.FilteringSelect, on);
        });

        dijit.byId("limparBaixa").on("click", function () {
            var gridTitulo = dijit.byId('gridTitulo');
            var itensSelecionados = gridTitulo.itensSelecionados;
            showCarregando();
            limparCamposBaixaCad();
            var Permissoes = hasValue(dojo.byId("setValuePermissoes").value) ? dojo.byId("setValuePermissoes").value : "";
            simularBaixaTitulos(itensSelecionados, xhr, dojox.json.ref, Permissoes);
        });
    } catch (e) {
        postGerarLog(e);
    }
}

function incluirBaixa(xhr, ref) {
    require([
       "dojo/ready",
       "dojo/date"
    ], function (ready, date) {
        ready(function () {
            try {
                var dtBaixa = dijit.byId('dt_baixa').value;
                if (!ValidateRangeDate(dtBaixa, date, "apresentadorMensagemCadBaixa", msgErroDtaMin, msgErroDtaMax))
                    return false;

                apresentadorMensagem = "apresentadorMensagemMat";
                apresentaMensagem(apresentadorMensagem, null);

                if (!dijit.byId("formCadBaixa").validate()) {
                    dijit.byId("tgCheque").set("open", true);
                    return false;
                }
                if (hasValue(dojo.byId('cd_contrato').value) <= 0)
                    return false;
                var bool_troca = false;
                var msg_aviso = "";

                if (hasValue(dijit.byId("cbLiquidacao").value) && ((dijit.byId("cbLiquidacao").value == CHEQUEVISTA || dijit.byId("cbLiquidacao").value == CHEQUEPREDATADO) &&
                    (dojo.byId('nroCheque').value == ""))) {
                    var mensagensWeb = new Array();
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, 'Falta informar o número do cheque');
                    apresentaMensagem("apresentadorMensagemCadBaixa", mensagensWeb);
                    return false;
                }

                var transacao = montaListaBaixa();
                if (transacao.Baixas[0].Titulo.cd_tipo_financeiro != CARTAO && transacao.Baixas[0].Titulo.cd_tipo_financeiro != CHEQUE) {
                    if (transacao.cd_tipo_liquidacao === CARTAOCREDITO || transacao.cd_tipo_liquidacao === CARTAODEBITO || transacao.cd_tipo_liquidacao === CHEQUEVISTA || transacao.cd_tipo_liquidacao === CHEQUEPREDATADO) {
                        bool_troca = true;
                        msg_aviso = transacao.cd_tipo_liquidacao === CARTAOCREDITO || transacao.cd_tipo_liquidacao === CARTAODEBITO ? "cartão" : "cheque"
                        transacao.cd_tipo_liquidacao = TROCA_FINANCEIRA;
                    }
                }
                showCarregando();
                xhr.post({
                    url: Endereco() + "/api/escola/postIncluirTransacao",
                    headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                    handleAs: "json",
                    postData: ref.toJson(transacao)
                }).then(function (data) {
                    try {

                        AtualizarSaldoEmAbertMatricula();
                        apresentaMensagem(apresentadorMensagem, data);

                        data = jQuery.parseJSON(data).retorno;
                        if (hasValue(data)) {
                            //Atualizar os titulos dos itens baixados para configurar fechados:
                            var itemAlterado = data;
                            var todos = dojo.byId("todosItens_label");
                            var gridName = 'gridTitulo';
                            var grid = dijit.byId(gridName);

                            if (!hasValue(grid.itensSelecionados))
                                grid.itensSelecionados = new Array();

                            dijit.byId("cadBaixaFinanceira").hide();

                            for (var i = 0; i < data.titulosBaixa.length; i++) {
                                removeObjSort(grid.itensSelecionados, "cd_titulo", data.titulosBaixa[i].cd_titulo);
                                insertObjSort(grid.itensSelecionados, "cd_titulo", data.titulosBaixa[i]);
                                for (var j = 0; j < grid.store.objectStore.data.length; j++) {
                                    var cd_titulo = grid.store.objectStore.data[j].cd_titulo;
                                    if (cd_titulo == data.titulosBaixa[i].cd_titulo) {
                                        grid.store.objectStore.data[j].vl_saldo_titulo = data.titulosBaixa[i].vl_saldo_titulo;
                                        grid.store.objectStore.data[j].vlSaldoTitulo = data.titulosBaixa[i].vlSaldoTitulo;
                                        if (transacao != null && transacao.cd_tipo_liquidacao != BAIXAMOTIVOBOLSA)
                                            grid.store.objectStore.data[j].possuiBaixa = true;
                                        else
                                            grid.store.objectStore.data[j].possuiBaixaBolsa = true;
                                    }
                                }
                            }
                            grid.sortInfo = 3; // Configura a segunda coluna (código) como a coluna de ordenação.
                            dijit.byId(grid).itemSelecionado = null;
                            dijit.byId(grid).itensSelecionados = null;
                            dijit.byId(grid).update();

                            //ATUALIZAR DADOS DE ADITAMENTO, APÓS BAIXA DE TITULOS.
                            getdAditamentoMaxDataEHistorico(dojo.byId('cd_contrato').value);
                            showCarregando();
                            if (bool_troca)
                                caixaDialogo(DIALOGO_AVISO, 'Foi realizada uma troca financeira e gerado um titulo com o mesmo numero, em aberto e tipo ' + msg_aviso + '.', null);
                        }
                    } catch (e) {

                        showCarregando();
                        postGerarLog(e);
                    }
                },
                function (error) {
                    showCarregando();
                    apresentaMensagem('apresentadorMensagemCadBaixa', error);
                });
            } catch (e) {
                postGerarLog(e);
            }
        });
    });
}

function alterarBaixa(xhr, ref) {
    try {
        apresentadorMensagem = "apresentadorMensagemMat";
        apresentaMensagem(apresentadorMensagem, null);

        if (!dijit.byId("formCadBaixa").validate()) {
            dijit.byId("tgCheque").set("open", true);
            return false;
        }

        var transacao = montaListaBaixa();
        showCarregando();
        xhr.post({
            url: Endereco() + "/api/escola/postUpdateTransacao",
            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
            handleAs: "json",
            postData: ref.toJson(transacao)
        }).then(function (data) {
            try {
                AtualizarSaldoEmAbertMatricula();
                apresentaMensagem('apresentadorMensagemMat', data);

                data = jQuery.parseJSON(data).retorno;

                if (hasValue(data)) {
                    //Atualizar os titulos dos itens baixados para configurar fechados:
                    var itemAlterado = data;
                    var todos = dojo.byId("todosItens_label");
                    var gridName = 'gridTitulo';
                    var grid = dijit.byId(gridName);

                    if (!hasValue(grid.itensSelecionados))
                        grid.itensSelecionados = new Array();

                    dijit.byId("cadBaixaFinanceira").hide();
                    if (hasValue(data) && hasValue(data.titulosBaixa))
                        for (var i = 0; i < data.titulosBaixa.length; i++) {
                            removeObjSort(grid.itensSelecionados, "cd_titulo", data.titulosBaixa[i].cd_titulo);
                            insertObjSort(grid.itensSelecionados, "cd_titulo", data.titulosBaixa[i]);
                            for (var j = 0; j < grid.store.objectStore.data.length; j++) {
                                var cd_titulo = grid.store.objectStore.data[j].cd_titulo;
                                if (cd_titulo == data.titulosBaixa[i].cd_titulo) {
                                    grid.store.objectStore.data[j].vl_saldo_titulo = data.titulosBaixa[i].vl_saldo_titulo;
                                    grid.store.objectStore.data[j].vlSaldoTitulo = data.titulosBaixa[i].vlSaldoTitulo;
                                }
                            }
                        }

                    grid.sortInfo = 2; // Configura a segunda coluna (código) como a coluna de ordenação.
                    setGridPagination(grid, itemAlterado, "cd_titulo");
                    grid.itemSelecionado = null;
                    grid.itensSelecionados = null;
                    grid.update();
                    limparGridBaixas();
                    showCarregando();
                }
            } catch (e) {
                showCarregando();
                postGerarLog(e);
            }
        },
        function (error) {
            showCarregando();
            apresentaMensagem('apresentadorMensagemCadBaixa', error);
        });
    } catch (e) {
        postGerarLog(e);
    }
}

function deletarTransFinan(xhr, ref, Memory, ObjectStore) {
    try {

        var titulos = [];

        if (dojo.byId('cd_tran_finan').value != 0)
            itensSelecionados = {
                cd_tran_finan: dojo.byId("cd_tran_finan").value,
                cd_contrato: dojo.byId("cd_contrato").value
            };
        xhr.post({
            url: Endereco() + "/api/financeiro/postDeleteTransFinanceiraBaixaReturnTitulos",
            headers: { "Accept": "applicatsion/json", "Content-Type": "application/json", "Authorization": Token() },
            postData: ref.toJson(itensSelecionados)
        }).then(function (data) {
            try {
                AtualizarSaldoEmAbertMatricula();
                apresentaMensagem('apresentadorMensagemMat', data);
                limparGridBaixas();
                dijit.byId("cadBaixaFinanceira").hide();
                if (hasValue($.parseJSON(data).retorno) && $.parseJSON(data).retorno.titulosBaixa != null && $.parseJSON(data).retorno.titulosBaixa.length > 0) {
                    var gridTitulo = dijit.byId("gridTitulo");
                    titulos = $.parseJSON(data).retorno.titulosBaixa;
                    var dataStore = new ObjectStore({ objectStore: new Memory({ data: titulos }) });
                    gridTitulo.setStore(dataStore);
                    for (var i = 0; i < titulos.length; i++) {
                        removeObjSort(gridTitulo.itensSelecionados, "cd_titulo", titulos[i].cd_titulo);
                        insertObjSort(gridTitulo.itensSelecionados, "cd_titulo", titulos[i]);
                    }
                    gridTitulo.sortInfo = 3; // Configura a segunda coluna (código) como a coluna de ordenação.
                    gridTitulo.itemSelecionado = null;
                    gridTitulo.itensSelecionados = null;
                    gridTitulo.update();
                }
            } catch (e) {
                postGerarLog(e);
            }
        },
        function (error) {
            if (dijit.byId("cadBaixaFinanceira").open)
                apresentaMensagem('apresentadorMensagemCadBaixa', error);
            else
                apresentaMensagem('apresentadorMensagemMat', error);
        });
    } catch (e) {
        postGerarLog(e);
    }
}

//#endregion

//#endregion 

//Regras aditamento matrícula

function habilitarCamposPorTipoAditamento(tipoAditamento) {
    try {

        if (hasValue(dijit.byId("tipoDocumento").value)) {
            dijit.byId("tipoFinanceiroAditamento").set("value", dijit.byId("tipoDocumento").value);
        }

        dojo.byId("tagDescontos").style.display = "none";
        dojo.byId("idTagAditivoBolsa").style.display = "none";
        var nroTitAdt = dijit.byId("NroTitAdt");
        var ValorParcAdic = dijit.byId("ValorParcAdic");
        var vencimentoTaxa = dijit.byId("VctoAdt");
        //REAJUSTE_ANUAL
        switch (parseInt(tipoAditamento)) {
            case ADICIONAR_PARCELAS:
                dijit.byId("gridDescontoAdt").setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: null }) }));
                dijit.byId("gridDescontoAdt").cloneItensDesconto = [];
                nroTitAdt.set("disabled", false);
                ValorParcAdic.set("disabled", false);
                //vencimentoTaxa.set("disabled", false);
                nroTitAdt.set("required", true);
                vencimentoTaxa.set("required", true);
                dojo.byId("idTagAdiciParcela").style.display = "";

                dojo.byId('tdLabelTifpoFinanceiro').style.display = "";
                dojo.byId('tdTifpoFinanceiro').style.display = "";
                dijit.byId("tipoFinanceiroAditamento").set("required", true);

                dojo.byId('tdLabelTifpoFinanceiroDisabled').style.display = "none";
                dojo.byId('tdTifpoFinanceiroDisabled').style.display = "none";

               

                break;
            case PERDA_DESCONTO:
            case CONCESSAO_DESCONTO:
            case TRANSFERENCIA_TURMA:
            case MAIORIDADE:
            case REAJUSTE_ANUAL:
            case ADITIVO_BOLSA:
                dojo.byId('tdLabelTifpoFinanceiro').style.display = "none";
                dojo.byId('tdTifpoFinanceiro').style.display = "none";
                dijit.byId("tipoFinanceiroAditamento").set("required", false);

                dojo.byId('tdLabelTifpoFinanceiroDisabled').style.display = "";
                dojo.byId('tdTifpoFinanceiroDisabled').style.display = "";

                nroTitAdt._onChangeActive = false;
                dojo.byId("idTagAdiciParcela").style.display = "none";
                nroTitAdt.set("disabled", true);
                //vencimentoTaxa.set("disabled", true);
                nroTitAdt.reset();
                dojo.byId("VctoAdt").value = '';
                nroTitAdt._onChangeActive = true;

                // dijit.byId('dtInicioAdto').setAttribute('value', 0);
                // dijit.byId('dtInicioAdto').setAttribute('disabled', true);

                nroTitAdt.set("required", false);
                vencimentoTaxa.set("required", false);
                if (tipoAditamento == PERDA_DESCONTO || tipoAditamento == CONCESSAO_DESCONTO)
                    dojo.byId("tagDescontos").style.display = "";
                switch (parseInt(tipoAditamento)) {
                    case PERDA_DESCONTO:
                        dijit.byId("btnAddDescontoAdt").set("disabled", true);
                        //dijit.byId("btnExcluirDesscAdt").set("disabled", false)
                        break;
                    case CONCESSAO_DESCONTO:
                        dijit.byId("btnAddDescontoAdt").set("disabled", false);
                        //dijit.byId("btnExcluirDesscAdt").set("disabled", true)
                        break;
                    case ADITIVO_BOLSA:
                        dojo.byId("idTagAditivoBolsa").style.display = "";
                        break;
                }
                break;
        }
        if (!dojo.byId("ckManual").checked && dijit.byId('tipoContratoAdto').aditamento && hasValue(dijit.byId("gridAditamento").editAditamento) && dijit.byId("gridAditamento").editAditamento.id_ajuste_manual) {
            dijit.byId("btnAddDescontoAdt").set("disabled", true);
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function travarMatriculaGerarTitulo(bool) {
    try {
        var contratoBD = dijit.byId("editContrato").value;
        var tipoOperacao = dijit.byId("tipoAditamento").value;
        dijit.byId('dtaMatricula').set("disabled", bool);
        dijit.byId('tipoDocumentoTax').set("disabled", bool);
        dijit.byId('valorCurso').set("disabled", bool);
        dijit.byId('parcelas').set("disabled", bool);
        dijit.byId('valorParcela').set("disabled", bool);
        dijit.byId('desconto').set("disabled", bool);
        dijit.byId('valorDesconto').set("disabled", bool);
        dijit.byId('divida').set("disabled", bool);
        dijit.byId('ckPrimeiraParcela').set("disabled", bool);
        dijit.byId('valorFaturar').set("disabled", bool);
        if (hasValue(dijit.byId('dia').value) && (dijit.byId('dia').value) != 0)
        dijit.byId('dia').set("disabled", bool);
        dijit.byId('mes').set("disabled", bool);
        dijit.byId('ano').set("disabled", bool);
        dijit.byId('tipoDocumento').set("disabled", bool);
        dijit.byId('valorTaxaMatricula').set("disabled", bool);
        dijit.byId('vencimentoTaxa').set("disabled", bool);
        dijit.byId('numeroParcelasTaxa').set("disabled", bool);
        dijit.byId('cadPessoaResponsavelTax').set("disabled", bool);
        dijit.byId('percentualResponsavelTax').set("disabled", bool);
        if (!dijit.byId("fkTaxaMatricula").sugestaoAtiva)
            dijit.byId('fkTaxaMatricula').set("disabled", bool);
        dijit.byId('cadPessoaResponsavel').set("disabled", bool);
        dijit.byId('percentualResponsavel').set("disabled", bool);
        if (!dijit.byId("fkPlanoContasMat").sugestaoAtiva)
            dijit.byId("fkPlanoContasMat").set("disabled", bool);
        dijit.byId("ckAula").set("disabled", bool);
        //dijit.byId("btnAddDesconto").set("disabled", bool);
        //Aditamento
        //dijit.byId('tipoAditamento').set("disabled", bool);
        //dijit.byId("VctoAdt").set("disabled", bool);
        //dijit.byId("dtInicioAdto").set("disabled", bool);
        //dijit.byId("NroTitAdt").set("disabled", bool);
        //dijit.byId("edValorAulaAdto").set("disabled", bool);
        //Fim aditamento
        dijit.byId("nroPrimeiroCheque").set("disabled", bool);
        dijit.byId("emissorChequeName").set("disabled", bool);


        //LBM Sem sentido
        //verificaMatriculaNormal()
        //    ? dijit.byId("btnAddTurma").set("disabled", false)
        //    : dijit.byId("btnAddTurma").set("disabled", true);
        dijit.byId("ckRetornoCad").set("disabled", bool);
        dijit.byId("acoesRelacionadasT").set("disabled", false);

        dijit.byId("fkAluno").set("disabled", bool);
        dijit.byId("cd_produto_atual").set("disabled", bool);
        //dijit.byId("cd_curso_atual").set("disabled", bool);
        dijit.byId("cd_duracao_atual").set("disabled", bool);
        dijit.byId("cd_regime_atual").set("disabled", bool);
        if (!dijit.byId("fkTaxaMatricula").sugestaoAtiva)
            dijit.byId("limparPlanoContasMat").set("disabled", bool);


        if (dijit.byId("tipoContratoAdto").aditamento) {
            if (!dijit.byId("fkTaxaMatricula").sugestaoAtiva)
                dijit.byId("limparPlanoContasMat").set("disabled", true);
            if (!dijit.byId("fkPlanoContasMat").sugestaoAtiva)
                dijit.byId("limparPlanoContaTx").set("disabled", true);
            //dijit.byId("cd_curso_atual").set("disabled", true);
        } else {

            if (!hasValue(dijit.byId("cd_produto_atual").value)) {
                //quando editar um contrato e ainda não montou todos os campos
                if (hasValue(contratoBD) && hasValue(contratoBD.contrato) && hasValue(contratoBD.contrato.cd_produto_atual) && contratoBD.contrato.cd_produto_atual > 0)
                    dijit.byId('cd_curso_atual').set('readOnly', false);
                    //dijit.byId("cd_curso_atual").set("disabled", false);
                else
                    dijit.byId('cd_curso_atual').set('readOnly', true);
                    //dijit.byId("cd_curso_atual").set("disabled", true);

            } else {
                //quando editar um contrato e mexeu nos campos da tela
                if (hasValue(dijit.byId("cd_produto_atual").value) && dijit.byId("cd_produto_atual").value > 0)
                    dijit.byId('cd_curso_atual').set('readOnly', false);
                    //dijit.byId("cd_curso_atual").set("disabled", false);
                else
                    dijit.byId('cd_curso_atual').set('readOnly', true);
                    //dijit.byId("cd_curso_atual").set("disabled", true);
            }

            if (hasValue(dojo.byId("cd_plano_contas").value) && dojo.byId("cd_plano_contas").value > 0) {
                if (!dijit.byId("fkTaxaMatricula").sugestaoAtiva)
                    dijit.byId("limparPlanoContasMat").set("disabled", false);
            } else
                if (!dijit.byId("fkTaxaMatricula").sugestaoAtiva)
                    dijit.byId("limparPlanoContasMat").set("disabled", true);
            if (hasValue(dojo.byId("cd_plano_contas_tx").value) && dojo.byId("cd_plano_contas_tx").value > 0) {
                if (!dijit.byId("fkPlanoContasMat").sugestaoAtiva)
                    dijit.byId("limparPlanoContaTx").set("disabled", false);
            } else
                if (!dijit.byId("fkPlanoContasMat").sugestaoAtiva)
                    dijit.byId("limparPlanoContaTx").set("disabled", true);
        }
        dijit.byId("btnAddDesconto").set("disabled", bool);
    } catch (e) {
        postGerarLog(e);
    }
}

function verificarRegrasAditamento(manterMensagem) {
    try {
        if (manterMensagem)
            apresentaMensagem('apresentadorMensagemMat', null);
        var mensagensWeb = new Array();
        var valorAditivo = dijit.byId("valorAditivo");
        var vl_aditivo = valorAditivo.value;
        var tipoOperacao = dijit.byId("tipoAditamento").value;
        var saldoMatricula = unmaskFixed(dijit.byId("vl_saldo_matricula").value, 2);
        if (tipoOperacao != ADICIONAR_PARCELAS && parseFloat(saldoMatricula) <= 0 && parseFloat(vl_aditivo) > 0) {
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroNotExistParcelaAbertaParaAditamento + " " + retornarTipoAditamento() + ".");
            apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
            valorAditivo._onChangeActive = false;
            valorAditivo.reset();
            valorAditivo.oldValue = 0;
            valorAditivo._onChangeActive = true;
            return false;
        }
        return true;
    } catch (e) {
        postGerarLog(e);
    }
}

function retornarTipoAditamento() {
    try {
        var tipo = "";
        if (dijit.byId("tipoContratoAdto").aditamento) {
            var tipoAdt = dijit.byId("tipoAditamento").value;
            if (hasValue(tipoAdt) && tipoAdt > 0) {
                if (tipoAdt == PERDA_DESCONTO)
                    tipo = "Perda de Descontos";
                if (tipoAdt == CONCESSAO_DESCONTO)
                    tipo = "Concessão de Descontos";
                if (tipoAdt == TRANSFERENCIA_TURMA)
                    tipo = "Transferência de Turma";
                if (tipoAdt == MAIORIDADE)
                    tipo = "Maioridade";
                if (tipoAdt == ADITIVO_BOLSA)
                    tipo = "Bolsa";
            }
        }
        return tipo;
    } catch (e) {
        postGerarLog(e);
    }
}

// Não permitir criar aditamento para matricula com valor zerado e sem titulos.
function verificarMatriculaValorZerado() {

    if (hasValue(dijit.byId('gridTitulo').length)) return false;

    montarPesqTitulo(parseInt(dojo.byId('cd_contrato').value),
        false,
        function() {
            var gridTitulo = dijit.byId('gridTitulo');
            var titulos = gridTitulo.store.objectStore.data;
            valorCurso = dijit.byId('valorCurso').value;
            var somaValorTitulo = 0;
            if (hasValue(titulos.length)) {
                $.each(gridTitulo.store.objectStore.data,
                    function(idx, value) {
                        somaValorTitulo += value.vl_titulo;
                    });
            }

            if (!hasValue(titulos.length) || somaValorTitulo <= 0) {
                return true;
            }
            return false;
        });


}

function verificarAlteracaoMensalidadeContrato() {
    try {
        var retorno = false;
        var contratoBD = dijit.byId("editContrato").value;
        var mensalidadeContrato = montarCamposMudancaTitulo();
        var cdPlano = hasValue(mensalidadeContrato.cd_plano_conta) && mensalidadeContrato.cd_plano_conta > 0 ? mensalidadeContrato.cd_plano_conta : null
        if (hasValue(contratoBD) && hasValue(mensalidadeContrato)) {
            if (contratoBD.contrato.dtMatriculaContrato != mensalidadeContrato.dt_matricula_contrato ||
                contratoBD.contrato.vl_curso_contrato != mensalidadeContrato.vl_curso_contrato ||
                contratoBD.contrato.nm_parcelas_mensalidade != mensalidadeContrato.nm_parcelas_mensalidade ||
                contratoBD.contrato.pc_desconto_contrato != mensalidadeContrato.pc_desconto_contrato ||
                contratoBD.contrato.vl_desconto_contrato != mensalidadeContrato.vl_desconto_contrato ||
                contratoBD.contrato.id_divida_primeira_parcela != mensalidadeContrato.id_divida_primeira_parcela ||
                contratoBD.contrato.vl_divida_contrato != mensalidadeContrato.vl_divida_contrato ||
                contratoBD.contrato.nm_dia_vcto != mensalidadeContrato.nm_dia_vcto ||
                contratoBD.contrato.nm_mes_vcto != mensalidadeContrato.nm_mes_vcto ||
                contratoBD.contrato.nm_ano_vcto != mensalidadeContrato.nm_ano_vcto ||
                contratoBD.contrato.pc_responsavel_contrato != mensalidadeContrato.pc_responsavel_contrato ||
                (contratoBD.contrato.cd_plano_conta != cdPlano)

                ) {
                retorno = true;
            }
            if (hasValue(contratoBD.taxa) && ((contratoBD.taxa.cd_tipo_financeiro_taxa != mensalidadeContrato.cd_tipo_financeiro_taxa) ||
                contratoBD.taxa.dta_vcto_taxa != mensalidadeContrato.dta_vcto_taxa ||
                contratoBD.taxa.nm_parcelas_taxa != mensalidadeContrato.nm_parcelas_taxa ||
                contratoBD.taxa.cd_pessoa_responsavel_taxa != mensalidadeContrato.cd_pessoa_responsavel_taxa ||
                contratoBD.taxa.pc_responsavel_taxa != mensalidadeContrato.pec_responsavel_taxa)) {
                retorno = true;
            } else
                if (!hasValue(contratoBD.taxa) && ((hasValue(mensalidadeContrato.cd_tipo_financeiro_taxa) && mensalidadeContrato.cd_tipo_financeiro_taxa > 0) ||
                    hasValue(mensalidadeContrato.dta_vcto_taxa) ||
                    (hasValue(mensalidadeContrato.nm_parcelas_taxa) && mensalidadeContrato.nm_parcelas_taxa > 2) ||
                    (hasValue(mensalidadeContrato.cd_pessoa_responsavel_taxa) && mensalidadeContrato.cd_pessoa_responsavel_taxa > 0) ||
                    (hasValue(mensalidadeContrato.pec_responsavel_taxa) && mensalidadeContrato.pec_responsavel_taxa != 100)))
                    retorno = true;
            if (hasValue(contratoBD.cheque) && ((contratoBD.cheque.nm_primeiro_cheque != mensalidadeContrato.nm_primeiro_cheque) ||
                                               (contratoBD.cheque.no_emitente_cheque != mensalidadeContrato.no_emitente_cheque))) {
                retorno = true;
            } else
                if (!hasValue(contratoBD.cheque) && ((hasValue(mensalidadeContrato.nm_primeiro_cheque) && mensalidadeContrato.nm_primeiro_cheque > 0) ||
                    hasValue(mensalidadeContrato.no_emitente_cheque)))
                    retorno = true;

            //valorParcela
            //valorFaturar
            //val_matricula_taxa
        }
        return retorno;
    } catch (e) {
        postGerarLog(e);
    }
}

function montarCamposMudancaTitulo() {
    try {
        var objeto = {
            dt_matricula_contrato: dojo.byId('dtaMatricula').value,
            cd_tipo_financeiro_taxa: dijit.byId('tipoDocumentoTax').value,
            vl_curso_contrato: dijit.byId('valorCurso').value,
            nm_parcelas_mensalidade: dijit.byId('parcelas').value,
            valorParcela: dijit.byId('valorParcela').value,
            pc_desconto_contrato: dijit.byId('desconto').value,
            vl_desconto_contrato: dijit.byId('valorDesconto').value,
            vl_divida_contrato: dijit.byId('divida').value,
            id_divida_primeira_parcela: dijit.byId('ckPrimeiraParcela').get("checked"),
            valorFaturar: dijit.byId('valorFaturar').value,
            nm_dia_vcto: dijit.byId('dia').get("value"),
            nm_mes_vcto: dijit.byId('mes').get("value"),
            nm_ano_vcto: dijit.byId('ano').get("value"),
            cd_tipo_financeiro: dijit.byId('tipoDocumento').value,
            val_matricula_taxa: dijit.byId('valorTaxaMatricula').value,
            dta_vcto_taxa: dojo.byId('vencimentoTaxa').value,
            nm_parcelas_taxa: dijit.byId('numeroParcelasTaxa').value,
            cd_pessoa_responsavel_taxa: dojo.byId('cd_responsavel_tax').value,
            pec_responsavel_taxa: dijit.byId('percentualResponsavelTax').get("value"),
            pc_responsavel_contrato: dijit.byId('percentualResponsavel').value,
            cd_plano_conta: dojo.byId('cd_plano_contas').value,
            nm_primeiro_cheque: (dojo.byId("nroPrimeiroCheque").value).replace(".", ""),
            no_emitente_cheque: dojo.byId("emissorChequeName").value
        }
        if (!hasValue(objeto.nm_dia_vcto)) objeto.nm_dia_vcto = 0;
        if (!hasValue(objeto.nm_mes_vcto)) objeto.nm_mes_vcto = 0;
        if (!hasValue(objeto.nm_ano_vcto)) objeto.nm_ano_vcto = 0;
        return objeto;
    } catch (e) {
        postGerarLog(e);
    }
}

function loadDataAditamento(data, setarTipoContratoAdto) {
    try {
        onChangeActive(false);
        if (hasValue(data)) {
            if (setarTipoContratoAdto) {
                //dijit.byId("tipoContratoAdto")._onChangeActive = true;
                if (hasValue(data.cd_nome_contrato)) {
                    configurarLayouTagAditamento(data.cd_nome_contrato);
                    dijit.byId("tipoContratoAdto").set('value', data.cd_nome_contrato);
                    if (hasValue(data.id_tipo_data_inicio)) {
                        dijit.byId("tipoDataContratoAdto").set('value', data.id_tipo_data_inicio);
                        if (hasValue(data.dt_inicio_aditamento)) {
                            dijit.byId("dtInicioAdto").set('value', data.dt_inicio_aditamento);
                        }
                    }
                    
                    dijit.byId("tipoContratoAdto").set('value', data.cd_nome_contrato);
                    if (data.id_tipo_aditamento != null) {
                        marcarMatriculaComLayoutAditamento(null, null, data.cd_nome_contrato);

                    }
                } else {
                    dijit.byId("tipoContratoAdto").reset();
                    dijit.byId('tipoAditamento').set("disabled", true);
                    configurarLayouTagAditamento(0);
                    if (data.id_tipo_aditamento != null) {
                        marcarMatriculaComLayoutAditamento(data.id_tipo_aditamento, null, null);
                    }
                }
                // dijit.byId("tipoContratoAdto")._onChangeActive = false;
            }
            if (hasValue(data.id_tipo_aditamento)) {
                dijit.byId("tipoAditamento").set('value', data.id_tipo_aditamento);
                habilitarCamposPorTipoAditamento(data.id_tipo_aditamento);

                if (data.cd_aditamento > 0) {
                    bloquearCamposQuandoExistirIdAditamento();
                }
            }
            else
                dijit.byId("tipoAditamento").reset();
            dijit.byId("tipoDataContratoAdto").set('value', data.id_tipo_data_inicio);
            dojo.byId("cd_aditamento").value = data.cd_aditamento;
            dojo.byId("cd_usuario_aditamento").value = data.cd_usuario;
            if (hasValue(data.dt_vcto_aditamento))
                dijit.byId("VctoAdt").set('value', data.dt_vcto_aditamento);
            dijit.byId("edValorAulaAdto").set('value', data.vl_aula_hora);

            dojo.byId("spDiaVencAdto").value = data.nm_dia_vcto_desconto;
            dijit.byId("edPrevDias").set('value', data.nm_previsao_inicial);

            dijit.byId("tipoPagto").set('value', data.id_tipo_pagamento);
            if (hasValue(dijit.byId("tipoPagto").value))
                dijit.byId("tipoPagto").set("disabled", false);
            else
                dijit.byId("tipoPagto").set("disabled", true);
            if (hasValue(data.nm_titulos_aditamento)) {
                dijit.byId("NroTitAdt").set('value', data.nm_titulos_aditamento);
                dijit.byId("NroTitAdt").oldValue = data.nm_titulos_aditamento;
            }
            if (hasValue(data.tx_obs_aditamento))
                dijit.byId("descObsAditamento").set('value', data.tx_obs_aditamento);
            dijit.byId("dtInicioAdto").set('value', data.dt_inicio_aditamento);

            dijit.byId("dtInicioAditamento")._onChangeActive = false;
            dijit.byId("dtInicioAditamento").set('value', data.dt_inicio_aditamento);
            dijit.byId("dtInicioAditamento")._onChangeActive = true;

            if (hasValue(data.nm_dia_vcto_desconto))
                existe_data_alteracao_aditivo = true;

            if (hasValue(data.Desconto) && data.Desconto.length > 0) {
                dijit.byId("gridDescontoAdt").setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: data.Desconto }) }));
                dijit.byId("gridDescontoAdt").cloneItensDesconto = cloneArray(data.Desconto);
            }
            if (hasValue(data.vl_parcela_titulo_aditamento)) {
                dijit.byId("ValorParcAdic").set('value', data.vl_parcela_titulo_aditamento);
                dijit.byId("ValorParcAdic").oldValue = data.vl_parcela_titulo_aditamento;
            }
            if (hasValue(data.id_tipo_aditamento) && (data.id_tipo_aditamento == CONCESSAO_DESCONTO || data.id_tipo_aditamento == PERDA_DESCONTO))
                if (hasValue(data.Desconto) && data.Desconto.length > 0)
                    alternarHabilitacaoValorAditivo(data.Desconto);
                else
                    alternarHabilitacaoValorAditivo(null);
            if (hasValue(data.vl_aditivo)) {
                dijit.byId("valorAditivo").set('value', data.vl_saldo_aditivo_em_aberto);
                dijit.byId("valorAditivo").oldValue = unmaskFixed(dijit.byId("vl_saldo_matricula").value, 2);
            }
            if (hasValue(data.id_tipo_aditamento)) {
                var valorFaturarAnterior = buscarValorAnteriorAditamentoEdicaoMatricula();
                if (hasValue(valorFaturarAnterior))
                    dijit.byId("VlAnteriorAdt").set('value', valorFaturarAnterior);
            }

            if (hasValue(data.cd_tipo_financeiro) && data.cd_tipo_financeiro > 0) {
                dijit.byId("tipoFinanceiroAditamento").set('value', data.cd_tipo_financeiro);
            }

            //Aditamento Bolsa
            if (hasValue(data.AditamentoBolsa) && data.AditamentoBolsa.length > 0) {
                dijit.byId("valorAditivo").set('disabled', true);
                dijit.byId("aditivobolsaPorcentual").set('value', data.AditamentoBolsa[0].pc_bolsa);
                if (hasValue(data.AditamentoBolsa[0].dt_comunicado_bolsa)) {
                    dijit.byId("aditivobolsaDataComunicado")._onChangeActive = false;
                    dijit.byId("aditivobolsaDataComunicado").set('value', data.AditamentoBolsa[0].dt_comunicado_bolsa);
                    dijit.byId("aditivobolsaDataComunicado")._onChangeActive = true;
                }
                dijit.byId("aditivobolsaDescValidade").set('value', data.AditamentoBolsa[0].dc_validade_bolsa);
                if (hasValue(data.AditamentoBolsa[0].cd_motivo_bolsa))
                    dijit.byId("aditivobolsaMotivoBolsa").set('value', data.AditamentoBolsa[0].cd_motivo_bolsa);
            }

            if (hasValue(data.dt_vencto_inicial)) {
                dijit.byId("dtAdtVencInicial").set('value', data.dt_vencto_inicial);
            }
        }
        onChangeActive(true);
    } catch (e) {
        postGerarLog(e);
    }
}

function abrirAlunoFKMatriculaCad() {
    try {
        //Configuração retorno fk de aluno na matrícula
        dojo.byId('tipoRetornoAlunoFK').value = CADMATRICULA;
        dijit.byId("gridPesquisaAluno").setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: null }) }));
        limparPesquisaAlunoFK();
        dijit.byId('statusAlunoFK').set('value',1)
        pesquisarAlunoFKMatricula(true);
        dijit.byId("proAluno").show();
        apresentaMensagem('apresentadorMensagemMat', null);
    } catch (e) {
        postGerarLog(e);
    }
}

function pesquisarAlunoFKMatricula(pesquisaHabilitada) {
    try {
        var sexo = hasValue(dijit.byId("nm_sexo_fk").value) ? dijit.byId("nm_sexo_fk").value : 0;
        if (pesquisaHabilitada)
            require([
                    "dojo/store/JsonRest",
                    "dojo/data/ObjectStore",
                    "dojo/store/Cache",
                    "dojo/store/Memory"
            ], function (JsonRest, ObjectStore, Cache, Memory) {
                try {
                    myStore = Cache(
                    JsonRest({
                        target: Endereco() + "/api/aluno/getAlunoSearch?nome=" + dojo.byId("nomeAlunoFk").value + "&email=" + dojo.byId("emailPesqFK").value + "&status=" + dijit.byId("statusAlunoFK").value + "&cnpjCpf=" + dojo.byId("cpf_fk").value + "&inicio=" + document.getElementById("inicioAlunoFK").checked + "&cdSituacoes=100&sexo=" + sexo + "&semTurma=false&movido=false&tipoAluno=0&matriculasem=false&matricula=true",
                        handleAs: "json",
                        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                        idProperty: "cd_aluno"
                    }), Memory({ idProperty: "cd_aluno" }));
                    dataStore = new ObjectStore({ objectStore: myStore });
                    var gridAluno = dijit.byId("gridPesquisaAluno");
                    gridAluno.itensSelecionados = [];
                    gridAluno.setStore(dataStore);
                }
                catch (e) {
                    postGerarLog(e);
                }
            });
    }
    catch (e) {
        postGerarLog(e);
    }
}

//Desconto Aditamento

function montarEstruturaAditamentoDifAddParcelas(tipoAdt) {
    try {
        tipoAdt = parseInt(tipoAdt);
        var vlAnteriorFaturar = 0;
        var vlSaldoContrato = unmaskFixed(dijit.byId("vl_saldo_matricula").value, 2);
        var valorFaturar = vlSaldoContrato;
        var valorAditivo = dijit.byId("valorAditivo");

        //NÃO DISPARAR EVENTO PARA CALCULO DO ADITAMENTO.
        dijit.byId('aditivobolsaPorcentual')._onChangeActive = false;
        dijit.byId("aditivobolsaPorcentual").reset();

        // APÓS ALTERAÇÃO DO VALOR VOLTAR A DISPARAR O EVENTO.
        dijit.byId('aditivobolsaPorcentual')._onChangeActive = true;

        dijit.byId("aditivobolsaDataComunicado").reset();
        dijit.byId("aditivobolsaDescValidade").reset();
        dijit.byId("aditivobolsaMotivoBolsa").reset();
        switch (tipoAdt) {
            case PERDA_DESCONTO:
            case CONCESSAO_DESCONTO:
                dojo.byId('tdLabelTifpoFinanceiro').style.display = "none";
                dojo.byId('tdTifpoFinanceiro').style.display = "none";
                dijit.byId("tipoFinanceiroAditamento").set("required", false);

                dojo.byId('tdLabelTifpoFinanceiroDisabled').style.display = "";
                dojo.byId('tdTifpoFinanceiroDisabled').style.display = "";

                var gridDescAdt = dijit.byId("gridDescontoAdt");
                var descAnt = pegarDescontoMatriculaOuDescontoAnteriorAditamento();
                gridDescAdt.setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: descAnt }) }));
                if (hasValue(descAnt) && descAnt.length > 0)
                    gridDescAdt.cloneItensDesconto = cloneArray(descAnt);
                valorAditivo._onChangeActive = false;
                valorAditivo.set("value", valorFaturar);
                valorAditivo.oldValue = valorFaturar;
                valorAditivo._onChangeActive = true;
                vlAnteriorFaturar = buscarValorAnteriorAditamento(dojo.byId("cd_aditamento").value, RETORNO_VALOR_FATURAR);
                dijit.byId("VlAnteriorAdt").set("value", vlAnteriorFaturar);
                alternarHabilitacaoValorAditivo(descAnt);
                break;
            case ADICIONAR_PARCELAS:

                dojo.byId('tdLabelTifpoFinanceiro').style.display = "";
                dojo.byId('tdTifpoFinanceiro').style.display = "";
                dijit.byId("tipoFinanceiroAditamento").set("required", true);

                dojo.byId('tdLabelTifpoFinanceiroDisabled').style.display = "none";
                dojo.byId('tdTifpoFinanceiroDisabled').style.display = "none";

                var gridAditamento = dijit.byId("gridAditamento");
                var alterouDataIniAdt = false;
                var editBD = gridAditamento.editAditamento;
                if (hasValue(editBD) && hasValue(editBD.dtaInicioAditamento) && editBD.dtaInicioAditamento != dojo.byId("dtInicioAdto").value)
                    alterouDataIniAdt = true;
                if (alterouDataIniAdt) {
                    inativarEventoOnChangeAditamento();
                    dijit.byId("valorAditivo").reset();
                    dijit.byId("NroTitAdt").reset();
                    dijit.byId("ValorParcAdic").reset();
                    //dijit.byId("valorAditivo").oldValue = 0;
                    dijit.byId("NroTitAdt").oldValue = 0;
                    dijit.byId("ValorParcAdic").oldValue = 0;
                    ativaEventoOnChangeAditamento();
                } else {
                    var ultimoAditivo = buscarValorAnteriorAditamento(dojo.byId("cd_aditamento").value, RETORNO_ADITAMENTO_ANTERIOR);


                    if (hasValue(ultimoAditivo)) {
                        inativarEventoOnChangeAditamento();
                        dijit.byId("valorAditivo").set("value", ultimoAditivo.vl_aditivo);
                        dijit.byId("NroTitAdt").set("value", ultimoAditivo.nm_titulos_aditamento);
                        dijit.byId("ValorParcAdic").set("value", ultimoAditivo.vl_parcela_titulo_aditamento);

                        dijit.byId("NroTitAdt").oldValue = ultimoAditivo.nm_titulos_aditamento;
                        dijit.byId("ValorParcAdic").oldValue = ultimoAditivo.vl_aditivo;
                        dijit.byId("ValorParcAdic").oldValue = ultimoAditivo.vl_parcela_titulo_aditamento;
                        ativaEventoOnChangeAditamento();
                    }
                }
                dijit.byId("VlAnteriorAdt").set("value", valorFaturar);
                break;
            case MAIORIDADE:
            case TRANSFERENCIA_TURMA:
                dojo.byId('tdLabelTifpoFinanceiro').style.display = "none";
                dojo.byId('tdTifpoFinanceiro').style.display = "none";
                dijit.byId("tipoFinanceiroAditamento").set("required", false);

                dojo.byId('tdLabelTifpoFinanceiroDisabled').style.display = "";
                dojo.byId('tdTifpoFinanceiroDisabled').style.display = "";

                alternarHabilitacaoValorAditivo(null);
                dijit.byId("VlAnteriorAdt").set("value", valorFaturar);
                vlAnteriorFaturar = buscarValorAnteriorAditamento(dojo.byId("cd_aditamento").value, RETORNO_VALOR_FATURAR);
                dijit.byId("VlAnteriorAdt").set("value", vlAnteriorFaturar);
                var gridDescAdt = dijit.byId("gridDescontoAdt");
                gridDescAdt.setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: [] }) }));
                gridDescAdt.cloneItensDesconto = [];
                valorAditivo._onChangeActive = false;
                valorAditivo.set("value", valorFaturar);
                valorAditivo.oldValue = valorFaturar;
                valorAditivo._onChangeActive = true;
                break;
            case ADITIVO_BOLSA:
                dojo.byId('tdLabelTifpoFinanceiro').style.display = "none";
                dojo.byId('tdTifpoFinanceiro').style.display = "none";
                dijit.byId("tipoFinanceiroAditamento").set("required", false);

                dojo.byId('tdLabelTifpoFinanceiroDisabled').style.display = "";
                dojo.byId('tdTifpoFinanceiroDisabled').style.display = "";

                dijit.byId("valorAditivo").set("disabled", true);
                vlAnteriorFaturar = buscarValorAnteriorAditamento(dojo.byId("cd_aditamento").value, RETORNO_VALOR_FATURAR);
                dijit.byId("VlAnteriorAdt").set("value", vlAnteriorFaturar);
                var gridDescAdt = dijit.byId("gridDescontoAdt");
                gridDescAdt.setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: [] }) }));
                gridDescAdt.cloneItensDesconto = [];
                valorAditivo._onChangeActive = false;
                valorAditivo.set("value", valorFaturar);
                valorAditivo.oldValue = valorFaturar;
                valorAditivo._onChangeActive = true;
                break;
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function excluirDescontoAdt() {
    try {
        apresentaMensagem("apresentadorMensagemMat", null);
        var tipoAditamento = dijit.byId("tipoAditamento").value;
        if (parseInt(tipoAditamento) == CONCESSAO_DESCONTO) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, "Não é possível incluir desconto para aditamentos do tipo perda de desconto.");
            apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
            return false;
        }
        gerar_titulo = false;
        //var cloneItens = clone(dijit.byId("gridDescontoAdt").itensSelecionados);
        deletarItemSelecionadoGrid(dojo.store.Memory, dojo.data.ObjectStore, 'cd_tipo_desconto', dijit.byId("gridDescontoAdt"));
        //calcularESetarValoresDescontoAdt(EXCLUIR, null, null, true, null);
        alternarHabilitacaoValorAditivo(dijit.byId("gridDescontoAdt").store.objectStore.data);
        simuladorAditamento(gerar_titulo);
    } catch (e) {
        postGerarLog(e);
    }
}

function calcularESetarValoresDescontoAdt(operacao, vl_saldo, nroParcelas, aplicarDescontos, itensTipoDesconto, calcular_desc_todos_titulos_adt, recuperar_valor_aditivo) {
    try {
        if (!hasValue(vl_saldo, true))
            vl_saldo = unmaskFixed(dijit.byId("vl_saldo_matricula").value, 2);
        if (!hasValue(nroParcelas))
            nroParcelas = hasValue(dojo.byId("qtd_titulos_abertos").value, true) ? parseInt(dojo.byId("qtd_titulos_abertos").value) : 0;
        var totalTodosDescontosPorcentagem = 0;
        var valorDescontoTotalAplicadoTitulos = 0;
        var valorTotalTitulosDepoisVoltaDescontos = 0;
        var tipoAdt = dijit.byId("tipoAditamento").value;
        var gridDescontoAdt = dijit.byId('gridDescontoAdt');
        var gridDesconto = dijit.byId('gridDesconto');
        var listaTodosTitulos = gridDescontoAdt.listaTodosTitulos;
        var itensDesc = new Array();
        var parcelasGeradas = new Array();
        if (!hasValue(itensTipoDesconto))
            itensTipoDesconto = pegarDescontoMatriculaOuDescontoAnteriorAditamento();//gridDescontoAdt.store.objectStore.data;
        if (!hasValue(itensTipoDesconto))
            itensTipoDesconto = [];

        if (hasValue(calcular_desc_todos_titulos_adt)) {
            var listaDescontosAbaPrincipal = gridDesconto.store.objectStore.data;
            for (var i = 0; i < listaDescontosAbaPrincipal.length; i++) {
                itensTipoDesconto.push(listaDescontosAbaPrincipal[i]);
            }
        }

        for (var i = 0; i < itensTipoDesconto.length; i++) {
            if (itensTipoDesconto[i].id_desconto_ativo && !itensTipoDesconto[i].id_incide_baixa &&
                ((tipoAdt == CONCESSAO_DESCONTO) || (tipoAdt == PERDA_DESCONTO))) {
                if (itensTipoDesconto[i].id_desconto_ativo && !itensTipoDesconto[i].id_incide_baixa)
                    itensDesc.push(itensTipoDesconto[i]);
            }
            if (hasValue(calcular_desc_todos_titulos_adt) && itensTipoDesconto[i].id_desconto_ativo &&
                !itensTipoDesconto[i].id_incide_baixa && (tipoAdt == ADICIONAR_PARCELAS)) {

                var existe_desconto_lista = jQuery.grep(itensDesc, function (desconto) {
                    return desconto.cd_tipo_desconto == itensTipoDesconto[i].cd_tipo_desconto;
                });

                if (!hasValue(existe_desconto_lista))
                    itensDesc.push(itensTipoDesconto[i]);
            }
        }

        if (hasValue(calcular_desc_todos_titulos_adt)) {
            nroParcelas = 0;
            if (hasValue(dijit.byId("NroTitAdt").value))
                nroParcelas = dijit.byId("NroTitAdt").value;
            ValorParcAdic = nroParcelas * dijit.byId("ValorParcAdic").value;

            parcelasGeradas = gerarParcelasDescontosAditamento(listaTodosTitulos, nroParcelas, 0, unmaskFixed(ValorParcAdic / nroParcelas, 2), calcular_desc_todos_titulos_adt);
        }
        else {
            //Verifica se existem descontos gravados no título e faz as verificações novas com ele, se não, faz da forma antiga que o (saldo / nro_parcelas).
            parcelasGeradas = gerarParcelasDescontosAditamento(listaTodosTitulos, nroParcelas, unmaskFixed(vl_saldo / nroParcelas, 2));
        }
        parcelasGeradas = alterarNumeroTituloParcelasGeradas(listaTodosTitulos, parcelasGeradas);

        for (var i = 0; i < itensDesc.length; i++) {
            var lista = new Array();
            //Quando informado parcela inicial e final, é selecionadas as parcelas no intervalo.
            if (itensDesc[i].nm_parcela_ini > 0 && itensDesc[i].nm_parcela_fim > 0) {
                lista = jQuery.grep(parcelasGeradas, function (value) {
                    return value.nm_parcela_titulo >= itensDesc[i].nm_parcela_ini && value.nm_parcela_titulo <= itensDesc[i].nm_parcela_fim;
                });
            }
            //Quando informado parcela inicial e não final, é selecionadas as parcelas apartir da parcela inicial
            if (itensDesc[i].nm_parcela_ini > 0 && itensDesc[i].nm_parcela_fim <= 0) {
                lista = jQuery.grep(parcelasGeradas, function (value) {
                    return value.nm_parcela_titulo >= itensDesc[i].nm_parcela_ini;
                });
            }
            //Quando informado parcela finçal e não a inicial, é selecionadas as parcelas com a numerção menor e igual a parcela final.
            if (itensDesc[i].nm_parcela_ini <= 0 && itensDesc[i].nm_parcela_fim > 0) {
                lista = jQuery.grep(parcelasGeradas, function (value) {
                    return value.nm_parcela_titulo <= itensDesc[i].nm_parcela_fim;
                });
            }
            //Quando não informado a parcela inicial e a final, pegara todas as parcelas.
            if (itensDesc[i].nm_parcela_ini <= 0 && itensDesc[i].nm_parcela_fim <= 0) {
                lista = parcelasGeradas;
            }
            if (aplicarDescontos)
                $.each(lista, function (index, value) {
                    if (parseFloat(itensDesc[i].pc_desconto) > 0) {
                        var pc_desc = (itensDesc[i].pc_desconto).toString().replace(',', '.');
                        pc_desc = parseFloat(pc_desc).toFixed(2);
                        value.pc_total_desconto_aplicado = calcularValoresDescontoPorPecentualOrValor(pc_desc, null, value.pc_total_desconto_aplicado, vl_saldo, true);
                    }

                    if (parseFloat(itensDesc[i].vl_desconto_contrato) > 0) {
                        var vl_desconto = removerdecimal(itensDesc[i].vl_desconto_contrato.toString());
                        vl_desconto = parseFloat(vl_desconto).toFixed(2);
                        value.pc_total_desconto_aplicado = calcularValoresDescontoPorPecentualOrValor(null, vl_desconto, value.pc_total_desconto_aplicado, vl_saldo, true);
                    }
                });
        }

        $.each(parcelasGeradas, function (index, value) {
            if (aplicarDescontos) {
                var vl_desc_calc = unmaskFixed(value.vl_parcela * (value.pc_total_desconto_aplicado / 100) + value.vl_total_desconto_aplicado, 2);
                value.vl_parcela_desconto = unmaskFixed(value.vl_parcela - vl_desc_calc, 2);
                value.vl_desconto_separado = vl_desc_calc;
                valorDescontoTotalAplicadoTitulos += vl_desc_calc;
            } else {
                value.vl_parcela_desconto = value.vl_parcela;// + value.vl_desconto_separado;
                value.vl_desconto_contrato = 0;
                valorTotalTitulosDepoisVoltaDescontos += value.vl_parcela;
            }
        });

        // Todos descontos:
        if (aplicarDescontos) {
            dojo.byId('totalValorTodosDescontosAdt').value = valorDescontoTotalAplicadoTitulos;
            dojo.byId('totalPorcentagemTodosDescontosAdt').value = totalTodosDescontosPorcentagem;
            validarDescontoMaximoAdt(dijit.byId('VlAnteriorAdt').value, calcular_desc_todos_titulos_adt);
            calcularPerdaEConcessaoDescontoAdt(operacao, calcular_desc_todos_titulos_adt, recuperar_valor_aditivo);
        } else
            return valorTotalTitulosDepoisVoltaDescontos;
    } catch (e) {
        postGerarLog(e);
    }
}

function validarDescontoMaximoAdt(valorFaturar, calcular_desc_todos_titulos_adt) {
    try {
        var validado = true;
        var valorDescontoMaximo = 0;
        var saldoMatricula = unmaskFixed(dijit.byId("vl_saldo_matricula").value, 2);
        var percMaximoDesconto = dojo.byId('totalDescontosPermitidos').value;
        var totalValorTodosDescontos = parseFloat(dojo.byId('totalValorTodosDescontosAdt').value);
        var totalTodosDescontosPorcentagem = parseFloat(dojo.byId('totalPorcentagemTodosDescontosAdt').value);
        var valorPercTransformado = 0;

        if (eval(saldoMatricula) > 0) {
            if (!isNaN(percMaximoDesconto) && percMaximoDesconto != 0)
                percMaximoDesconto = unmaskFixed(percMaximoDesconto, 2);
            else percMaximoDesconto = 0;
            var totalTodosDescontos = saldoMatricula * (totalTodosDescontosPorcentagem / 100) + totalValorTodosDescontos;
            valorDescontoMaximo = saldoMatricula * (parseFloat(percMaximoDesconto) / 100);

            if (totalTodosDescontos > valorDescontoMaximo || totalTodosDescontos > valorFaturar) {
                var mensagensWeb = new Array();
                if (totalTodosDescontos > valorDescontoMaximo) {
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroValorUltrapassaDescontoParamentro);
                    apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
                }
                else if (totalTodosDescontos > valorFaturar && !hasValue(calcular_desc_todos_titulos_adt)) {
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroValorUltrapassaDescontoTotal);
                    apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
                }
                validado = false;
            }
        }
        return validado;
    } catch (e) {
        postGerarLog(e);
    }
}

function calcularPerdaEConcessaoDescontoAdt(operacao, calcular_desc_todos_titulos_adt, recuperar_valor_aditivo) {
    try {
        var valorFaturar = 0;
        var valorDifAditivoAnterior = 0;
        valorFaturar = dijit.byId('VlAnteriorAdt').value;
        var saldoMatricula = unmaskFixed(dijit.byId("vl_saldo_matricula").value, 2);
        var totalValorTodosDescontos = parseFloat(dojo.byId('totalValorTodosDescontosAdt').value);
        var totalTodosDescontosPorcentagem = parseFloat(dojo.byId('totalPorcentagemTodosDescontosAdt').value);
        var ajuste_manual_anterior = parseInt(dojo.byId("id_ajuste_manual_anterior").value) == 0 ? false : true;
        if (eval(saldoMatricula) > 0 || hasValue(calcular_desc_todos_titulos_adt))
            switch (parseInt(dijit.byId("tipoAditamento").value)) {
                case CONCESSAO_DESCONTO:
                case PERDA_DESCONTO:
                case ADICIONAR_PARCELAS:
                    if (saldoMatricula > 0 || hasValue(calcular_desc_todos_titulos_adt)) {
                        //Caso já tivesse marcado a matricula como ajuste manual anteriormente, perde todos os descontos.
                        if (!ajuste_manual_anterior) {
                            //volta o valor total do saldo sem os descontos, para fazer a aplicação novamente de todos os descontos
                            valorFaturar = voltarDescontosSaldo(saldoMatricula, calcular_desc_todos_titulos_adt);
                            valorFaturar = parseFloat(valorFaturar);

                            if (hasValue(calcular_desc_todos_titulos_adt)) {

                                if ((hasValue(dijit.byId("ValorParcAdic").value) && hasValue(dijit.byId("NroTitAdt").value)) ||
                                    (hasValue(dijit.byId("valorAditivo").value) && hasValue(dijit.byId("NroTitAdt").value))) {
                                    if (hasValue(dijit.byId('VlAnteriorAdt').value))
                                        valorFaturar += dijit.byId('VlAnteriorAdt').value + totalValorTodosDescontos;
                                    else
                                        valorFaturar += saldoMatricula + totalValorTodosDescontos;
                                }
                            }

                            var totalTodosDescontos = valorFaturar * (totalTodosDescontosPorcentagem / 100) + totalValorTodosDescontos;
                        } else {
                            valorFaturar = saldoMatricula;
                            totalTodosDescontos = 0;
                        }

                        if (operacao == EXCLUIR) {
                            dijit.byId("valorAditivo").set("value", unmaskFixed(valorFaturar - totalTodosDescontos, 2));
                            dijit.byId("valorAditivo").oldValue = unmaskFixed(valorFaturar - totalTodosDescontos, 2);
                        }
                        if (operacao == ADICIONAR) {

                            if (recuperar_valor_aditivo == true)
                                dijit.byId("valorAditivo")._valor_aditivo = unmaskFixed(valorFaturar - totalTodosDescontos, 2);
                            else {
                                dijit.byId("valorAditivo").set("value", unmaskFixed(valorFaturar - totalTodosDescontos, 2));
                                dijit.byId("valorAditivo").oldValue = unmaskFixed(valorFaturar - totalTodosDescontos, 2);
                            }
                            dijit.byId("valorAditivo").calcular_desc_todos_titulos_adt = calcular_desc_todos_titulos_adt;
                        }
                        break;
                    }
            }

    } catch (e) {
        postGerarLog(e);
    }
}

function mostarDescontosAditamento() {
    try {
        var gridHistAditamento = dijit.byId("gridAditamento");
        var itensSelecionados = dijit.byId("gridAditamento").itensSelecionados;
        if (!hasValue(itensSelecionados) || itensSelecionados.length <= 0)
            caixaDialogo(DIALOGO_AVISO, msgNotSelectReg, null);
        else if (itensSelecionados.length > 1)
            caixaDialogo(DIALOGO_ERRO, msgMaisDeUmRegSelect, null);
        else {
            var gridDescHistAdt = dijit.byId("gridDescontoHistAdt");
            if (hasValue(itensSelecionados) && itensSelecionados.length > 0 && hasValue(itensSelecionados[0].Desconto))
                gridDescHistAdt.setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: cloneArray(itensSelecionados[0].Desconto) }) }));
            else
                gridDescHistAdt.setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: null }) }));
            dijit.byId("dialogDescontosAditamento").show();
        }
    }
    catch (e) {
        postGerarLog(e);
    }
}



function deletarAditamento(itensSelecionados, xhr, ref) {
    try {
        if (!hasValue(itensSelecionados) || itensSelecionados.length <= 0)
            caixaDialogo(DIALOGO_AVISO, 'Selecione algum Aditamento para realizar a ação de excluir.', null);
        else if (itensSelecionados.length > 1)
            caixaDialogo(DIALOGO_ERRO, 'Selecione somente um Aditamento para  realizar a ação de excluir.', null);
        else {
            showCarregando();
            xhr.post({
                url: Endereco() + "/api/secretaria/deleteAditamentoByContrato",
                headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                postData: ref.toJson({
                    cd_contrato: itensSelecionados[0].cd_contrato,
                    cd_aditamento: itensSelecionados[0].cd_aditamento
                })
            }).then(function(data) {
                try {
                        var dataRet = JSON.parse(data);
                        if (hasValue(dataRet) && dataRet.retorno != undefined) {
                            gerar_titulo = true;
                            getdAditamentoMaxDataEHistorico(itensSelecionados[0].cd_contrato);
                            dijit.byId("gridAditamento").itensSelecionados = [];
                            hideCarregando();
                        }
                        
                    } catch (e) {
                        hideCarregando();
                        postGerarLog(e);
                    }
                },
                function(error) {
                    hideCarregando();
                    apresentaMensagem('apresentadorMensagemMatAdt', error);
                });
        }
    }
    catch (e) {
        hideCarregando();
        postGerarLog(e);
    }
}

function montarDialogoObservacaoAditamento() {
    try {
        var gridAditamento = dijit.byId('gridAditamento');
        var itensSelecionados = gridAditamento.itensSelecionados;

        if (!hasValue(itensSelecionados) || itensSelecionados.length <= 0)
            caixaDialogo(DIALOGO_AVISO, msgNotSelectReg, null);
        else if (itensSelecionados.length > 1)
            caixaDialogo(DIALOGO_ERRO, msgMaisDeUmRegSelect, null);
        else {
            apresentaMensagem('apresentadorMensagemMat', '');
            clearForm("formObservacaoAdt");
            if (hasValue(itensSelecionados[0].tx_obs_aditamento))
                dijit.byId('textAreaObsAdt').set('value', itensSelecionados[0].tx_obs_aditamento);
            dijit.byId('dialogObservacaoAdit').show();
        }
    } catch (e) {
        postGerarLog(e);
    }
}
//Aditamento Bolsa
function mostarAditamentoBolsa() {
    try {
        var gridAditamento = dijit.byId('gridAditamento');
        var itensSelecionados = gridAditamento.itensSelecionados;

        if (!hasValue(itensSelecionados) || itensSelecionados.length <= 0)
            caixaDialogo(DIALOGO_AVISO, msgNotSelectReg, null);
        else if (itensSelecionados.length > 1)
            caixaDialogo(DIALOGO_ERRO, msgMaisDeUmRegSelect, null);
        else {
            apresentaMensagem('apresentadorMensagemMat', '');
            clearForm("formAdtitamentoBolsa");
            dijit.byId('dialogAditamentoBolsa').set("title", "Bolsa dia: " + itensSelecionados[0].dtaHoraAditamento);

            if (hasValue(itensSelecionados[0].AditamentoBolsa) && itensSelecionados[0].AditamentoBolsa.length > 0) {
                dijit.byId("aditbolsaPercentual").set('value', itensSelecionados[0].AditamentoBolsa[0].pc_bolsa);

                if (hasValue(itensSelecionados[0].AditamentoBolsa[0].dt_comunicado_bolsa))
                    dijit.byId("aditbolsaDtaComunicao").set('value', itensSelecionados[0].AditamentoBolsa[0].dt_comunicado_bolsa);

                dijit.byId("aditbolsaDescValidade").set('value', itensSelecionados[0].AditamentoBolsa[0].dc_validade_bolsa);

                if (hasValue(itensSelecionados[0].AditamentoBolsa[0].MotivoBolsa.dc_motivo_bolsa))
                    dijit.byId("aditbolsaMotBolsa").set('value', itensSelecionados[0].AditamentoBolsa[0].MotivoBolsa.dc_motivo_bolsa);
            }
            dijit.byId('dialogAditamentoBolsa').show();
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function pegarDescontoMatriculaOuDescontoAnteriorAditamento() {
    try {
        var gridAditamento = dijit.byId("gridAditamento");
        var gridDescontoAdt = dijit.byId('gridDescontoAdt').store.objectStore.data;
        var gridDescMensa = dijit.byId("gridDesconto");
        var cd_aditamento_atual = hasValue(dojo.byId("cd_aditamento").value) && dojo.byId("cd_aditamento").value > 0 ? parseInt(dojo.byId("cd_aditamento").value) : null;
        var descontos = null;
        var alterouDataIniAdt = false;
        var achou_ajuste_manual = false;
        var editBD = gridAditamento.editAditamento;
        if (hasValue(editBD) && hasValue(editBD.dtaInicioAditamento) && editBD.dtaInicioAditamento != dojo.byId("dtInicioAdto").value)
            alterouDataIniAdt = true;
        if (hasValue(gridAditamento) && hasValue(gridAditamento.store.objectStore.data) && gridAditamento.store.objectStore.data.length > 0) {
            var encontrou_aditamento_concessao_perda_desconto = false;
            $.each(gridAditamento.historicoAditamento, function (index, value) {
                if (!dojo.byId("ckManual").checked && value.id_ajuste_manual) {
                    achou_ajuste_manual = true;
                    return false;
                }
                //if ((alterouDataIniAdt || (!alterouDataIniAdt && value.cd_aditamento != cd_aditamento_atual) ||
                //    (value.cd_aditamento == cd_aditamento_atual)) &&
                if ((alterouDataIniAdt || (!alterouDataIniAdt && value.cd_aditamento != cd_aditamento_atual) || (value.cd_aditamento == cd_aditamento_atual)) &&
                    hasValue(value.id_tipo_aditamento) && (value.id_tipo_aditamento == CONCESSAO_DESCONTO || value.id_tipo_aditamento == PERDA_DESCONTO)) {
                    if (hasValue(value.Desconto) && value.Desconto.length > 0)
                        descontos = clone(value.Desconto);
                    encontrou_aditamento_concessao_perda_desconto = true;
                    return false;
                }
            });
            if (!achou_ajuste_manual && !encontrou_aditamento_concessao_perda_desconto && !hasValue(descontos))
                if (hasValue(gridDescMensa) && hasValue(gridDescMensa.store.objectStore.data) && gridDescMensa.store.objectStore.data.length > 0)
                    descontos = clone(gridDescMensa.store.objectStore.data);
        } else
            if (hasValue(gridDescMensa) && hasValue(gridDescMensa.store.objectStore.data) && gridDescMensa.store.objectStore.data.length > 0)
                descontos = clone(gridDescMensa.store.objectStore.data);
        if (hasValue(descontos))
            $.each(descontos, function (idx, value) {
                //value.desc_incluso_valor = true;
                value.cd_desconto_contrato = 0;
                value.pc_desconto_contrato = unmaskFixed(value.pc_desconto, 2);
                value.vl_desconto_contrato = unmaskFixed(value.vl_desconto_contrato, 2);
            });

        alterouStatusAditamento = false;
        return descontos;
    } catch (e) {
        postGerarLog(e);
    }
}

function buscarValorAnteriorAditamento(cd_aditamento_atual, tipo_retorno) {
    try {
        var valorFaturar = dijit.byId('valorFaturar').get('value');
        if (dijit.byId('ckPrimeiraParcela').checked)
            valorFaturar = parseFloat(valorFaturar) + parseFloat(divida);
        var objeto;
        var divida = dijit.byId('divida').get('value');
        var gridAditamento = dijit.byId("gridAditamento");
        var retorno;
        //Aplicando o valor de abatimento no valor anterior, quando for o valor liquido do contrato.
        var valorPreMatricula = dijit.byId('vl_pre_matricula').get('value');
        var valorTaxamatricula = dijit.byId('valorTaxaMatricula').get('value');
        if (hasValue(valorPreMatricula) && valorPreMatricula > 0 && hasValue(valorTaxamatricula) && valorTaxamatricula > 0) {
            if (valorPreMatricula > valorTaxamatricula)
                valorPreMatricula -= valorTaxamatricula;
            else
                valorPreMatricula = 0;
        }
        valorFaturar -= valorPreMatricula;
        //gridAditamento.vlDividaMtAplicado = false;
        //if (!isNaN(divida) && divida != "" && !dijit.byId("ckPrimeiraParcela").checked)
        //    divida = parseFloat(divida).toFixed(2).toString().replace(',', '.');
        //if (!dijit.byId('ckPrimeiraParcela').checked) {
        //    valorFaturar = parseFloat(valorFaturar) + parseFloat(divida);
        //    gridAditamento.vlDividaMtAplicado = true;
        //}
        var alterouDataIniAdt = false;
        var editBD = gridAditamento.editAditamento;
        if (hasValue(editBD) && hasValue(editBD.dtaInicioAditamento) && editBD.dtaInicioAditamento != dojo.byId("dtInicioAdto").value)
            alterouDataIniAdt = true;
        if (hasValue(gridAditamento)) {
            if (hasValue(gridAditamento.store.objectStore.data) && gridAditamento.store.objectStore.data.length > 1) {
                if (alterouDataIniAdt) {
                    if (hasValue(gridAditamento.store.objectStore.data[0].id_tipo_aditamento)) {
                        valorFaturar = gridAditamento.store.objectStore.data[0].vl_aditivo;
                        var objeto = gridAditamento.store.objectStore.data[0];
                    }
                } else
                    if (hasValue(gridAditamento.store.objectStore.data[1].id_tipo_aditamento)) {
                        valorFaturar = gridAditamento.store.objectStore.data[1].vl_aditivo;
                        var objeto = gridAditamento.store.objectStore.data[1];
                    }

            } else
                if ((alterouDataIniAdt || tipo_retorno == RETORNO_ADITAMENTO_ANTERIOR) && hasValue(gridAditamento.store.objectStore.data) && gridAditamento.store.objectStore.data.length > 0 && hasValue(gridAditamento.store.objectStore.data[0].id_tipo_aditamento)) {
                    valorFaturar = gridAditamento.store.objectStore.data[0].vl_aditivo;
                    var objeto = gridAditamento.store.objectStore.data[0];
                }
        }
        if (tipo_retorno == RETORNO_VALOR_FATURAR)
            retorno = valorFaturar;
        else
            retorno = objeto;
        return retorno;
    } catch (e) {
        postGerarLog(e);
    }
}

function voltarValorFaturarAnterior(item) {
    try {
        var vl_aditivo = item.vl_aditivo;
        var valorFaturar = dijit.byId('valorCurso').get('value');
        var totalPercDesconto = 0;
        var totalVlDescontos = 0;
        $.each(item.Desconto, function (idx, value) {
            if (parseFloat(value.pc_desconto) > 0) {
                var pc_descT = (value.pc_desconto).toString().replace(',', '.')
                pc_descT = parseFloat(pc_descT).toFixed(2);

                if (somar_desconto)
                    totalPercDesconto = parseFloat(totalPercDesconto) + parseFloat(pc_descT);
                else {
                    if (totalPercDesconto > 0)
                        totalPercDesconto = 100 - ((1 - parseFloat(totalPercDesconto) / 100) * (1 - parseFloat(pc_descT) / 100)) * 100;
                    else
                        totalPercDesconto = 100 - (1 - parseFloat(pc_descT) / 100) * 100;
                }
            }
            if (parseFloat(value.vl_desconto_contrato) > 0) {
                var vl_descontoT = removedecimal(value.vl_desconto_contrato.toString());
                vl_descontoT = parseFloat(vl_descontoT).toFixed(2)
                totalVlDescontos = parseFloat(totalVlDescontos) + parseFloat(vl_descontoT);
            }
        });
        if (totalVlDescontos > 0)
            vl_aditivo = vl_aditivo + totalVlDescontos;
        valorFaturar = (vl_aditivo * 100) / (100 - totalPercDesconto);
        //valorFaturar = valorFaturar - valorFaturar * totalPercDesconto / 100 + totalVlDescontos;
        return valorFaturar;
    } catch (e) {
        postGerarLog(e);
    }
}

function alternarHabilitacaoValorAditivo(descontos) {
    if (hasValue(descontos) && descontos.length > 0)
        dijit.byId("valorAditivo").set("disabled", true);
    else
        dijit.byId("valorAditivo").set("disabled", false);
}

function abrirBaixa() {
    var apresentadorMensagem = "apresentadorMensagemMat";
    apresentaMensagem(apresentadorMensagem, null);
    var mensagensWeb = new Array();

    var gridTitulo = dijit.byId('gridTitulo');
    var titulos = gridTitulo.store.objectStore.data;
    for (var i = 0; i < titulos.length; i++) {
        if (titulos[i].cd_titulo <= 0) {
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroTituloSalvo);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            return false;
        }
    }
    if (hasValue(gridTitulo.itensSelecionados)) {
        gridTitulo.itemSelecionado = gridTitulo.itensSelecionados[0];
        for (var j = 0; j < gridTitulo.itensSelecionados.length; j++) {
            if (gridTitulo.itensSelecionados[j].vl_saldo_titulo <= 0) {
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroTituloBaixado);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                return false;
            }
        }
    }
    mostrarCadastroBaixaFinanceira(true, gridTitulo, null, dojo.xhr, dojox.json.ref);
}

function abrirMailMarketingFk() {
    try {
        //Configuração retorno fk de aluno na matrícula
        limparPesquisaMailMarketingFK();
        pesquisarMailMarketingFK();
        dijit.byId("proMailMarketing").show();
        dijit.byId("pesquisarMailMarketingFK").on("click", function (e) {
            apresentaMensagem("apresentadorMensagemMailMarketingFK", null);
            pesquisarMailMarketingFK();
        });
        apresentaMensagem('apresentadorMensagemMailMarketingFK', null);
    } catch (e) {
        postGerarLog(e);
    }
}

function retornarMailMarketingFK() {
    try {
        var nom_aluno, nom_resposavel, cd_aluno, cd_pessoa_aluno, cd_pessoa_responsavel;

        var gridPesquisaMailMarketing = dijit.byId("gridPesquisaMailMarketing");
        if (!hasValue(gridPesquisaMailMarketing.itensSelecionados) || gridPesquisaMailMarketing.itensSelecionados.length <= 0) {
            caixaDialogo(DIALOGO_AVISO, msgNotSelectReg, null);
            return false;
        }
        else if (gridPesquisaMailMarketing.itensSelecionados.length > 1) {
            caixaDialogo(DIALOGO_ERRO, msgMaisDeUmRegSelect, null);
            return false;
        }
        else {
            showCarregando();
            dojo.byId("cd_mala_direta").value = gridPesquisaMailMarketing.itensSelecionados[0].cd_mala_direta;
            dojo.byId("emailMarketingFK").value = gridPesquisaMailMarketing.itensSelecionados[0].dc_assunto;

            dijit.byId("fkEmailMarketing").set("disabled", true);
            dijit.byId("limparEmailMarketing").set("disabled", false);

            dijit.byId("proMailMarketing").hide();
            showCarregando();
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function voltarDescontosSaldo(saldo, calcular_desc_todos_titulos_adt) {
    try {
        var totalTodosDescontosValor = 0;
        var totalTodosDescontosPorcentagem = 0;
        var tipoAdt = dijit.byId("tipoAditamento").value;
        var gridDescontoAdt = dijit.byId('gridDescontoAdt');
        var itensTipoDesconto = new Array();
        itensTipoDesconto = gridDescontoAdt.cloneItensDesconto;
        saldo = calcularESetarValoresDescontoAdt(null, saldo, null, false, itensTipoDesconto, calcular_desc_todos_titulos_adt);
        //if (valorDescontoCalc > 0)
        //    saldo = saldo + valorDescontoCalc;
        return saldo;
    } catch (e) {
        postGerarLog(e);
    }
}

function buscarValorAnteriorAditamentoEdicaoMatricula() {
    try {
        var valorFaturar = dijit.byId('valorFaturar').get('value');
        var valorPreMatricula = dijit.byId('vl_pre_matricula').get('value');
        var valorTaxamatricula = dijit.byId('valorTaxaMatricula').get('value');
        if (hasValue(valorPreMatricula) && valorPreMatricula > 0 && hasValue(valorTaxamatricula) && valorTaxamatricula > 0) {
            if (valorPreMatricula > valorTaxamatricula)
                valorPreMatricula -= valorTaxamatricula;
            else
                valorPreMatricula = 0;
        }
        valorFaturar -= valorPreMatricula;
        if (dijit.byId('ckPrimeiraParcela').checked)
            valorFaturar = parseFloat(valorFaturar) + parseFloat(divida);
        var gridAditamento = dijit.byId("gridAditamento");
        if (hasValue(gridAditamento)) {
            if (hasValue(gridAditamento.store.objectStore.data) && gridAditamento.store.objectStore.data.length > 0) {
                if (hasValue(gridAditamento.store.objectStore.data[1]) && hasValue(gridAditamento.store.objectStore.data[1].id_tipo_aditamento))
                    valorFaturar = gridAditamento.store.objectStore.data[1].vl_aditivo;
            }
        }
        return valorFaturar;
    } catch (e) {
        postGerarLog(e);
    }
}

function getDataInicioAditivo() {
    var cdAluno = dojo.byId('cd_aluno_mat').value;
    //Irá sugerir a data quando não tiver data de inicio do aditivo, quando tiver alterado dia/ano/mês de vencimento do título e/ou aluno e/ou escola 
    if (!existe_data_alteracao_aditivo && atualizar_data_aditivo && cdAluno > 0) {
        var dataInicio = dojo.byId("dia").value + "/" + dojo.byId("mes").value + "/" + dojo.byId("ano").value;

        var dia = dojo.byId("dia").value > 9 ? dojo.byId("dia").value : "0" + dojo.byId("dia").value;
        var mes = dojo.byId("mes").value > 9 ? dojo.byId("mes").value : "0" + dojo.byId("mes").value;
        var dataVencimentoMensalidade = new Date(dojo.byId("ano").value, (dojo.byId("mes").value - 1), dojo.byId("dia").value);

        //Verificando ultimo dia do mês
        var ultimaDataMês = new Date(dojo.byId("ano").value, (dojo.byId("mes").value), 0);
        var ultimaDiaMês = (new Date(dojo.byId("ano").value, (dojo.byId("mes").value), 0)).getDate();
        if ((ultimaDataMês.getMonth() + 1) != (dataVencimentoMensalidade.getMonth() + 1))
            dataInicio = ultimaDiaMês + "/" + dojo.byId("mes").value + "/" + dojo.byId("ano").value;
        //new Date(dojo.byId("ano").value, (dojo.byId("mes").value - 1), ultimaDiaMês);

        var cdTurma = 0;
        var grid = dijit.byId("gridTurmaMat");
        if (grid.store.objectStore.data.length > 0)
            for (var i = 0; i < grid.store.objectStore.data.length; i++)
                if (grid.store.objectStore.data[i].cd_situacao_aluno_turma == AGUARDANDO_MATRICULA ||
                    grid.store.objectStore.data[i].cd_situacao_aluno_turma == TIPOREMATRICULA ||
                    grid.store.objectStore.data[i].cd_situacao_aluno_turma == TIPOMATRICULA) {
                    cdTurma = grid.store.objectStore.data[i].cd_turma;
                    break;
                }

        dojo.xhr.get({
            url: Endereco() + "/api/financeiro/getCriarDataPoliticaContrato?cdTurma=" + cdTurma + "&cdAluno=" + cdAluno + "&dataVencto=" + dataInicio,
            preventCache: true,
            handleAs: "json",
            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
        }).then(function (data) {
            try {
                dijit.byId("spDiaVencAdto").set("value", data);

            } catch (e) {
                postGerarLog(e);
            }
        },
       function (error) {
           apresentaMensagem('apresentadorMensagem', error);
       });
    }
}

function populaAluno(dados) {
    showCarregando();
    var gridPesquisaAluno = dijit.byId("gridPesquisaAluno");
    if (hasValue(gridPesquisaAluno) && hasValue(gridPesquisaAluno.itensSelecionados) && gridPesquisaAluno.itensSelecionados.length > 0) {
        atualizar_data_aditivo = true;
        var dadosAluno = {
            cd_aluno: gridPesquisaAluno.itensSelecionados[0].cd_aluno,
            nom_aluno: gridPesquisaAluno.itensSelecionados[0].no_pessoa,
            cd_pessoa_aluno: gridPesquisaAluno.itensSelecionados[0].cd_pessoa_aluno,
            cd_pessoa_responsavel: gridPesquisaAluno.itensSelecionados[0].cd_pessoa_dependente,
            no_pessoa_responsavel: gridPesquisaAluno.itensSelecionados[0].no_pessoa_dependente,
            pc_bolsa: 0,
            dt_inicio_bolsa: null,
            vl_abatimento_matricula: 0
        }

        dojo.byId("cd_aluno_mat").value = dadosAluno.cd_aluno;
        dojo.byId("cd_pessoa_aluno_mat").value = dadosAluno.cd_pessoa_aluno;
        dojo.byId("nomeAlunoMat").value = gridPesquisaAluno.itensSelecionados[0].no_pessoa;
        dojo.byId("cd_responsavel_mens").value = dadosAluno.cd_pessoa_responsavel != null && dadosAluno.cd_pessoa_responsavel > 0 ? dadosAluno.cd_pessoa_responsavel : dadosAluno.cd_pessoa_aluno;
        dojo.byId("pessoaResponsavel").value = dadosAluno.no_pessoa_responsavel != null ? dadosAluno.no_pessoa_responsavel : dadosAluno.nom_aluno;
        dojo.byId("cd_responsavel_tax").value = dadosAluno.cd_pessoa_responsavel != null ? dadosAluno.cd_pessoa_responsavel : dadosAluno.cd_pessoa_aluno;
        dojo.byId("pessoaResponsavelTax").value = dadosAluno.no_pessoa_responsavel != null ? dadosAluno.no_pessoa_responsavel : dadosAluno.nom_aluno;
        if (hasValue(gridPesquisaAluno.itensSelecionados[0].pc_bolsa) && gridPesquisaAluno.itensSelecionados[0].pc_bolsa > 0) {
            dadosAluno.pc_bolsa = gridPesquisaAluno.itensSelecionados[0].pc_bolsa;
            dadosAluno.dt_inicio_bolsa = gridPesquisaAluno.itensSelecionados[0].dt_inicio_bolsa;
        }
        if (hasValue(gridPesquisaAluno.itensSelecionados[0].vl_abatimento_matricula))
            dadosAluno.vl_abatimento_matricula = gridPesquisaAluno.itensSelecionados[0].vl_abatimento_matricula;
        if (hasValue(gridPesquisaAluno.itensSelecionados[0].pc_bolsa_material) && gridPesquisaAluno.itensSelecionados[0].pc_bolsa_material > 0) {
            dadosAluno.pc_bolsa_material = gridPesquisaAluno.itensSelecionados[0].pc_bolsa_material;
            dadosAluno.dt_inicio_bolsa = gridPesquisaAluno.itensSelecionados[0].dt_inicio_bolsa;
        }
        verificaMatriculaNormal()
            ? dijit.byId("btnAddTurma").set("disabled", false)
            : dijit.byId("btnAddTurma").set("disabled", true);
        criaNovaMatricula(dojo.xhr, dojo.store.Memory, dadosAluno, 1, dojo.data.ObjectStore,
        function () {
            if (dados.retorno.cd_turma > 0) {
                gridTurmaMat = dijit.byId("gridTurmaMat");

                var turmas = [{
                    cd_turma: dados.retorno.cd_turma,
                    no_turma: dados.retorno.no_turma,
                    cd_produto: dados.retorno.Produto.cd_produto,
                    no_produto: dados.retorno.Produto.no_produto,
                    no_professor: dados.retorno.no_professor,
                    cd_situacao_aluno_turma: 9,
                    situacaoAlunoTurma: msgAguardandoMat,
                    cd_aluno: gridPesquisaAluno.itensSelecionados[0].cd_aluno,
                    cd_pessoa_aluno: gridPesquisaAluno.itensSelecionados[0].cd_pessoa_aluno,
                    dt_matricula: null,
                    dt_movimento: null,
                    dt_inicio: null,
                    nm_matricula_turma: null,
                    cd_pessoa_responsavel: gridPesquisaAluno.itensSelecionados[0].cd_pessoa_aluno,
                    no_responsavel: gridPesquisaAluno.itensSelecionados[0].no_pessoa
                }];
                gridTurmaMat.setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: turmas }) }));

                populaSemTurma(dados.retorno.Produto.cd_produto, dados.retorno.cd_curso, dados.retorno.cd_duracao, dados.retorno.cd_regime, 0, dojo.xhr, dojo.store.Memory, null);
                dojo.byId("tagSemTurma").style.display = "none";
                dijit.byId("btnAddTurma").set("disabled", true);
                dadosAlunoTurma(dojo.xhr, gridPesquisaAluno.itensSelecionados[0].cd_aluno, dados.retorno.cd_turma);
                getContratoReturnTurma(dojo.store.Memory, dojo.xhr, dojo.byId("dtaMatricula").value,
                    dados.retorno.cd_curso,
                    dados.retorno.cd_duracao,
                    dados.retorno.Produto.cd_produto,
                    dados.retorno.cd_regime,
                    dados.retorno.cd_nome_contrato, false);
            }
            else {
                dojo.byId("tagSemTurma").style.display = "";
                verificaMatriculaNormal()
                    ? dijit.byId("btnAddTurma").set("disabled", false)
                    : dijit.byId("btnAddTurma").set("disabled", true);
            }
        });
    }
    if (!hasValue(dadosAluno.cd_pessoa_responsavel) || dadosAluno.cd_pessoa_responsavel == dadosAluno.cd_pessoa_aluno)
        dijit.byId("cadResponsavel").set("disabled", false);
    else
        dijit.byId("cadResponsavel").set("disabled", true);
    dijit.byId("proAluno").hide();
    hideCarregando();
}

function AtualizarSaldoEmAbertMatricula() {
    try {
        var cd_contrato = hasValue(dojo.byId("cd_contrato").value) ? dojo.byId("cd_contrato").value : 0;
        var vl_perc_bolsa_contrato_old = hasValue(dijit.byId("perc_bolsa").old_value) ? dijit.byId("perc_bolsa").old_value : 0;
        dojo.xhr.get({
            preventCache: true,
            url: Endereco() + "/api/secretaria/getSaldoMatricula?cd_contrato=" + cd_contrato + "&pc_bolsa=" + vl_perc_bolsa_contrato_old,
            handleAs: "json",
            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
        }).then(function (data) {
            try {
                if (hasValue(data) && hasValue(data.retorno)) {
                    dijit.byId('vl_saldo_matricula').set("value", data.retorno.valorSaldoMatricula);
                    dojo.byId("qtd_titulos_abertos").value = data.retorno.qtdTitulosAbertos;
                    dijit.byId("valorAditivo").oldValue = unmaskFixed(data.retorno.valorSaldoMatricula, 2);
                    dijit.byId('gridDescontoAdt').listaTodosTitulos = data.retorno.titulos;
                }
            } catch (e) {
                postGerarLog(e);
            }
        },
        function (error) {
            apresentaMensagem('apresentadorMensagemMat', error);
        });
    } catch (e) {
        postGerarLog(e);
    }
}

function loadNaturezaPessoaCadastroMat(Memory) {
    dojo.ready(function () {
        try {
            var stateStore = new Memory({
                data: [
                { name: "Física", id: "1" },
                { name: "Jurídica", id: "2" }
                ]
            });

            if (dijit.byId("naturezaPessoaRelacMat") != null)
                dijit.byId("naturezaPessoaRelacMat").store = stateStore;
        }
        catch (e) {
            postGerarLog(e);
        }
    });
}

function abrirPessoaFKRelacMat() {
    try {
        dojo.byId("setValuePesquisaPessoaFK").value = CPFRELAC;
        var tipoPessoa = dijit.byId('naturezaPessoaRelacMat').value;
        limparPesquisaPessoaFK()
        dijit.byId("tipoPessoaFK").set("value", tipoPessoa);
        dijit.byId("tipoPessoaFK").set("disabled", true);
        apresentaMensagem('apresMsgNewRelac', null);
        pesquisaPessoaCadFKPessoaRelacMat();
        dijit.byId("proPessoa").show();
        dojo.byId("idOrigemPessoaFK").value = CADMAT;
    }
    catch (e) {
        postGerarLog(e);
    }
}

function montarPesquisaPessoaFKPorTipoMat() {
    try {
        tipoPesq = dojo.byId("setValuePesquisaPessoaFK").value;
        apresentaMensagem("apresentadorMensagemProPessoa", null);
        if (tipoPesq == USARCPF)
            pesquisaPessoaCadFK();
        if (tipoPesq == CPFRELAC)
            pesquisaPessoaCadFKPessoaRelacMat();
        dijit.byId("proPessoa").show();
    }
    catch (e) {
        postGerarLog(e);
    }
}

function pesquisaPessoaCadFKPessoaRelacMat() {
    require([
        "dojo/_base/xhr",
        "dijit/registry",
        "dojox/grid/EnhancedGrid",
        "dojox/grid/enhanced/plugins/Pagination",
        "dojo/store/JsonRest",
        "dojox/data/JsonRestStore",
        "dojo/data/ObjectStore",
        "dojo/store/Cache",
        "dojo/store/Memory",
        "dojo/ready",
        "dojo/domReady!",
        "dojo/parser"],
    function (xhr, _registry, EnhancedGrid, Pagination, JsonRest, JsonRestStore, ObjectStore, Cache, Memory, ready) {
        ready(function () {
            var myStore = Cache(
                 JsonRest({
                     target: Endereco() + "/api/aluno/getPessoaSearchEscolaWithCPFCNPJ?nome=" + dojo.byId("_nomePessoaFK").value +
                                   "&apelido=" + dojo.byId("_apelido").value + "&inicio=" + document.getElementById("inicioPessoaFK").checked + "&tipoPessoa=" + dijit.byId("tipoPessoaFK").value +
                                   "&cnpjCpf=" + dojo.byId("CnpjCpf").value + "&sexo=" + dijit.byId("sexoPessoaFK").value + "&papel=0",
                     handleAs: "json",
                     headers: { "Accept": "application/json", "Authorization": Token() }
                 }), Memory({}));

            dataStore = new ObjectStore({ objectStore: myStore });
            var grid = dijit.byId("gridPesquisaPessoa");
            grid.setStore(dataStore);
            grid.itensSelecionados = [];
        })
    });
}

function retornarPessoaMat() {
    try {
        var valido = true;
        var gridPessoaSelec = dijit.byId("gridPesquisaPessoa");
        if (!hasValue(gridPessoaSelec.itensSelecionados))
            gridPessoaSelec.itensSelecionados = [];
        if (!hasValue(gridPessoaSelec.itensSelecionados) || gridPessoaSelec.itensSelecionados.length <= 0 || gridPessoaSelec.itensSelecionados.length > 1) {
            if (gridPessoaSelec.itensSelecionados != null && gridPessoaSelec.itensSelecionados.length <= 0)
                caixaDialogo(DIALOGO_AVISO, msgNotSelectReg, null);
            if (gridPessoaSelec.itensSelecionados != null && gridPessoaSelec.itensSelecionados.length > 1)
                caixaDialogo(DIALOGO_AVISO, msgMaisDeUmRegSelect, null);
            valido = false;
        }
        else {
            var value = gridPessoaSelec.itensSelecionados;
            if (dojo.byId("setValuePesquisaPessoaFK").value == USARCPF) {
                dojo.byId("cpf").value = "";
                dijit.byId("cpf").value = "";
                $("#cdPessoaCpf").val(value[0].cd_pessoa);
                $("#nomPessoaCpf").val(value[0].no_pessoa);
            }
            if (dojo.byId("setValuePesquisaPessoaFK").value == CPFRELAC) {
                $("#codPessoaRelac").val(value[0].cd_pessoa);
                $("#noPessoaRelacMat").val(value[0].no_pessoa);
                $("#inputRelacMat").val(value[0].nm_cpf_cgc);
                dijit.byId("inputRelacMat").set("disabled", true);
                dijit.byId("sexoRelacMat").set("value", value[0].nm_sexo);
                dijit.byId("sexoRelacMat").set("disabled", true);
                dijit.byId('noPessoaRelacMat').attr("disabled", true);
            }
            apresentaMensagem(dojo.byId("descApresMsg").value, null);
            dijit.byId("proPessoa").hide();
        }
        if (!valido)
            return false;
        dijit.byId("proPessoa").hide();
    }
    catch (e) {
        postGerarLog(e);
    }
}

function loadSexoMat(idSexo, Memory) {
    try {
        var stateStore = new Memory({
            data: [
                    { name: "Feminino", id: 1 },
                    { name: "Masculino", id: 2 },
					{ name: "Não Binário", id: 3 },
					{ name: "Prefiro não responder ou Neutro", id: 4 },

            ]
        });
        dijit.byId(idSexo).store = stateStore;
    }
    catch (e) {
        postGerarLog(e);
    }
}

function limparNewRelacMat() {
    try {
        //dijit.byId("pessoaResponsavel").reset();
        if (hasValue(dojo.byId("pessoaResponsavel").value) && hasValue(dojo.byId("noPessoaRelacMat").value) &&
            dojo.byId("pessoaResponsavel").value == dojo.byId("noPessoaRelacMat").value) {
            dojo.byId('cd_responsavel_mens').value = 0;
            dijit.byId('pessoaResponsavel').reset();
            gerar_titulo = true;
        }
        if (hasValue(dojo.byId("pessoaResponsavelTax").value) && hasValue(dojo.byId("noPessoaRelacMat").value) &&
         dojo.byId("pessoaResponsavelTax").value == dojo.byId("noPessoaRelacMat").value) {
            dojo.byId("cd_responsavel_tax").value = 0;
            dijit.byId('pessoaResponsavelTax').reset();
            gerar_titulo = true;
        }
        clearForm("formCpfCnpjRelacMat");
        clearForm("formNoPessoaRelacMat");
        clearForm("formSexoRelacMat");
        dijit.byId("sexoRelacMat").reset();
        dijit.byId("sexoRelacMat").set("disabled", false);
        dijit.byId("inputRelacMat").set("disabled", false);
        dijit.byId("noPessoaRelacMat").set("disabled", false);
        dijit.byId("naturezaPessoaRelacMat").set("value", PESSOAFISICA);
        dijit.byId("telefonePessoaRelacmat").reset();
        dijit.byId("grauParentMat").reset();
        limparEnderecoCadResponsavel();
    }
    catch (e) {
        postGerarLog(e);
    }
}

function incluirNewRelacMat() {
    try {
        if (!validarCadastroResponsavelMat())
            return false;
        dojo.byId('cd_responsavel_mens').value = 0;
        dojo.byId('pessoaResponsavel').value = dojo.byId("noPessoaRelacMat").value;
        dojo.byId("cd_responsavel_tax").value = 0;
        dojo.byId("pessoaResponsavelTax").value = dojo.byId("noPessoaRelacMat").value;
        dijit.byId("DialogRelacionamento").hide();
        dijit.byId("cadResponsavel").incluidoResponsavel = true;
        gerar_titulo = true;
    }
    catch (e) {
        postGerarLog(e);
    }
}

function validarCadastroResponsavelMat() {
    var Permissoes = hasValue(dojo.byId("setValuePermissoes").value) ? dojo.byId("setValuePermissoes").value : "";
    var mensagensWeb = new Array();
    validado = true;
    if (!dijit.byId("formCpfCnpjRelacMat").validate())
        validado = false;
    if (dijit.byId("naturezaPessoaRelacMat").value == PESSOAFISICA)
        if (!dijit.byId("formSexoRelacMat").validate())
            validado = false;
    if (!dijit.byId("formNoPessoaRelacMat").validate())
        validado = false;
    if (Permissoes != null && Permissoes != "" && possuiPermissao('pesE', Permissoes)) {

        if (hasValue(dijit.byId("tipoEnderecoMat").get("value")) || hasValue(dijit.byId("logradouroMat").get("value")) || hasValue(dijit.byId("estadoMat").get("value")) ||
                           hasValue(dijit.byId("cidadeMat").get("value")) || hasValue(dojo.byId("cepMat").value) || hasValue(dojo.byId("bairroMat").value) ||
                           hasValue(dojo.byId("ruaMat").value) || hasValue(dojo.byId("numeroEndRespMat").value) || hasValue(dojo.byId("complementoEndRespMat").value))
            if (!validateFormEnderecoResponsavel(dojo.window))
                validado = false
    } else
        if (!validateFormEnderecoResponsavel(dojo.window))
            validado = false;
    return validado;
}

function criarCamposCadPessoaResponsavel(Button, on) {
    $("#cepMat").mask("99999-999");
    $("#telefonePessoaRelacmat").mask("(99) 9999-9999");
    new Button({ label: "", iconClass: 'dijitEditorIcon dijitEditorIconFindSGF', onClick: function () { } }, "buscaCepRelacMat");
    new Button({
        label: "", iconClass: 'dijitEditorIcon dijitEditorIconFindSGF', onClick: function () {
            try {
                if (!hasValue(dijit.byId("gridLogradouroFK")))
                    montargridPesquisaLogradouroFK(function () { abrirPesquisaLogradouroFKMat(); });
                else
                    abrirPesquisaLogradouroFKMat();
            }
            catch (e) {
                postGerarLog(e);
            }
        }
    }, "pesLogradouroMat");
    var pesLogradouro = document.getElementById('pesLogradouroMat');
    if (hasValue(pesLogradouro)) {
        pesLogradouro.parentNode.style.minWidth = '18px';
        pesLogradouro.parentNode.style.width = '18px';
    }
    dijit.byId("cepMat").on("change", function (e) {
        try {
            if (hasValue(e) && e != "_____-___")
                pesquisarCepPessoa(e, ENDERECOPRINCIPALRESPONSAVELMATRICULA, "apresMsgNewRelacMat");
            else
                configurarLayoutEndereco(LAYOUTPADRAO, "estadoMat", "cidadeMat", "bairroMat", "ruaMat", "cepMat", null, null, null);
        }
        catch (e) {
            postGerarLog(e);
        }
    });
    dijit.byId("estadoMat").on("change", function (e) {
        try {
            var compCidade = dijit.byId("cidadeMat");
            if (!dojo.byId("estadoMat").readOnly)
                if (e != null && e > 0) {
                    if (e != dijit.byId("estadoMat").oldValue) {
                        dijit.byId("estadoMat").oldValue = e;
                        compCidade.set("readOnly", false)
                        //dijit.byId("cadCidade").set("disabled", false);
                        compCidade._onChangeActive = false;
                        compCidade.reset();
                        compCidade._onChangeActive = true;
                        carregarCidadePorEstado(e, "cidadeMat", 'apresMsgNewRelacMat');
                    }
                } else {
                    dijit.byId("estadoMat").oldValue = 0;
                    compCidade.set("readOnly", true)
                    compCidade.reset();
                    //dijit.byId("cadCidade").set("disabled", true);
                }
        }
        catch (e) {
            postGerarLog(e);
        }
    });
    dijit.byId("cidadeMat").on("change", function (e) {
        try {
            var compBairro = dijit.byId("bairroMat");
            if (!dojo.byId("cidadeMat").readOnly)
                if (e != null && e > 0) {
                    compBairro.set("readOnly", false)
                    compBairro._onChangeActive = false;
                    compBairro.reset();
                    compBairro._onChangeActive = true;
                    carregarBairroPorCidade(e, "bairroMat", 'apresMsgNewRelacMat');
                } else {
                    compBairro.set("readOnly", true)
                    //dijit.byId("cadBairro").set("disabled", true);
                    compBairro.reset();
                }
        }
        catch (e) {
            postGerarLog(e);
        }
    });
    dijit.byId("bairroMat").on("change", function (e) {
        try {
            var compRua = dijit.byId("ruaMat");
            if (e != dijit.byId("bairroMat").oldValue)
                if (!dojo.byId("cidadeMat").readOnly)
                    if (e != null && e > 0) {
                        //dojo.byId("codRua").value = 0;
                        compRua._onChangeActive = false;
                        compRua.reset();
                        compRua._onChangeActive = true;
                        compRua.reset();
                    }
        }
        catch (e) {
            postGerarLog(e);
        }
    });

    dijit.byId("bancoTitMat").on("change", function (e) {
        try {

            if ((hasValue(dijit.byId("tipoDocumentoTit").item) &&
            (dijit.byId("tipoDocumentoTit").item.id == CARTAO)) &&
                (hasValue(dijit.byId("bancoTitMat").item) && (dijit.byId("bancoTitMat").item.nm_tipo_local != LOCALCARTAODEBITO && dijit.byId("bancoTitMat").item.nm_tipo_local != LOCALCARTAOCREDITO))) {
                dijit.byId("bancoTitMat").set("value", "");
                apresentaMensagem('apresentadorMensagemTitulo', null);
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                    "Para títulos com tipo financeiro “cartão” somente Locais de Movimento tipo “cartão de débito/crédito poderão ser selecionados, caso contrário estes tipos não poderão.");
                apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
            } else

                if ((hasValue(dijit.byId("tipoDocumentoTit").item) &&
                        (dijit.byId("tipoDocumentoTit").item.id != CARTAO)) &&
                    (hasValue(dijit.byId("bancoTitMat").item) && (dijit.byId("bancoTitMat").item.nm_tipo_local == LOCALCARTAODEBITO || dijit.byId("bancoTitMat").item.nm_tipo_local == LOCALCARTAOCREDITO))) {
                    dijit.byId("bancoTitMat").set("value", "");

                    apresentaMensagem('apresentadorMensagemTitulo', null);
                    var mensagensWeb = new Array();
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
                        "Para títulos com tipo financeiro diferente de “cartão”, os Locais de Movimento do tipo “cartão de débito/crédito não poderão ser selecionados.");
                    apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
                } else {
                    apresentaMensagem('apresentadorMensagemTitulo', null);
                }
            if ((hasValue(dijit.byId("tipoDocumentoTit").item) &&
                (dijit.byId("tipoDocumentoTit").item.id == CARTAO)) &&
                (hasValue(dijit.byId("bancoTitMat").item) && (dijit.byId("bancoTitMat").item.nm_tipo_local == LOCALCARTAODEBITO || dijit.byId("bancoTitMat").item.nm_tipo_local == LOCALCARTAOCREDITO))) {
                aplicarTaxaBancaria(dijit.byId('gridTitulo').itemSelecionado.cd_titulo, e);
            }
        }
        catch (e) {
            postGerarLog(e);
        }
    });

    dijit.byId("tipoDocumentoTit").on("change", function (e) {
        try {
            var cd_tipo_finan = hasValue(dijit.byId("tipoDocumentoTit").item) ? dijit.byId("tipoDocumentoTit").item.id : 0;
            if (hasValue(dijit.byId("tipoDocumentoTit").item) &&
                (dijit.byId("tipoDocumentoTit").item.id == CARTAO )) {
                dojo.byId('tgCartao').style.display = "block";
                cd_tipo_finan = -1 * cd_tipo_finan; //Passando negativo para mostrar apenas contas filhas

            //    dijit.byId("tipoDocumentoTit").set("value", "");

            //    apresentaMensagem('apresentadorMensagemTitulo', null);
            //    var mensagensWeb = new Array();
            //    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO,
            //        "Não é permitido alterar este título para os tipos Cartão ou Cheque");
            //    apresentaMensagem('apresentadorMensagemTitulo', mensagensWeb);
            } else {
                dojo.byId('tgCartao').style.display = "none";
                onChangeActive(false);
                dijit.byId("nm_dias_cartao")._onChangeActive = false;
                dijit.byId("pc_taxa_cartao").set("value", 0);
                dijit.byId("nm_dias_cartao").set("value", 0);
                dijit.byId("nm_dias_cartao")._onChangeActive = true;
                dijit.byId('vl_taxa_cartao').set("value" , 0);
                onChangeActive(true);
            }
            dijit.byId("bancoTitMat").set("value", "");
            apresentaMensagem('apresentadorMensagemTitulo', null);
            getLocalTipoDocumento(cd_tipo_finan);
        }
        catch (e) {
            postGerarLog(e);
        }
    });

    dijit.byId("inputRelacMat").on("blur", function (evt) {
        apresentaMensagem("apresMsgNewRelacMat", null);
        try {
            var natureza = dijit.byId("naturezaPessoaRelacMat").value;
            if (hasValue(natureza)) {
                if (natureza == PAPELCPF && trim(dojo.byId("inputRelacMat").value) != "" && dojo.byId("inputRelacMat").value != "___.___.___-__")
                    if (validarCPF("#inputRelacMat", "apresMsgNewRelacMat"))
                        verificarPessoCPF();

                if (natureza == PAPELCNPJ && trim(dojo.byId("inputRelacMat").value) != "" && dojo.byId("inputRelacMat").value != "__.___.___/____-__")
                    if (validarCnpj("#inputRelacMat", "apresMsgNewRelacMat"))
                        verificarEmpresaByCnpj("#inputRelacMat", "apresMsgNewRelacMat");
            }
        }
        catch (e) {
            postGerarLog(e);
        }
    });
    var buttonFkArray = ['buscaCepRelacMat'];
    diminuirBotoes(buttonFkArray);
    showCarregando();
    dojo.xhr.get({
        url: Endereco() + "/api/pessoa/ComponentesCadastroEnderecoPessoa",
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (comPessoaUI) {
        try {
            comPessoaUI = jQuery.parseJSON(comPessoaUI);
            showCarregando();
            criarOuCarregarCompFiltering("tipoEnderecoMat", comPessoaUI.retorno.tiposEndereco, "", null, dojo.ready, dojo.store.Memory, dijit.form.FilteringSelect, 'cd_tipo_endereco', 'no_tipo_endereco');
            criarOuCarregarCompFiltering("logradouroMat", comPessoaUI.retorno.tiposLogradouro, "", null, dojo.ready, dojo.store.Memory, dijit.form.FilteringSelect, 'cd_tipo_logradouro', 'no_tipo_logradouro');
            criarOuCarregarCompFiltering("estadoMat", comPessoaUI.retorno.estadosUI, "", null, dojo.ready, dojo.store.Memory, dijit.form.FilteringSelect, 'cd_localidade', 'no_localidade');
            criarOuCarregarCompFiltering("grauParentMat", comPessoaUI.retorno.qualifRelacionamentos, "", null, dojo.ready, dojo.store.Memory, dijit.form.FilteringSelect, 'cd_qualif_relacionamento', 'no_qualif_relacionamento');
            //if (hasValue(pFuncaoRetorno, false))
            //    pFuncaoRetorno.call();
        }
        catch (e) {
            showCarregando();
            postGerarLog(e);
        }
    }, function (error) {
        apresentaMensagem("apresMsgNewRelacMat", error);
        showCarregando();
    });
    limparEnderecoCadResponsavel();
}

function abrirPesquisaLogradouroFKMat(data) {
    try {
        limparFiltrosLogradouroFKMatricula();
        dojo.byId('setValuePesquisaLogradouroFK').value = PESCADENDERECORESPONSAVELMATRICULA;
        var compEstado = dijit.byId("estadoMat");
        var compCidade = dijit.byId("cidadeMat");
        var compBairro = dijit.byId("bairroMat");
        var compNumero = dijit.byId("numeroEndRespMat");
        var compEstadoLogFK = dijit.byId("estadFKLogradouro");
        var cd_estado = 0;
        var cd_cidade = 0;
        var cd_bairro = 0;
        var nome_cidade = "";
        if (data != null) {
            cd_estado = data.cd_loc_estado;
            cd_cidade = data.cd_loc_cidade;
            nome_cidade = data.noLocCidade;
            //cd_bairro = data.cd_loc_bairro;
        } else {
            cd_estado = compEstado.value;
            cd_cidade = compCidade.value;
            //cd_bairro = compBairro.value;
            nome_cidade = compCidade.displayedValue;
        }
        if (hasValue(dojo.byId("id_origem_cidade")))
            dojo.byId("id_origem_cidade").value = 1;

        if (cd_estado > 0) {
            compEstadoLogFK._onChangeActive = false;
            compEstadoLogFK.set("value", cd_estado);
            compEstadoLogFK._onChangeActive = true;
        }
        compNumero.reset();
        compBairro.reset();
        if (cd_cidade > 0) {
            dojo.byId("cd_cidade_pesq_logradouroFK").value = cd_cidade;
            dijit.byId("pesNomCidadeLogradouroFK").set("value", nome_cidade);
            dojo.byId("pesNomCidadeLogradouroFK").value = nome_cidade;
            dijit.byId("limparCidadeLogradouroPesFK").set("disabled", false);
            carregarBairroPorCidadeFK(cd_cidade, cd_bairro, function () {
                pesquisarLogradourofk(true);
                dijit.byId("proLogradouroFK").show();
                dijit.byId('gridLogradouroFK').update();
            });
            return false;
        }
        pesquisarLogradourofk(true);
        dijit.byId("proLogradouroFK").show();
        dijit.byId('gridLogradouroFK').update();
    }
    catch (e) {
        postGerarLog(e);
    }
}

function limparFiltrosLogradouroFKMatricula() {
    limpaCidadeLogradouroFK();
    var compEstadoLogFK = dijit.byId("estadFKLogradouro");
    compEstadoLogFK._onChangeActive = false;
    compEstadoLogFK.reset();
    compEstadoLogFK._onChangeActive = true;
    dijit.byId("outrosLogradouros").reset();
    dojo.byId("descricaoLogradouroFK").value = "";
    showP('imgIntDescricaoPesqLogradouro', false);
    //showP('trNumeroEndereco', false);
    var gridLogradouroFK = dijit.byId("gridLogradouroFK");
    if (hasValue(gridLogradouroFK) && hasValue(gridLogradouroFK.itensSelecionados))
        gridLogradouroFK.itensSelecionados = [];
    gridLogradouroFK.setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory(null) }));
    gridLogradouroFK.update();

}

function limparEnderecoCadResponsavel() {
    try {
        dojo.byId("codRuaMat").value = 0;
        dijit.byId("logradouroMat").reset();
        dijit.byId("tipoEnderecoMat").reset();
        dijit.byId("estadoMat").reset();
        dijit.byId("estadoMat").oldValue = 0;
        dijit.byId("cidadeMat").reset();
        dijit.byId("bairroMat").reset();
        dijit.byId("bairroMat").oldValue = 0;
        dijit.byId("ruaMat").reset();
        dojo.byId("numeroEndRespMat").value = "";
        dojo.byId("complementoEndRespMat").value = "";
        dojo.byId("cepMat").value = "";
        dijit.byId("cepMat").reset();
    }
    catch (e) {
        postGerarLog(e);
    }
}

function retornarLogradouroFKMat() {
    try {
        var valido = true;
        var gridLogradouroFK = dijit.byId("gridLogradouroFK");
        if (!hasValue(gridLogradouroFK.itensSelecionados) || gridLogradouroFK.itensSelecionados.length <= 0 || gridLogradouroFK.itensSelecionados.length > 1) {
            if (gridLogradouroFK.itensSelecionados != null && gridLogradouroFK.itensSelecionados.length <= 0)
                caixaDialogo(DIALOGO_AVISO, msgNotSelectReg, null);
            if (gridLogradouroFK.itensSelecionados != null && gridLogradouroFK.itensSelecionados.length > 1)
                caixaDialogo(DIALOGO_AVISO, msgMaisDeUmRegSelect, null);
            valido = false;
        }
        else {
            var itemSelecionado = gridLogradouroFK.itensSelecionados[0];
            if (!hasValue(itemSelecionado.cd_localidade)) {
                var data = {
                    tipoLogradouro: itemSelecionado.no_tipo_logradouro,
                    noLocRua: itemSelecionado.no_localidade,
                    noLocCidade: itemSelecionado.no_localidade_cidade,
                    noLocBairro: itemSelecionado.no_localidade_bairro,
                    noLocEstado: itemSelecionado.no_localidade_estado,
                    num_cep: itemSelecionado.dc_num_cep
                };
                pesquisarEnderecoOrCadastrar(data, ENDERECOPRINCIPALRESPONSAVELMATRICULA, 'apresMsgNewRelacMat', false);
            }
            else {
                if (itemSelecionado.cd_localidade == 0 && itemSelecionado.nm_cep == "")
                    throw new Exception("Registro inconsistente. Endereço : " + JSON.stringify(itemSelecionado));
                carregarEndereoByLogradouroOrCepMat(itemSelecionado.cd_localidade, "");
                dojo.byId("codRuaMat").value = itemSelecionado.cd_localidade;
                dijit.byId("ruaMat").set("value", itemSelecionado.no_localidade);
            }
        }
        if (!valido)
            return false;
        dijit.byId("proLogradouroFK").hide();
    }
    catch (e) {
        postGerarLog(e);
    }
}

function carregarEndereoByLogradouroOrCepMat(cd_logradouro, nm_cep) {
    try {
        dojo.xhr.get({
            preventCache: true,
            url: Endereco() + "/api/localidade/getEnderecoByCdLogradouro?cd_logradouro=" + cd_logradouro + "&nm_cep=" + nm_cep,
            handleAs: "json",
            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
        }).then(function (data) {
            try {
                data = jQuery.parseJSON(data).retorno;
                configurarLayoutEndereco(LAYOUTPESQUISALOGRADOURO, "estadoMat", "cidadeMat", "bairroMat", "ruaMat", "cepMat", null, null, null);
                setValuesEndereco(data, "estadoMat", "cidadeMat", "bairroMat", "ruaMat", "codRuaMat", "cepMat", "logradouroMat");
            }
            catch (e) {
                postGerarLog(e);
            }
        },
        function (error) {
            apresentaMensagem("apresMsgNewRelacMat", error);
        });
    }
    catch (e) {
        postGerarLog(e);
    }
}

function setarRetornoEnderecoPrincipalMat(data, pesquisarWebServiceCep, nm_cep, idMsg) {
    try {
        var compCep = dijit.byId("cepMat");
        if (data != null) {
            configurarLayoutEndereco(LAYOUTPESQUISACEP, "estadoMat", "cidadeMat", "bairroMat", "ruaMat", "cepMat", null, null, null);
            setValuesEndereco(data, "estadoMat", "cidadeMat", "bairroMat", "ruaMat", "codRuaMat", "cepMat", "logradouroMat");
        } else {
            caixaDialogo(DIALOGO_AVISO, msgInfoCEPNaoEncontrado);
            configurarLayoutEndereco(LAYOUTPADRAO, "estadoMat", "cidadeMat", "bairroMat", "ruaMat", "cepMat", null, null, null);
        }
        compCep._onChangeActive = false;
        compCep.set("value", compCep.value);
        compCep._onChangeActive = true;
    }
    catch (e) {
        postGerarLog(e);
    }
}

function verificarPessoCPF() {
    if ($("#inputRelacMat").val()) {
        dojo.xhr.get({
            url: Endereco() + "/api/pessoa/getExistPessoaFisicaByCpf?cpf=" + $("#inputRelacMat").val(),
            preventCache: true,
            handleAs: "json",
            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
        }).then(function (data) {
            try {
                data = jQuery.parseJSON(data);
                //(dojo.byId("descApresMsg").value, data);
                if (data.retorno != null && data.retorno.cd_pessoa > 0) {
                    dijit.byId("inputRelacMat").reset();
                    mensagensWeb = [];
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, data.MensagensWeb[0].mensagem);
                    apresentaMensagem("apresMsgNewRelacMat", mensagensWeb);
                }
            }
            catch (e) {
                postGerarLog(e);
            }
        },
        function (error) {
            apresentaMensagem("apresMsgNewRelacMat", error);
        });
    }
}

function verificarEmpresaByCnpj() {
    var mensagensWeb = new Array();
    if ($("#inputRelacMat").val()) {
        dojo.xhr.get({
            url: Endereco() + "/api/pessoa/getExistEmpresaByCnpj?cnpj=" + $("#inputRelacMat").val(),
            preventCache: true,
            handleAs: "json",
            headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
        }).then(function (data) {
            try {
                data = jQuery.parseJSON(data);
                //(dojo.byId("descApresMsg").value, data);
                if (data.retorno != null && data.retorno.cd_pessoa > 0) {
                    dijit.byId("inputRelacMat").reset();
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, data.MensagensWeb[0].mensagem);
                    apresentaMensagem("apresMsgNewRelacMat", mensagensWeb);
                }
            }
            catch (e) {
                postGerarLog(e);
            }
        },
        function (error) {
            apresentaMensagem("apresMsgNewRelacMat", error);
        });
    }
}

function montarDataPessoaFisicaRelac() {
    try {
        var retorno = null;
        var retorno = {
            no_Pessoa: dojo.byId("noPessoaRelacMat").value,
            nm_sexo: hasValue(dijit.byId("sexoRelacMat").get("value")) ? dijit.byId("sexoRelacMat").get("value") : 0,
            nm_cpf: hasValue(dojo.byId("inputRelacMat").value) ? dojo.byId("inputRelacMat").value : "",
            Telefone: { dc_fone_mail: dojo.byId("telefonePessoaRelacmat").value },
            EnderecoPrincipal: {
                cd_loc_cidade: hasValue(dijit.byId("cidadeMat").get("value")) ? dijit.byId("cidadeMat").get("value") : 0,
                cd_loc_estado: hasValue(dijit.byId("estadoMat").get("value")) ? dijit.byId("estadoMat").get("value") : 0,
                cd_loc_pais: 1,
                cd_tipo_endereco: hasValue(dijit.byId("tipoEnderecoMat").get("value")) ? dijit.byId("tipoEnderecoMat").get("value") : 0,
                cd_tipo_logradouro: hasValue(dijit.byId("logradouroMat").get("value")) ? dijit.byId("logradouroMat").get('value') : null,
                cd_loc_bairro: hasValue(dijit.byId('bairroMat').get("value")) ? dijit.byId('bairroMat').get("value") : null,
                cd_loc_logradouro: hasValue(dojo.byId('codRuaMat').value) ? dojo.byId('codRuaMat').value : null,
                dc_compl_endereco: hasValue(dijit.byId("complementoEndRespMat").get("value")) ? dijit.byId("complementoEndRespMat").get("value") : '',
                num_cep: hasValue(dojo.byId("cepMat").value) ? dojo.byId("cepMat").value : '',
                dc_num_endereco: hasValue(dojo.byId("numeroEndRespMat").value) ? dojo.byId("numeroEndRespMat").value : ''
            },
            PessoaPaiRelacionamento: [{
                cd_qualif_relacionamento: hasValue(dijit.byId("grauParentMat").value) ? dijit.byId("grauParentMat").value : null
            }]
        }
        return retorno;
    }
    catch (e) {
        postGerarLog(e);
    }
}

function montarObjPessoaJuridica() {
    try {
        var retorno = null;
        var retorno = {
            no_Pessoa: dojo.byId("noPessoaRelacMat").value,
            nm_sexo: hasValue(dijit.byId("sexoRelacMat").get("value")) ? dijit.byId("sexoRelacMat").get("value") : 0,
            dc_num_cgc: hasValue(dojo.byId("inputRelacMat").value) ? dojo.byId("inputRelacMat").value : "",
            Telefone: { dc_fone_mail: dojo.byId("telefonePessoaRelacmat").value },
            EnderecoPrincipal: {
                cd_loc_cidade: hasValue(dijit.byId("cidadeMat").get("value")) ? dijit.byId("cidadeMat").get("value") : 0,
                cd_loc_estado: hasValue(dijit.byId("estadoMat").get("value")) ? dijit.byId("estadoMat").get("value") : 0,
                cd_loc_pais: 1,
                cd_tipo_endereco: hasValue(dijit.byId("tipoEnderecoMat").get("value")) ? dijit.byId("tipoEnderecoMat").get("value") : 0,
                cd_tipo_logradouro: hasValue(dijit.byId("logradouroMat").get("value")) ? dijit.byId("logradouroMat").get('value') : null,
                cd_loc_bairro: hasValue(dijit.byId('bairroMat').get("value")) ? dijit.byId('bairroMat').get("value") : null,
                cd_loc_logradouro: hasValue(dojo.byId('codRuaMat').value) ? dojo.byId('codRuaMat').value : null,
                dc_compl_endereco: hasValue(dijit.byId("complementoEndRespMat").get("value")) ? dijit.byId("complementoEndRespMat").get("value") : '',
                num_cep: hasValue(dojo.byId("cepMat").value) ? dojo.byId("cepMat").value : '',
                dc_num_endereco: hasValue(dojo.byId("numeroEndRespMat").value) ? dojo.byId("numeroEndRespMat").value : ''
            },
            relacionamentosUI: [{
                cd_qualif_relacionamento: hasValue(dijit.byId("grauParentMat").value) ? dijit.byId("grauParentMat").value : null
            }],
            cd_tipo_sociedade: 1
        }
        return retorno;
    }
    catch (e) {
        postGerarLog(e);
    }
}

function validateFormEnderecoResponsavel(windowUtils) {
    try {
        var retorno = true;
        if (!dijit.byId("tipoEnderecoMat").validate()) {
            mostrarMensagemCampoValidado(windowUtils, dijit.byId("tipoEnderecoMat"));
            dijit.byId("panelEnderecoRelacMat").set("open", true);
            retorno = false;
        }
        if (!dijit.byId("ruaMat").validate()) {
            mostrarMensagemCampoValidado(windowUtils, dijit.byId("ruaMat"));
            dijit.byId("panelEnderecoRelacMat").set("open", true);
            retorno = false;
        }
        if (!dijit.byId("logradouroMat").validate()) {
            mostrarMensagemCampoValidado(windowUtils, dijit.byId("logradouroMat"));
            dijit.byId("panelEnderecoRelacMat").set("open", true);
            retorno = false;
        }
        if (!dijit.byId("bairroMat").validate()) {
            mostrarMensagemCampoValidado(windowUtils, dijit.byId("bairroMat"));
            dijit.byId("panelEnderecoRelacMat").set("open", true);
            retorno = false;
        }
        if (!dijit.byId("estadoMat").validate()) {
            mostrarMensagemCampoValidado(windowUtils, dijit.byId("estadoMat"));
            dijit.byId("panelEnderecoRelacMat").set("open", true);
            retorno = false;
        }
        if (!dijit.byId("cidadeMat").validate()) {
            mostrarMensagemCampoValidado(windowUtils, dijit.byId("cidadeMat"));
            dijit.byId("panelEnderecoRelacMat").set("open", true);
            retorno = false;
        }
        return retorno;
    }
    catch (e) {
        postGerarLog(e);
    }
}

function pesquisarEnderecoAluno() {
    var cd_pessoa = dojo.byId("cd_pessoa_aluno_mat").value;
    dojo.xhr.get({
        url: Endereco() + "/api/localidade/getEnderecoResponsavelCPF?cd_pessoa=" + cd_pessoa,
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            apresentaMensagem("apresentadorMensagemMat", data);
            if (hasValue(data.retorno)) {
                setEnderecoPrincipal(data.retorno);
            }
            else {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, msgInfoNaoExisteEndRespo);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            }
        }
        catch (e) {
            postGerarLog(e);
        }
    }, function (error) {
        apresentaMensagem(dojo.byId("descApresMsg").value, error);
    });
}

function setEnderecoPrincipal(data) {
    try {
        var compEstado = dijit.byId("estadoMat");
        var compCidade = dijit.byId("cidadeMat");
        var compBairro = dijit.byId("bairroMat");
        var compCep = dijit.byId("cepMat");
        var compnEnd = dijit.byId("numeroEndRespMat");
        var compTipEnd = dijit.byId("tipoEnderecoMat");
        var compTipLog = dijit.byId("logradouroMat");
        dojo.byId("cd_endereco_aluno").value = data.cd_endereco;

        //Estado
        if (hasValue(data.cd_loc_estado)) {
            compEstado._onChangeActive = false;
            compEstado.set("value", data.cd_loc_estado);
            compEstado.oldValue = data.cd_loc_estado;
            compEstado._onChangeActive = true
        }
        //Cidade
        if (hasValue(data.cd_loc_cidade)) {
            compCidade._onChangeActive = false;
            criarOuCarregarCompFiltering("cidadeMat", [{ id: data.cd_loc_cidade, name: data.noLocCidade }], "", data.cd_loc_cidade, dojo.ready, dojo.store.Memory, dijit.form.FilteringSelect, 'id', 'name');
            compCidade._onChangeActive = true;
        }
        //bairro
        if (hasValue(data.cd_loc_bairro)) {
            compBairro._onChangeActive = false;
            if (hasValue(data.bairros)) {
                criarOuCarregarCompFiltering("bairroMat", data.bairros, "", data.cd_loc_bairro, dojo.ready, dojo.store.Memory, dijit.form.FilteringSelect, 'cd_localidade', 'no_localidade');

            } else
                criarOuCarregarCompFiltering("bairroMat", [{ id: data.cd_loc_bairro, name: data.noLocBairro }], "", data.cd_loc_bairro, dojo.ready, dojo.store.Memory, dijit.form.FilteringSelect, 'id', 'name');
            dijit.byId("bairroMat").oldValue = data.cd_loc_bairro;
            compBairro._onChangeActive = true
        }
        //Cep
        if (hasValue(data.num_cep)) {
            compCep._onChangeActive = false;
            compCep.set("value", data.num_cep);
            compCep._onChangeActive = true;
            compEstado.set("readOnly", true);
        }
        if (hasValue(data.cd_loc_logradouro)) {
            dojo.byId("codRuaMat").value = data.cd_loc_logradouro;
            dijit.byId("ruaMat").set("value", data.noLocRua);
        }
        if (hasValue(data.cd_tipo_logradouro))
            dijit.byId("logradouroMat").set("value", data.cd_tipo_logradouro);
        if (hasValue(data.cd_tipo_endereco))
            dijit.byId("tipoEnderecoMat").set("value", data.cd_tipo_endereco);
        data.dc_compl_endereco != null ? dojo.byId("complementoEndRespMat").value = data.dc_compl_endereco : "";
        data.dc_num_endereco != null ? dojo.byId("numeroEndRespMat").value = data.dc_num_endereco : "";
    }
    catch (e) {
        postGerarLog(e);
    }
}

function calcularValorAditivoAdicParcela(nm_titulos, vl_parc_adt, vl_aditivo) {

    var valorAditivo = dijit.byId("valorAditivo");
    var valorParcAdic = dijit.byId("ValorParcAdic");
    var nroTitAdt = dijit.byId("NroTitAdt");
    var saldoMatricula = unmaskFixed(dijit.byId("vl_saldo_matricula").value, 2);
    var valorAdtAnterior = 0;
    var valorAdtNovo = 0;
    var valorAdt = valorParcAdic.value;

    //Limpando o valor da parcela quando não for informado valor no aditivo
    if (!hasValue(valorAditivo.value) && !hasValue(valorParcAdic.value)) {
        valorParcAdic._onChangeActive = false;
        valorParcAdic.reset();
        valorParcAdic._onChangeActive = true;
        if (hasValue(nm_titulos))
            nroTitAdt.oldValue = nm_titulos;
        return false;
    }
    //Limpando o valor do aditivo quando não for informado valor da parcela
    if (!hasValue(valorParcAdic.value) && !hasValue(vl_aditivo) ||
        hasValue(dijit.byId("valorAditivo")._zerar_valor_aditivo) ||
        (hasValue(valorAditivo.calcular_desc_todos_titulos_adt) && !hasValue(vl_aditivo))) {// && !hasValue(nroTitAdt.value)) {
        valorAditivo._onChangeActive = false;
        valorAditivo.reset();
        valorAditivo._onChangeActive = true;
        if (hasValue(nm_titulos))
            nroTitAdt.oldValue = nm_titulos;

        return false;
    }

    if (hasValue(nroTitAdt.oldValue) && hasValue(valorParcAdic.oldValue))
        valorAdtAnterior = nroTitAdt.oldValue * valorParcAdic.oldValue;

    if (!hasValue(vl_aditivo)) {
        var saldoMatriculaAplicar = 0;
        if (!hasValue(valorAditivo.oldValue))
            saldoMatriculaAplicar = saldoMatricula;
        if (hasValue(nroTitAdt.value))
            valorAdtNovo = unmaskFixed((valorAditivo.oldValue + saldoMatriculaAplicar) + (nroTitAdt.value * valorParcAdic.value - valorAdtAnterior), 2);
    } else {
        valorAdtNovo = vl_aditivo;
        if (hasValue(nroTitAdt.oldValue)) {
            vl_parc_adt = unmaskFixed(((vl_aditivo - valorAditivo.oldValue) + valorAdtAnterior) / nroTitAdt.value, 2);
            valorParcAdic._onChangeActive = false;
            valorParcAdic.set("value", vl_parc_adt);
            valorParcAdic._onChangeActive = true;
        }
    }

    if (hasValue(valorAditivo.calcular_desc_todos_titulos_adt) && hasValue(valorAdt)) {
        //valorAdtNovo = dijit.byId("valorAditivo").value;
        vl_parc_adt = valorAdt;
        valorParcAdic._onChangeActive = false;
        valorParcAdic.set("value", vl_parc_adt);
        valorParcAdic._onChangeActive = true;
    } else {
        if (hasValue(vl_aditivo) && hasValue(nroTitAdt.value)) {
            vl_parc_adt = unmaskFixed((vl_aditivo - saldoMatricula) / nroTitAdt.value, 2);
            valorParcAdic._onChangeActive = false;
            valorParcAdic.set("value", vl_parc_adt);
            valorParcAdic._onChangeActive = true;
            calcularESetarValoresDescontoAdt(ADICIONAR, null, null, true, null, true, true);
            valorAdtNovo = dijit.byId("valorAditivo")._valor_aditivo;
        }
    }

    if (hasValue(nm_titulos))
        nroTitAdt.oldValue = nm_titulos;
    valorAditivo._onChangeActive = false;
    valorAditivo.set("value", valorAdtNovo);
    valorAditivo.oldValue = valorAdtNovo;
    valorAditivo._onChangeActive = true;
    if (hasValue(vl_parc_adt))
        valorParcAdic.oldValue = vl_parc_adt;

    valorAditivo.calcular_desc_todos_titulos_adt = false;
}

function setarTagTitulo(value) {
    require([
    "dojo/ready"
    ], function (ready) {
        ready(function () {
            try {
                if (value == true) {
                    dojo.byId('paBaixa').style.height = '200px';
                    dojo.byId("gridTitulo").style.height = '250px';
                    dijit.byId("gridTitulo").set("height", '250px');
                    dijit.byId("gridTitulo").attr("height", '250px');
                    dijit.byId("gridTitulo").currentPageSize(7);
                    dijit.byId('gridTitulo').resize(true);
                }
                else {
                    dojo.byId('paBaixa').style.height = '27px';
                    dojo.byId("gridTitulo").style.height = '310px';
                    dijit.byId("gridTitulo").set("height", '310px');
                    dijit.byId("gridTitulo").attr("height", '310px');
                    dijit.byId("gridTitulo").currentPageSize(11);
                    dijit.byId('gridTitulo').resize(true);
                }
            }
            catch (e) {
                postGerarLog(e);
            }
        });
    });
}

//Calculos descontos capa mattrícula
function calcularDescontosContratoPorParcela(itensDesc) {
    var parcelasGeradas = new Array();
    var valorCurso = dijit.byId("valorCurso").get('value');
    valorCurso = unmaskFixed(valorCurso, 2);

    var valorDesconto = dijit.byId("valorDesconto").get('value');
    valorDesconto = unmaskFixed(valorDesconto, 2);

    var nroParcelas = getNroParcelas("parcelas");
    //var valorParcela = contrato.vl_parcela_contrato;
    var valorParcela = valorCurso / nroParcelas;
    var valorParcelaComDesconto = calcularRetornarValorParcela(valorCurso, nroParcelas, valorDesconto);

    for (var i = 0; i < itensDesc; i++) {
        parcelasGeradas.push({
            nm_parcela_titulo: i + 1,
            vl_parcela: valorParcelaComDesconto,
            vl_parcela_desconto: valorParcelaComDesconto,
            vl_total_desconto_aplicado: 0,
            pc_total_desconto_aplicado: 0,
        });
    }
    for (var i = 0; i < itensDesc; i++) {
        var lista = new Array();
        if (itensDesc[i].nm_parcela_ini > 0 && itensDesc[i].nm_parcela_ini > 0) {
            lista = jQuery.grep(parcelasGeradas, function (value) {
                return value.nm_parcela_titulo >= itensDesc[i].nm_parcela_ini && value.nm_parcela_titulo <= itensDesc[i].nm_parcela_fim;
            });
        }
        if (itensDesc[i].nm_parcela_ini > 0 && itensDesc[i].nm_parcela_ini <= 0) {
            lista = jQuery.grep(parcelasGeradas, function (value) {
                return value.nm_parcela_titulo >= itensDesc[i].nm_parcela_ini;
            });
        }
        $.each(lista, function (index, value) {
            if (parseFloat(itensDesc[i].pc_desconto) > 0) {
                var pc_desc = (itensDesc[i].pc_desconto).toString().replace(',', '.');
                pc_desc = parseFloat(pc_desc).toFixed(2);
                if (somar_desconto)
                    pc_total_desconto_aplicado = parseFloat(pc_total_desconto_aplicado) + parseFloat(pc_desc);
                else {
                    if (pc_total_desconto_aplicado > 0)
                        pc_total_desconto_aplicado = 100 - ((1 - parseFloat(pc_total_desconto_aplicado) / 100) * (1 - parseFloat(pc_desc) / 100)) * 100;
                    else
                        pc_total_desconto_aplicado = 100 - (1 - parseFloat(pc_desc) / 100) * 100;
                }
            }

            if (parseFloat(itensDesc[i].vl_desconto_contrato) > 0) {
                var vl_desconto = removedecimal(itensDesc[i].vl_desconto_contrato.toString());
                vl_desconto = parseFloat(vl_desconto).toFixed(2);
                vl_total_desconto_aplicado = parseFloat(vl_total_desconto_aplicado) + parseFloat(vl_desconto);
            }
        });
    }
    $.each(parcelasGeradas, function (index, value) {
        value.vl_parcela_desconto = value.vl_parcela_desconto * (value.pc_total_desconto_aplicado / 100) + value.vl_total_desconto_aplicado;
    });
}

function calcularValoresMatricula(valorCurso, nroParcelas, pcDesconto, vlDesconto, vlParcela, vlLiquido, vlDivida) {
    var altCurso = false, altParcelas = false, altPcDesc, altVlDesc = false, altVlParcela = false, altVlLiquido = false, altVlDivida = false;
    var totalDescontosValor = parseFloat(dojo.byId('totalValorDesconto').value);
    if (!hasValue(valorCurso, true))
        valorCurso = dijit.byId('valorCurso').value;
    else
        altCurso = true;
    if (!hasValue(nroParcelas, true))
        nroParcelas = unmaskFixed(dijit.byId('parcelas').get('value'), 0);
    else
        altParcelas = true;
    if (!hasValue(pcDesconto, true))
        pcDesconto = dijit.byId('desconto').value;
    else
        altPcDesc = true;
    if (!hasValue(vlDesconto, true))
        vlDesconto = dijit.byId('valorDesconto').value;
    else
        altVlDesc = true;
    if (!hasValue(vlParcela, true))
        vlParcela = dijit.byId('valorParcela').value;
    else
        altVlParcela = true;
    if (!hasValue(vlLiquido, true))
        vlLiquido = dijit.byId('valorFaturar').value;
    else
        altVlLiquido = true;
    if (!hasValue(vlDivida, true))
        vlDivida = dijit.byId('divida').value;
    else
        altVlDivida = true;
    //Alterou o valor do curso

    if (altCurso) {
        var valorDesconto = calculaValorDescontoPorPercentual(pcDesconto, parseFloat(valorCurso));
        var valorParcela = calcularRetornarValorParcela(valorCurso, nroParcelas, valorDesconto);
        getValoresParaDesconto(valorCurso, nroParcelas, valorDesconto, false);
        //Verifica a consistência do desconto máximo e desconto na primeira parcela.
        if (consistirDescontoMaximo(valorDesconto, valorCurso)) {
            //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
            //Calcula valor de desconto da primeira parcela:
            var valorDescontoParcela = calcularDescontoPrimeiraParcela(valorCurso);
            if (consistirDescontosParcela(valorParcela, valorDescontoParcela)) {
                gerar_titulo = true;
                //Calcula e seta o valor liquido:
                var valorLiquido = calcularERetornarValorFaturar(valorCurso, nroParcelas, valorDesconto);
                //Atribui os valores calculados:
                dijit.byId('valorDesconto')._onChangeActive = false;
                dijit.byId('valorDesconto').set('value', unmaskFixed(valorDesconto, 2));
                dijit.byId('valorDesconto')._onChangeActive = true;

                dijit.byId('valorParcela')._onChangeActive = false;
                dijit.byId('valorParcela').set('value', unmaskFixed(valorParcela, 2));
                dijit.byId('valorParcela').value = valorParcela;
                dijit.byId('valorParcela').old_value = valorParcela;
                dijit.byId('valorParcela')._onChangeActive = true;

                dijit.byId('edValParcela')._onChangeActive = false;
                dijit.byId('edValParcela').set('value', unmaskFixed(valorParcela, 2));
                dijit.byId('edValParcela').value = valorParcela;
                dijit.byId('edValParcela').old_value = valorParcela;
                dijit.byId('edValParcela')._onChangeActive = true;

                dijit.byId('valorFaturar')._onChangeActive = false;
                dijit.byId('valorFaturar').set('value', unmaskFixed(valorLiquido, 2));
                dijit.byId('valorFaturar').old_value = valorLiquido;
                dijit.byId('valorFaturar')._onChangeActive = true;
                dijit.byId('descontoPrimeiraParcela').set('value', unmaskFixed(valorDescontoParcela, 2));

                var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorLiquido, nroParcelas);
                dijit.byId('valorLiquidoGrid')._onChangeActive = false;
                dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
                dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
                dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
                dijit.byId('valorLiquidoGrid')._onChangeActive = true;


                var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(calcularValorLiquidoCursoGrid(), nroParcelas);
                dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
                dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
                dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
                dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
                dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;

                dijit.byId('edParcelaLiquida')._onChangeActive = false;
                dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
                dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
                dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
                dijit.byId('edParcelaLiquida')._onChangeActive = true;
            }
        }
    }
    //Alterou o número de parcelas
    if (altParcelas) {
        getValoresParaDesconto(valorCurso, nroParcelas, null, false);
        gerar_titulo = true;
        if (!calcularValorOrParcelas(valorCurso, vlParcela, nroParcelas))
            return false;
    }
    //Alterou o percentual de desconto
    if (altPcDesc) {
        var valorDescontoReais = 0;
        if (valorCurso > 0) {
            var valorDesconto = 0;
            if (eval(pcDesconto) >= 0)
                valorDesconto = calculaValorDescontoPorPercentual(pcDesconto, valorCurso);
            getValoresParaDesconto(valorCurso, nroParcelas, valorDesconto, false);
            //regra do desconto
            if (!consistirDescontoMaximo(valorDesconto, valorCurso)) {
                dijit.byId("desconto")._onChangeActive = false;
                if (hasValue(dijit.byId('desconto').old_value))
                    dijit.byId('desconto').set('value', dijit.byId('desconto').old_value);
                else
                    dijit.byId('desconto').set('value', 0);
                dijit.byId("desconto")._onChangeActive = true;
                return false;
            }
            else {
                //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
                var nroParcelas = getNroParcelas("parcelas");
                var valorParcela = calcularRetornarValorParcela(valorCurso, nroParcelas, valorDesconto);
                //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
                var valorLiquido = calcularERetornarValorFaturar(valorCurso, nroParcelas, valorDesconto);
                //Calcula valor de desconto da primeira parcela:
                var valorDescontoParcela = calcularDescontoPrimeiraParcela(valorCurso);

                if (!consistirDescontosParcela(parseFloat(valorParcela), valorDescontoParcela)) {
                    dijit.byId("desconto")._onChangeActive = false;
                    if (hasValue(dijit.byId('desconto').old_value))
                        dijit.byId('desconto').set('value', dijit.byId('desconto').old_value);
                    else
                        dijit.byId('desconto').set('value', 0);
                    dijit.byId("desconto")._onChangeActive = true;
                    return false;
                }
                else {
                    aplicarDescontosConcedidosAluno(pcDesconto, valorDescontoReais);
                    dijit.byId('desconto').old_value = pcDesconto;
                    gerar_titulo = true;
                }
            }

        } else {
            dijit.byId("desconto")._onChangeActive = false;
            if (hasValue(dijit.byId('desconto').old_value))
                dijit.byId('desconto').set('value', dijit.byId('desconto').old_value);
            else
                dijit.byId('desconto').set('value', 0);
            dijit.byId("desconto")._onChangeActive = true;

            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroNaoExisteValorCurso);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
            return false;
        }
    }

    //Alterou o valor da parcela
    if (altVlParcela) {
        var valorDesconto = dijit.byId('valorDesconto').get('value');
        //Se o valor do cusro não existe calcula ele, caso contrário, calcula o valor do desconto da aba de mensalidade:
        if (valorCurso <= 0)
            valorCurso = calculaValorCurso(vlParcela, nroParcelas, 0);
        else
            valorDesconto = calculaValorDescontoSemValorCurso(vlParcela, nroParcelas, valorCurso);
        getValoresParaDesconto(valorCurso, nroParcelas, valorDesconto, false);
        //Verificar percentuais desconto:
        var atualizou = true;
        if (!consistirDescontoMaximo(valorDesconto, valorCurso))
            atualizou = false;

        var percentualDesconto = calculaPercentualDesconto(valorDesconto, valorCurso);

        ////Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
        //Calcula valor de desconto da primeira parcela:
        var valorDescontoParcela = calcularDescontoPrimeiraParcela(valorCurso);

        if (!consistirDescontosParcela(vlParcela, valorDescontoParcela))
            atualizou = false;

        if (atualizou) {
            //Calcula e seta o valor liquido:
            var valorLiquido = calcularERetornarValorFaturar(valorCurso, nroParcelas, valorDesconto);

            //Atribui os valores calculados:
            dijit.byId('valorCurso')._onChangeActive = false;
            dijit.byId('valorCurso').set('value', unmaskFixed(valorCurso, 2));
            dijit.byId('valorCurso')._onChangeActive = true;
            dijit.byId('desconto')._onChangeActive = false;
            dijit.byId('desconto').set('value', unmaskFixed(percentualDesconto, 2));
            dijit.byId('desconto')._onChangeActive = true;
            dijit.byId('valorDesconto')._onChangeActive = false;
            dijit.byId('valorDesconto').set('value', unmaskFixed(valorDesconto, 2));
            dijit.byId('valorDesconto')._onChangeActive = true;
            dijit.byId('valorFaturar')._onChangeActive = false;
            dijit.byId('valorFaturar').set('value', unmaskFixed(valorLiquido, 2));
            dijit.byId('valorFaturar').old_value = valorLiquido;
            dijit.byId('valorFaturar')._onChangeActive = true;
            dijit.byId('descontoPrimeiraParcela').set('value', unmaskFixed(valorDescontoParcela, 2));
            dijit.byId('valorParcela').old_value = vlParcela;
            dijit.byId('vl_contrato').set('value', dijit.byId('valorCurso').value);

            var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorLiquido, nroParcelas);
            dijit.byId('edParcelaLiquida')._onChangeActive = false;
            dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
            dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida')._onChangeActive = true;

            gerar_titulo = true;
        }
        else {
            dijit.byId('valorParcela').set('value', unmaskFixed(dijit.byId('valorParcela').old_value, 2));
            dijit.byId('valorParcela').value = dijit.byId('valorParcela').old_value;

            dijit.byId('edValParcela').set('value', unmaskFixed(dijit.byId('valorParcela').old_value, 2));
            dijit.byId('edValParcela').value = dijit.byId('valorParcela').old_value;
        }
    }

    if (altVlDesc) {
        if (valorCurso > 0) {
            getValoresParaDesconto(valorCurso, nroParcelas, vlDesconto, false);
            if (!consistirDescontoMaximo(vlDesconto, valorCurso)) {
                dijit.byId("valorDesconto")._onChangeActive = false;
                if (hasValue(dijit.byId('valorDesconto').old_value))
                    dijit.byId('valorDesconto').set('value', dijit.byId('valorDesconto').old_value);
                else {
                    dijit.byId('valorDesconto').set('value', 0);
                    dijit.byId('valorDesconto').old_value = 0;
                }
                dijit.byId("valorDesconto")._onChangeActive = true;
                return false;
            }
            else {
                //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
                var valorParcela = calcularRetornarValorParcela(valorCurso, nroParcelas, vlDesconto);
                //Calcula valor de desconto da primeira parcela:
                var valorDescontoParcela = calcularDescontoPrimeiraParcela(valorCurso);
                //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
                var valorLiquido = calcularERetornarValorFaturar(valorCurso, nroParcelas, vlDesconto);

                if (!consistirDescontosParcela(parseFloat(valorParcela), valorDescontoParcela)) {
                    dijit.byId("valorDesconto")._onChangeActive = false;
                    if (hasValue(dijit.byId('valorDesconto').old_value))
                        dijit.byId('valorDesconto').set('value', dijit.byId('valorDesconto').old_value);
                    else
                        dijit.byId('valorDesconto').set('value', 0);
                    dijit.byId("valorDesconto")._onChangeActive = true;
                    return false;
                }
                else {
                    aplicarDescontosConcedidosAluno(0, vlDesconto);

                    //dijit.byId('valorFaturar')._onChangeActive = false;
                    //dijit.byId('valorFaturar').set('value', unmaskFixed(valorLiquido, 2));
                    //dijit.byId('valorFaturar').old_value = valorLiquido;
                    //dijit.byId('valorFaturar')._onChangeActive = true;

                    var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorLiquido, nroParcelas);
                    dijit.byId('edParcelaLiquida')._onChangeActive = false;
                    dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
                    dijit.byId('edParcelaLiquida').value = valorParcela;
                    dijit.byId('edParcelaLiquida').old_value = valorParcela;
                    dijit.byId('edParcelaLiquida')._onChangeActive = true;

                    dijit.byId('valorDesconto').old_value = vlDesconto;
                    gerar_titulo = true;
                }
            }
        } else {
            dijit.byId("valorDesconto")._onChangeActive = false;
            if (hasValue(dijit.byId('valorDesconto').old_value))
                dijit.byId('valorDesconto').set('value', dijit.byId('valorDesconto').old_value);
            else
                dijit.byId('valorDesconto').set('value', 0);
            dijit.byId("valorDesconto")._onChangeActive = true;

            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroNaoExisteValorCurso);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
            return false;
        }
    }

    if (altVlLiquido) {
        valorFaturar = unmaskFixed(vlLiquido, 2);
        if (valorFaturar != unmaskFixed(dijit.byId('valorFaturar').old_value, 2)) {
            if (!isNaN(valorFaturar) && valorFaturar != "") {
                valorFaturar = unmaskFixed(valorFaturar, 2);
                gerar_titulo = true;
                valorCurso = valorFaturar + vlDesconto;
                getValoresParaDesconto(valorCurso, nroParcelas, vlDesconto, false);
                if (calcularValorLiquido(valorFaturar, nroParcelas))
                    dijit.byId('valorFaturar').old_value = valorFaturar;
            }
        }
    }

    if (altVlDivida) {
        var valorLiquido = calcularERetornarValorFaturar(valorCurso, nroParcelas, vlDesconto);
        dijit.byId('valorFaturar')._onChangeActive = false;
        dijit.byId('valorFaturar').set('value', unmaskFixed(valorLiquido, 2));
        dijit.byId('valorFaturar').old_value = valorLiquido;
        dijit.byId('valorFaturar')._onChangeActive = true;

        var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorLiquido, nroParcelas);
        dijit.byId('edParcelaLiquida')._onChangeActive = false;
        dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
        dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
        dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
        dijit.byId('edParcelaLiquida')._onChangeActive = true;
        gerar_titulo = true;
    }
}


//Feita pois quando é matricula Profissionalizante e Informatica dever calcular olhando o valor do contrato
function calcularValoresMatriculaProfissionalInformatica(valorContrato, nroParcelas, pcDesconto, vlDesconto, vlParcela, vlLiquido, vlDivida) {
    var altCurso = false, altParcelas = false, altPcDesc, altVlDesc = false, altVlParcela = false, altVlLiquido = false, altVlDivida = false;
    var totalDescontosValor = parseFloat(dojo.byId('totalValorDesconto').value);
    if (!hasValue(valorContrato, true))
        valorContrato = dijit.byId("vl_contrato").get('value');
    else
        altCurso = true;
    if (!hasValue(nroParcelas, true)) {
        if (dijit.byId("ckMultipla").checked === true) {
            nroParcelas = calculaNumeroParcela();
        } else {
            nroParcelas = unmaskFixed(dijit.byId('parcelas').get('value'), 0);
        }
    }
    else
        altParcelas = true;
    if (!hasValue(pcDesconto, true))
        pcDesconto = dijit.byId('desconto').value;
    else
        altPcDesc = true;
    if (!hasValue(vlDesconto, true))
        vlDesconto = dijit.byId('valorDesconto').value;
    else
        altVlDesc = true;
    if (!hasValue(vlParcela, true))
        vlParcela = dijit.byId('valorParcela').value;
    else
        altVlParcela = true;
    if (!hasValue(vlLiquido, true))
        vlLiquido = dijit.byId('valorFaturar').value;
    else
        altVlLiquido = true;
    if (!hasValue(vlDivida, true))
        vlDivida = dijit.byId('divida').value;
    else
        altVlDivida = true;
    //Alterou o valor do curso

    if (altCurso) {
        var valorDesconto = calculaValorDescontoPorPercentual(pcDesconto, parseFloat(valorContrato));
        var valorParcela = calcularRetornarValorParcela(valorContrato, nroParcelas, valorDesconto);
       
        getValoresParaDescontoProfissionalInformatica(valorContrato, nroParcelas, valorDesconto, false);
        //Verifica a consistência do desconto máximo e desconto na primeira parcela.
        if (consistirDescontoMaximo(valorDesconto, valorContrato)) {
            //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
            //Calcula valor de desconto da primeira parcela:
            var valorDescontoParcela = calcularDescontoPrimeiraParcela(valorContrato);
            if (consistirDescontosParcela(valorParcela, valorDescontoParcela)) {
                //gerar_titulo = true;
                //Calcula e seta o valor liquido:
                var valorLiquido = calcularERetornarValorFaturar(valorContrato, nroParcelas, valorDesconto);
                //Calcula valor da parcela liquida 
                var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorLiquido, nroParcelas);
                //Atribui os valores calculados:
                dijit.byId('valorDesconto')._onChangeActive = false;
                dijit.byId('valorDesconto').set('value', unmaskFixed(valorDesconto, 2));
                dijit.byId('valorDesconto')._onChangeActive = true;
                dijit.byId('valorParcela')._onChangeActive = false;
                dijit.byId('valorParcela').set('value', unmaskFixed(valorParcela, 2));
                dijit.byId('valorParcela').value = valorParcela;
                dijit.byId('valorParcela').old_value = valorParcela;
                dijit.byId('valorParcela')._onChangeActive = true;

                dijit.byId('edValParcela')._onChangeActive = false;
                dijit.byId('edValParcela').set('value', unmaskFixed(valorParcela, 2));
                dijit.byId('edValParcela').value = valorParcela;
                dijit.byId('edValParcela').old_value = valorParcela;
                dijit.byId('edValParcela')._onChangeActive = true;

                dijit.byId('edParcelaLiquida')._onChangeActive = false;
                dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
                dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
                dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
                dijit.byId('edParcelaLiquida')._onChangeActive = true;

                dijit.byId('valorFaturar')._onChangeActive = false;
                dijit.byId('valorFaturar').set('value', unmaskFixed(valorLiquido, 2));
                dijit.byId('valorFaturar').old_value = valorLiquido;
                dijit.byId('valorFaturar')._onChangeActive = true;
                dijit.byId('descontoPrimeiraParcela').set('value', unmaskFixed(valorDescontoParcela, 2));
            }
        }
    }
    //Alterou o número de parcelas
    if (altParcelas) {
        getValoresParaDescontoProfissionalInformatica(valorContrato, nroParcelas, null, false);
        gerar_titulo = true;
        if (!calcularValorOrParcelasProfissionalInformatica(valorContrato, vlParcela, nroParcelas))
            return false;
    }
    //Alterou o percentual de desconto
    if (altPcDesc) {
        var valorDescontoReais = 0;
        if (valorContrato > 0) {
            var valorDesconto = 0;
            if (eval(pcDesconto) >= 0)
                valorDesconto = calculaValorDescontoPorPercentual(pcDesconto, valorContrato);
            getValoresParaDescontoProfissionalInformatica(valorContrato, nroParcelas, valorDesconto, false);
            //regra do desconto
            if (!consistirDescontoMaximo(valorDesconto, valorContrato)) {
                dijit.byId("desconto")._onChangeActive = false;
                if (hasValue(dijit.byId('desconto').old_value))
                    dijit.byId('desconto').set('value', dijit.byId('desconto').old_value);
                else
                    dijit.byId('desconto').set('value', 0);
                dijit.byId("desconto")._onChangeActive = true;
                return false;
            }
            else {
                //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
                var nroParcelas = getNroParcelas("parcelas");
                if (dijit.byId("ckMultipla").checked === true) {
                    nroParcelas = calculaNumeroParcela();
                } else {
                    nroParcelas = getNroParcelas("parcelas");
                }
                var valorParcela = calcularRetornarValorParcela(valorContrato, nroParcelas, valorDesconto);
                //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
                var valorLiquido = calcularERetornarValorFaturar(valorContrato, nroParcelas, valorDesconto);
                //Calcula valor de desconto da primeira parcela:
                var valorDescontoParcela = calcularDescontoPrimeiraParcela(valorContrato);

                if (!consistirDescontosParcela(parseFloat(valorParcela), valorDescontoParcela)) {
                    dijit.byId("desconto")._onChangeActive = false;
                    if (hasValue(dijit.byId('desconto').old_value))
                        dijit.byId('desconto').set('value', dijit.byId('desconto').old_value);
                    else
                        dijit.byId('desconto').set('value', 0);
                    dijit.byId("desconto")._onChangeActive = true;
                    return false;
                }
                else {
                    aplicarDescontosConcedidosAlunoProfissionalInformatica(pcDesconto, valorDescontoReais);
                    dijit.byId('desconto').old_value = pcDesconto;
                    if (!LOADCONTRATO) {
                        gerar_titulo = true;
                        if (dijit.byId("gridDataCurso").store.objectStore.data.length > 0)
                            for (var i = 0; i < dijit.byId("gridDataCurso").store.objectStore.data.length; i++) {
                                valorLiquido = dijit.byId("gridDataCurso").store.objectStore.data[i].vl_curso * pcDesconto / 100;
                                dijit.byId("gridDataCurso").store.objectStore.data[i].pc_desconto_contrato = pcDesconto;
                                dijit.byId("gridDataCurso").store.objectStore.data[i].vl_desconto_contrato = unmaskFixed(valorLiquido, 2);
                                dijit.byId("gridDataCurso").store.objectStore.data[i].vl_curso_liquido =
                                    dijit.byId("gridDataCurso").store.objectStore.data[i].vl_curso - unmaskFixed(valorLiquido, 2);
                                dijit.byId("gridDataCurso").store.objectStore.data[i].vl_parcela_liquida =
                                    unmaskFixed((dijit.byId("gridDataCurso").store.objectStore.data[i].vl_curso_liquido) /
                                        dijit.byId("gridDataCurso").store.objectStore.data[i].nm_parcelas, 2);
                                dijit.byId("gridDataCurso").store.objectStore.data[i].valorParcela =
                                    dijit.byId("gridDataCurso").store.objectStore.data[i].vl_parcela_liquida;

                            }
                    }
                }
            }

        } else {
            dijit.byId("desconto")._onChangeActive = false;
            if (hasValue(dijit.byId('desconto').old_value))
                dijit.byId('desconto').set('value', dijit.byId('desconto').old_value);
            else
                dijit.byId('desconto').set('value', 0);
            dijit.byId("desconto")._onChangeActive = true;

            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroNaoExisteValorCurso);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
            return false;
        }
    }

    //Alterou o valor da parcela
    if (altVlParcela) {
        var valorDesconto = dijit.byId('valorDesconto').get('value');
        //Se o valor do cusro não existe calcula ele, caso contrário, calcula o valor do desconto da aba de mensalidade:
        if (valorContrato <= 0)
            valorContrato = calculaValorCurso(vlParcela, nroParcelas, 0);
        else
            valorDesconto = calculaValorDescontoSemValorCurso(vlParcela, nroParcelas, valorContrato);
        getValoresParaDescontoProfissionalInformatica(valorContrato, nroParcelas, valorDesconto, false);
        //Verificar percentuais desconto:
        var atualizou = true;
        if (!consistirDescontoMaximo(valorDesconto, valorContrato))
            atualizou = false;

        var percentualDesconto = calculaPercentualDesconto(valorDesconto, valorContrato);

        ////Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
        //Calcula valor de desconto da primeira parcela:
        var valorDescontoParcela = calcularDescontoPrimeiraParcela(valorContrato);

        if (!consistirDescontosParcela(vlParcela, valorDescontoParcela))
            atualizou = false;

        if (atualizou) {
            //Calcula e seta o valor liquido:
            var valorLiquido = calcularERetornarValorFaturar(valorContrato, nroParcelas, valorDesconto);
            //Calcula o valor da parcela liquida
            var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorLiquido, nroParcelas);
            //Atribui os valores calculados:
            dijit.byId('vl_contrato')._onChangeActive = false;
            dijit.byId('vl_contrato').set('value', unmaskFixed(valorContrato, 2));
            dijit.byId('vl_contrato')._onChangeActive = true;
            dijit.byId('desconto')._onChangeActive = false;
            dijit.byId('desconto').set('value', unmaskFixed(percentualDesconto, 2));
            dijit.byId('desconto')._onChangeActive = true;
            dijit.byId('valorDesconto')._onChangeActive = false;
            dijit.byId('valorDesconto').set('value', unmaskFixed(valorDesconto, 2));
            dijit.byId('valorDesconto')._onChangeActive = true;

            dijit.byId('valorFaturar')._onChangeActive = false;
            dijit.byId('valorFaturar').set('value', unmaskFixed(valorLiquido, 2));
            dijit.byId('valorFaturar').old_value = valorLiquido;
            dijit.byId('valorFaturar')._onChangeActive = true;

            
            dijit.byId('edParcelaLiquida')._onChangeActive = false;
            dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
            dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida')._onChangeActive = true;

            dijit.byId('descontoPrimeiraParcela').set('value', unmaskFixed(valorDescontoParcela, 2));
            dijit.byId('valorParcela').old_value = vlParcela;
            dijit.byId('edValParcela').old_value = vlParcela;
            gerar_titulo = true;
        }
        else {
            dijit.byId('valorParcela').set('value', unmaskFixed(dijit.byId('valorParcela').old_value, 2));
            dijit.byId('valorParcela').value = dijit.byId('valorParcela').old_value;

            dijit.byId('edValParcela').set('value', unmaskFixed(dijit.byId('valorParcela').old_value, 2));
            dijit.byId('edValParcela').value = dijit.byId('valorParcela').old_value;
        }
    }

    if (altVlDesc) {
        if (valorContrato > 0) {
            var ALTEROU_GRADE = vlDesconto < 0;
            if (ALTEROU_GRADE) vlDesconto = -1 * vlDesconto;
            getValoresParaDescontoProfissionalInformatica(valorContrato, nroParcelas, vlDesconto, false);
            if (!consistirDescontoMaximo(vlDesconto, valorContrato)) {
                dijit.byId("valorDesconto")._onChangeActive = false;
                if (hasValue(dijit.byId('valorDesconto').old_value))
                    dijit.byId('valorDesconto').set('value', dijit.byId('valorDesconto').old_value);
                else {
                    dijit.byId('valorDesconto').set('value', 0);
                    dijit.byId('valorDesconto').old_value = 0;
                }
                dijit.byId("valorDesconto")._onChangeActive = true;
                return false;
            }
            else {
                //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
                var valorParcela = calcularRetornarValorParcela(valorContrato, nroParcelas, vlDesconto);
                //Calcula valor de desconto da primeira parcela:
                var valorDescontoParcela = calcularDescontoPrimeiraParcela(valorContrato);
                //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
                var valorLiquido = calcularERetornarValorFaturar(valorContrato, nroParcelas, vlDesconto);

                if (!consistirDescontosParcela(parseFloat(valorParcela), valorDescontoParcela)) {
                    dijit.byId("valorDesconto")._onChangeActive = false;
                    if (hasValue(dijit.byId('valorDesconto').old_value))
                        dijit.byId('valorDesconto').set('value', dijit.byId('valorDesconto').old_value);
                    else
                        dijit.byId('valorDesconto').set('value', 0);
                    dijit.byId("valorDesconto")._onChangeActive = true;
                    return false;
                }
                else {
                    aplicarDescontosConcedidosAlunoProfissionalInformatica(0, vlDesconto);

                    //dijit.byId('valorFaturar')._onChangeActive = false;
                    //dijit.byId('valorFaturar').set('value', unmaskFixed(valorLiquido, 2));
                    //dijit.byId('valorFaturar').old_value = valorLiquido;
                    //dijit.byId('valorFaturar')._onChangeActive = true;

                    dijit.byId('valorDesconto').old_value = vlDesconto;
                    if (!LOADCONTRATO) {
                        gerar_titulo = true;
                        if (!ALTEROU_GRADE && dijit.byId("gridDataCurso").store.objectStore.data.length > 0)
                            for (var i = 0; i < dijit.byId("gridDataCurso").store.objectStore.data.length; i++) {
                                var pcDesconto = unmaskFixed((100 - (valorLiquido / valorContrato * 100)), 4);
                                var valorLiquidoC = dijit.byId("gridDataCurso").store.objectStore.data[i].vl_curso * pcDesconto / 100;
                                dijit.byId("gridDataCurso").store.objectStore.data[i].pc_desconto_contrato = pcDesconto;
                                dijit.byId("gridDataCurso").store.objectStore.data[i].vl_desconto_contrato = unmaskFixed(valorLiquidoC, 2);
                                dijit.byId("gridDataCurso").store.objectStore.data[i].vl_curso_liquido =
                                    dijit.byId("gridDataCurso").store.objectStore.data[i].vl_curso - unmaskFixed(valorLiquidoC, 2);
                                dijit.byId("gridDataCurso").store.objectStore.data[i].vl_parcela_liquida =
                                    unmaskFixed((dijit.byId("gridDataCurso").store.objectStore.data[i].vl_curso_liquido) /
                                        dijit.byId("gridDataCurso").store.objectStore.data[i].nm_parcelas, 2);
                                dijit.byId("gridDataCurso").store.objectStore.data[i].valorParcela =
                                    dijit.byId("gridDataCurso").store.objectStore.data[i].vl_parcela_liquida;

                            }
                    }

                }
            }
        } else {
            dijit.byId("valorDesconto")._onChangeActive = false;
            if (hasValue(dijit.byId('valorDesconto').old_value))
                dijit.byId('valorDesconto').set('value', dijit.byId('valorDesconto').old_value);
            else
                dijit.byId('valorDesconto').set('value', 0);
            dijit.byId("valorDesconto")._onChangeActive = true;

            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroNaoExisteValorCurso);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
            return false;
        }
    }

    if (altVlLiquido) {
        valorFaturar = unmaskFixed(vlLiquido, 2);
        if (valorFaturar != unmaskFixed(dijit.byId('valorFaturar').old_value, 2)) {
            if (!isNaN(valorFaturar) && valorFaturar != "") {
                valorFaturar = unmaskFixed(valorFaturar, 2);
                gerar_titulo = true;
                valorContrato = valorFaturar + vlDesconto;
                getValoresParaDescontoProfissionalInformatica(valorContrato, nroParcelas, vlDesconto, false);
                if (calcularValorLiquidoProfissionalInformatica(valorFaturar, nroParcelas))
                    dijit.byId('valorFaturar').old_value = valorFaturar;
            }
        }
    }

    if (altVlDivida) {
        var valorLiquido = calcularERetornarValorFaturar(valorContrato, nroParcelas, vlDesconto);
        dijit.byId('valorFaturar')._onChangeActive = false;
        dijit.byId('valorFaturar').set('value', unmaskFixed(valorLiquido, 2));
        dijit.byId('valorFaturar').old_value = valorLiquido;
        dijit.byId('valorFaturar')._onChangeActive = true;

        var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorLiquido, nroParcelas);
        dijit.byId('edParcelaLiquida')._onChangeActive = false;
        dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
        dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
        dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
        dijit.byId('edParcelaLiquida')._onChangeActive = true;

        gerar_titulo = true;
    }
}

function calcularValoresMatriculaCurso(valorCurso, nroParcelas, pcDesconto, vlDesconto, vlParcela, vlLiquido, vlDivida) {
    var altCurso = false, altParcelas = false, altPcDesc, altVlDesc = false, altVlParcela = false, altVlLiquido = false, altVlDivida = false;
    var totalDescontosValor = parseFloat(dojo.byId('totalValorDesconto').value);
    if (!hasValue(valorCurso, true))
        valorCurso = dijit.byId('valorCursoGrid').value;
    else
        altCurso = true;
    if (!hasValue(nroParcelas, true))
        nroParcelas = unmaskFixed(dijit.byId('parcelasCurso').get('value'), 0);
    else
        altParcelas = true;
    if (!hasValue(pcDesconto, true))
        pcDesconto = dijit.byId('descontoGrid').value;
    else
        altPcDesc = true;
    if (!hasValue(vlDesconto, true))
        vlDesconto = dijit.byId('valorDescontoGrid').value;
    else
        altVlDesc = true;
    if (!hasValue(vlParcela, true))
        vlParcela = dijit.byId('valorParcelaGrid').value;
    else
        altVlParcela = true;
    if (!hasValue(vlLiquido, true))
        vlLiquido = dijit.byId('valorFaturar').value;
    else
        altVlLiquido = true;
    if (!hasValue(vlDivida, true))
        vlDivida = dijit.byId('divida').value;
    else
        altVlDivida = true;
    //Alterou o valor do curso

    if (altCurso) {
        var valorDesconto = calculaValorDescontoPorPercentual(pcDesconto, parseFloat(valorCurso));
        var valorParcela = calcularRetornarValorParcela(valorCurso, nroParcelas, valorDesconto);
        getValoresParaDescontoCurso(valorCurso, nroParcelas, valorDesconto, false);
        //Verifica a consistência do desconto máximo e desconto na primeira parcela.
        if (consistirDescontoMaximo(valorDesconto, valorCurso)) {
            //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
            //Calcula valor de desconto da primeira parcela:
            var valorDescontoParcela = calcularDescontoPrimeiraParcela(valorCurso);
            if (consistirDescontosParcela(valorParcela, valorDescontoParcela)) {
                gerar_titulo = true;
                //Calcula e seta o valor liquido:
                var valorLiquido = calcularERetornarValorFaturarCurso(valorCurso, nroParcelas, valorDesconto);
                //Atribui os valores calculados:
                dijit.byId('valorDescontoGrid')._onChangeActive = false;
                dijit.byId('valorDescontoGrid').set('value', unmaskFixed(valorDesconto, 2));
                dijit.byId('valorDescontoGrid')._onChangeActive = true;
                dijit.byId('valorParcelaGrid')._onChangeActive = false;
                dijit.byId('valorParcelaGrid').set('value', unmaskFixed(valorParcela, 2));
                dijit.byId('valorParcelaGrid').value = valorParcela;
                dijit.byId('valorParcelaGrid').old_value = valorParcela;
                dijit.byId('valorParcelaGrid')._onChangeActive = true;
                
                


                dijit.byId('descontoPrimeiraParcela').set('value', unmaskFixed(valorDescontoParcela, 2));

               

                dijit.byId('valorLiquidoGrid')._onChangeActive = false;
                dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
                dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
                dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
                dijit.byId('valorLiquidoGrid')._onChangeActive = true;


                var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(calcularValorLiquidoCursoGrid(), nroParcelas);
                dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
                dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
                dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
                dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
                dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;
            }
        }
    }
    //Alterou o número de parcelas
    if (altParcelas) {
        getValoresParaDescontoCurso(valorCurso, nroParcelas, null, false);
        gerar_titulo = true;
        if (!calcularValorOrParcelasCurso(valorCurso, vlParcela, nroParcelas))
            return false;
    }
    //Alterou o percentual de desconto
    if (altPcDesc) {
        var valorDescontoReais = 0;
        if (valorCurso > 0) {
            var valorDesconto = 0;
            if (eval(pcDesconto) >= 0)
                valorDesconto = calculaValorDescontoPorPercentual(pcDesconto, valorCurso);
            getValoresParaDescontoCurso(valorCurso, nroParcelas, valorDesconto, false);
            //regra do desconto
            if (!consistirDescontoMaximo(valorDesconto, valorCurso)) {
                dijit.byId("descontoGrid")._onChangeActive = false;
                if (hasValue(dijit.byId('descontoGrid').old_value))
                    dijit.byId('descontoGrid').set('value', dijit.byId('descontoGrid').old_value);
                else
                    dijit.byId('descontoGrid').set('value', 0);
                dijit.byId("descontoGrid")._onChangeActive = true;
                return false;
            }
            else {
                //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
                var nroParcelas = getNroParcelas("parcelasCurso");
                var valorParcela = calcularRetornarValorParcela(valorCurso, nroParcelas, valorDesconto);
                //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
                var valorLiquido = calcularERetornarValorFaturarCurso(valorCurso, nroParcelas, valorDesconto);
                //Calcula valor de desconto da primeira parcela:
                var valorDescontoParcela = calcularDescontoPrimeiraParcela(valorCurso);

                if (!consistirDescontosParcela(parseFloat(valorParcela), valorDescontoParcela)) {
                    dijit.byId("descontoGrid")._onChangeActive = false;
                    if (hasValue(dijit.byId('descontoGrid').old_value))
                        dijit.byId('descontoGrid').set('value', dijit.byId('descontoGrid').old_value);
                    else
                        dijit.byId('descontoGrid').set('value', 0);
                    dijit.byId("descontoGrid")._onChangeActive = true;
                    return false;
                }
                else {
                    aplicarDescontosConcedidosAlunoCurso(pcDesconto, valorDescontoReais);
                    dijit.byId('descontoGrid').old_value = pcDesconto;
                    gerar_titulo = true;
                }
            }

        } else {
            dijit.byId("descontoGrid")._onChangeActive = false;
            if (hasValue(dijit.byId('descontoGrid').old_value))
                dijit.byId('descontoGrid').set('value', dijit.byId('descontoGrid').old_value);
            else
                dijit.byId('descontoGrid').set('value', 0);
            dijit.byId("descontoGrid")._onChangeActive = true;

            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroNaoExisteValorCurso);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
            return false;
        }
    }

    //Alterou o valor da parcela
    if (altVlParcela) {
        var valorDesconto = dijit.byId('valorDescontoGrid').get('value');
        //Se o valor do cusro não existe calcula ele, caso contrário, calcula o valor do desconto da aba de mensalidade:
        if (valorCurso <= 0)
            valorCurso = calculaValorCurso(vlParcela, nroParcelas, 0);
        else
            valorDesconto = calculaValorDescontoSemValorCurso(vlParcela, nroParcelas, valorCurso);
        getValoresParaDescontoCurso(valorCurso, nroParcelas, valorDesconto, false);
        //Verificar percentuais desconto:
        var atualizou = true;
        if (!consistirDescontoMaximo(valorDesconto, valorCurso))
            atualizou = false;

        var percentualDesconto = calculaPercentualDesconto(valorDesconto, valorCurso);

        ////Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
        //Calcula valor de desconto da primeira parcela:
        var valorDescontoParcela = calcularDescontoPrimeiraParcela(valorCurso);

        if (!consistirDescontosParcela(vlParcela, valorDescontoParcela))
            atualizou = false;

        if (atualizou) {
            //Calcula e seta o valor liquido:
            var valorLiquido = calcularERetornarValorFaturarCurso(valorCurso, nroParcelas, valorDesconto);

            //Atribui os valores calculados:
            dijit.byId('valorCursoGrid')._onChangeActive = false;
            dijit.byId('valorCursoGrid').set('value', unmaskFixed(valorCurso, 2));
            dijit.byId('valorCursoGrid')._onChangeActive = true;
            //Atribui os valores calculados:
            dijit.byId('descontoGrid')._onChangeActive = false;
            dijit.byId('descontoGrid').set('value', unmaskFixed(percentualDesconto, 2));
            dijit.byId('descontoGrid')._onChangeActive = true;
            dijit.byId('valorDescontoGrid')._onChangeActive = false;
            dijit.byId('valorDescontoGrid').set('value', unmaskFixed(valorDesconto, 2));
            dijit.byId('valorDescontoGrid')._onChangeActive = true;
            

            

            dijit.byId('descontoPrimeiraParcela')._onChangeActive = false;
            dijit.byId('descontoPrimeiraParcela').set('value', unmaskFixed(valorDescontoParcela, 2));
            dijit.byId('descontoPrimeiraParcela')._onChangeActive = true;
            dijit.byId('valorParcelaGrid')._onChangeActive = false;
            dijit.byId('valorParcelaGrid').old_value = vlParcela;
            dijit.byId('valorParcelaGrid')._onChangeActive = true;

            var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorLiquido, nroParcelas);


            dijit.byId('valorLiquidoGrid')._onChangeActive = false;
            dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
            dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
            dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
            dijit.byId('valorLiquidoGrid')._onChangeActive = true;


            var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(calcularValorLiquidoCursoGrid(), nroParcelas);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
            dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
            dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
            dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;

            
            gerar_titulo = true;
        }
        else {
            dijit.byId('valorParcelaGrid')._onChangeActive = false;
            dijit.byId('valorParcelaGrid').set('value', unmaskFixed(dijit.byId('valorParcela').old_value, 2));
            dijit.byId('valorParcelaGrid').value = dijit.byId('valorParcela').old_value;
            dijit.byId('valorParcelaGrid')._onChangeActive = true;
        }
    }

    if (altVlDesc) {
        if (valorCurso > 0) {
            getValoresParaDescontoCurso(valorCurso, nroParcelas, vlDesconto, false);
            if (!consistirDescontoMaximo(vlDesconto, valorCurso)) {
                dijit.byId("valorDescontoGrid")._onChangeActive = false;
                if (hasValue(dijit.byId('valorDescontoGrid').old_value))
                    dijit.byId('valorDescontoGrid').set('value', dijit.byId('valorDescontoGrid').old_value);
                else {
                    dijit.byId('valorDescontoGrid').set('value', 0);
                    dijit.byId('valorDescontoGrid').old_value = 0;
                }
                dijit.byId("valorDescontoGrid")._onChangeActive = true;
                return false;
            }
            else {
                //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
                var valorParcela = calcularRetornarValorParcela(valorCurso, nroParcelas, vlDesconto);
                //Calcula valor de desconto da primeira parcela:
                var valorDescontoParcela = calcularDescontoPrimeiraParcela(valorCurso);
                //Calcula o valor da parcela líquida para fazer a verificação do desconto da primeira parcela:
                var valorLiquido = calcularERetornarValorFaturarCurso(valorCurso, nroParcelas, vlDesconto);

                if (!consistirDescontosParcela(parseFloat(valorParcela), valorDescontoParcela)) {
                    dijit.byId("valorDescontoGrid")._onChangeActive = false;
                    if (hasValue(dijit.byId('valorDescontoGrid').old_value))
                        dijit.byId('valorDescontoGrid').set('value', dijit.byId('valorDescontoGrid').old_value);
                    else
                        dijit.byId('valorDescontoGrid').set('value', 0);
                    dijit.byId("valorDescontoGrid")._onChangeActive = true;
                    return false;
                }
                else {
                    aplicarDescontosConcedidosAlunoCurso(0, vlDesconto);

                    //dijit.byId('valorFaturar')._onChangeActive = false;
                    //dijit.byId('valorFaturar').set('value', unmaskFixed(valorLiquido, 2));
                    //dijit.byId('valorFaturar').old_value = valorLiquido;
                    //dijit.byId('valorFaturar')._onChangeActive = true;

                    dijit.byId('valorDescontoGrid').old_value = vlDesconto;
                    gerar_titulo = true;
                }
            }
        } else {
            dijit.byId("valorDescontoGrid")._onChangeActive = false;
            if (hasValue(dijit.byId('valorDescontoGrid').old_value))
                dijit.byId('valorDescontoGrid').set('value', dijit.byId('valorDescontoGrid').old_value);
            else
                dijit.byId('valorDescontoGrid').set('value', 0);
            dijit.byId("valorDescontoGrid")._onChangeActive = true;

            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroNaoExisteValorCurso);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
            return false;
        }
    }

    if (altVlLiquido) {
        valorFaturar = unmaskFixed(vlLiquido, 2);
        if (valorFaturar != unmaskFixed(dijit.byId('valorFaturar').old_value, 2)) {
            if (!isNaN(valorFaturar) && valorFaturar != "") {
                valorFaturar = unmaskFixed(valorFaturar, 2);
                gerar_titulo = true;
                valorCurso = valorFaturar + vlDesconto;
                getValoresParaDescontoCurso(valorCurso, nroParcelas, vlDesconto, false);
                if (calcularValorLiquidoCurso(valorFaturar, nroParcelas))
                    dijit.byId('valorFaturar').old_value = valorFaturar;
            }
        }
    }

    if (altVlDivida) {
        
        var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorLiquido, nroParcelas);
        dijit.byId('valorLiquidoGrid')._onChangeActive = false;
        dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
        dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
        dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
        dijit.byId('valorLiquidoGrid')._onChangeActive = true;


        var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(calcularValorLiquidoCursoGrid(), nroParcelas);
        dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
        dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
        dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
        dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
        dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;

        gerar_titulo = true;
    }
}

function verificarSetarPcDescontoBolsaAditivo(listaHistoricoAdt) {
    var pc_bolsa_adt = 0;
    if (hasValue(listaHistoricoAdt) && listaHistoricoAdt.length > 0) {
        var listaAdtsBolsa = jQuery.grep(listaHistoricoAdt, function (value) {
            return hasValue(value.id_tipo_aditamento) && value.id_tipo_aditamento == ADITIVO_BOLSA
        });
        if (hasValue(listaAdtsBolsa) && listaAdtsBolsa.length > 0)
            pc_bolsa_adt = hasValue(listaAdtsBolsa[0].AditamentoBolsa) && listaAdtsBolsa[0].AditamentoBolsa.length > 0 ? listaAdtsBolsa[0].AditamentoBolsa[0].pc_bolsa : 0;
    }
    if (hasValue(pc_bolsa_adt, true))
        dojo.byId("pc_desconto_anterior").value = pc_bolsa_adt;
}

//#region calculo de valores

//Regra para valores
/*
valor da parcela = (valor curso - desconto) / número de parcelas;
parcela líquida = [(Nº Parcelas x Valor da Parcela) + Valor da dívida (se não estiver marcada a opção de 1ª parcela) - Valor dos descontos, da aba descontos, que não incidam na baixa e nem na 1ª parcela]/Nº Parcelas.
*/

function calculaRetornaValorLiquidoSemAbaDescontos(ValorParcela, nroParcela, valorDesconto) {
    try {
        var valorDivida = dijit.byId('divida').get('value');
        if (!hasValue(ValorParcela, true))
            ValorParcela = dijit.byId('valorParcela').value;

        if (!hasValue(nroParcela, true))
            nroParcela = unmaskFixed(dijit.byId('parcelas').get('value'), 0);

        if (!hasValue(valorDesconto, true))
            valorDesconto = dijit.byId('valorDesconto').value;

        var valorFaturar = unmaskFixed(ValorParcela * nroParcela, 2);
        if (dijit.byId('ckPrimeiraParcela').checked)
            valorFaturar = valorFaturar + parseFloat(valorDivida);
        return valorFaturar;
    } catch (e) {
        postGerarLog(e);
    }
}

function calculaRetornaValorLiquidoSemAbaDescontosCurso(ValorParcela, nroParcela, valorDesconto) {
    try {
        var valorDivida = dijit.byId('divida').get('value');
        if (!hasValue(ValorParcela, true))
            ValorParcela = dijit.byId('valorParcelaGrid').value;

        if (!hasValue(nroParcela, true))
            nroParcela = unmaskFixed(dijit.byId('parcelasCurso').get('value'), 0);

        if (!hasValue(valorDesconto, true))
            valorDesconto = dijit.byId('valorDescontoGrid').value;

        var valorFaturar = unmaskFixed(ValorParcela * nroParcela, 2);
        if (dijit.byId('ckPrimeiraParcela').checked)
            valorFaturar = valorFaturar + parseFloat(valorDivida);
        return valorFaturar;
    } catch (e) {
        postGerarLog(e);
    }
}

function calculaValorDescontoSemValorCurso(valorParcela, nroParcelas, valorCurso) {
    try {
        return valorCurso - valorParcela * nroParcelas;
    } catch (e) {
        postGerarLog(e);
    }
}

function calculaValorDescontoPorPercentual(pcDesconto, valorCurso) {
    try {
        return (parseFloat(pcDesconto) / 100) * parseFloat(valorCurso);
    } catch (e) {
        postGerarLog(e);
    }
}

function calculaValorCurso(valorParcela, nroParcelas, vlDesconto) {
    try {
        return valorParcela * nroParcelas + vlDesconto;
    } catch (e) {
        postGerarLog(e);
    }
}

function calculaPercentualDesconto(valorDesconto, valorCurso) {
    try {
        var percentualDesconto = 0;

        if (valorDesconto > 0 && valorCurso > 0)
            percentualDesconto = valorDesconto * 100 / valorCurso;

        return percentualDesconto;
    } catch (e) {
        postGerarLog(e);
    }
}

function calcularRetornarValorParcela(valorCurso, nroParcelas, valorDesconto) {
    try {
        var retorno = (valorCurso - valorDesconto) / nroParcelas;
        return retorno;
    } catch (e) {
        postGerarLog(e);
    }
}

function calcularRetornarParcelaLiquida(valorLiquido, nroParcelas) {
    try {
        var retorno = (valorLiquido) / nroParcelas;
        return retorno;
    } catch (e) {
        postGerarLog(e);
    }
}

function calcularRetornarParcelaLiquidaCurso(valorLiquido, nroParcelas) {
    try {
        var retorno = (valorLiquido) / nroParcelas;
        return retorno;
    } catch (e) {
        postGerarLog(e);
    }
}




function calcularValorLiquidoCursoGrid() {
    try {

        var valorCurso = unmaskFixed(dojo.byId('valorCursoGrid').value, 2);
        var desconto = unmaskFixed(dojo.byId('valorDescontoGrid').value, 2);
        if (desconto > valorCurso) {
            desconto = valorCurso;
        }
        var retorno = (valorCurso - desconto);
        return retorno;
    } catch (e) {
        postGerarLog(e);
    }
}

function calcularValorDescontoChangeValorLiquidoCursoGrid() {
    try {

        var valorCurso = unmaskFixed(dojo.byId('valorCursoGrid').value, 2);
        var valorLiquido = unmaskFixed(dojo.byId('valorLiquidoGrid').value, 2);
        if (valorLiquido > valorCurso) {
            desconto = valorLiquido;
        }
        var retorno = (valorCurso - valorLiquido);
        return valorCurso === 0 ? 0 : retorno;
    } catch (e) {
        postGerarLog(e);
    }
}

function consistirValorCurso(valorFaturar, valorCurso, divida) {
    try {
        var retornar = true;
        //LBM mesmo marcando a primeira o valor liquido esta sendo alterado
        //if (!dijit.byId('ckPrimeiraParcela').checked)
            valorFaturar = parseFloat(valorFaturar) - parseFloat(divida);

        if (valorFaturar < 0 || (parseFloat(valorFaturar) > parseFloat(valorCurso))) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgValorLiquidoMaiorValorCurso);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
            retornar = false;
        }
        return retornar;
    } catch (e) {
        postGerarLog(e);
    }
}
//TODO:Deivid
//Calcula o desconto que deve ser aplicado na primeira parcela com relação aos descontos da aba de contratos:
function calcularDescontoPrimeiraParcela(valorCurso) {
    try {
        var totalDescontosValorPrimeiraParcela = unmaskFixed(dojo.byId('totalValorDescontoPrimeiraParcela').value, 2);
        var totalDescontosPercentualPrimeiraParcela = unmaskFixed(dojo.byId('totalPorcentagemDescontoPrimeiraParcela').value, 2);
        var descontoPrimeiraParcela = 0;

        if (eval(valorCurso) > 0)
            descontoPrimeiraParcela = parseFloat(valorCurso) * (parseFloat(totalDescontosPercentualPrimeiraParcela) / 100);

        descontoPrimeiraParcela = descontoPrimeiraParcela + parseFloat(totalDescontosValorPrimeiraParcela);

        return descontoPrimeiraParcela;
    } catch (e) {
        postGerarLog(e);
    }
}

//Verifica se o estorou o desconto máximo da escola e de 100%
function consistirDescontoMaximo(totalDesconto, valorCurso) {
    try {
        var valorDescontoMaximo = 0;
        var percMaximoDesconto = dojo.byId('totalDescontosPermitidos').value;
        var totalValorTodosDescontos = parseFloat(dojo.byId('totalValorTodosDescontos').value);
        var totalTodosDescontosPorcentagem = parseFloat(dojo.byId('totalPorcentagemTodosDescontos').value);

        if (eval(valorCurso) > 0) {
            valorCurso = parseFloat(valorCurso);
            if (!isNaN(percMaximoDesconto) && percMaximoDesconto != 0)
                percMaximoDesconto = unmaskFixed(percMaximoDesconto, 2);
            else percMaximoDesconto = 0;

            valorDescontoMaximo = valorCurso * (parseFloat(percMaximoDesconto) / 100);

            var totalTodosDescontos = parseFloat(totalDesconto) + valorCurso * (totalTodosDescontosPorcentagem / 100) + totalValorTodosDescontos;


            if (totalDesconto > valorDescontoMaximo || totalTodosDescontos > valorCurso) {
                dojo.byId('totalValorDesconto').value = 0;
                dojo.byId('totalPorcentagemDesconto').value = 0;
                dojo.byId('totalValorDescontoPrimeiraParcela').value = 0;
                dojo.byId('totalPorcentagemDescontoPrimeiraParcela').value = 0;
                dojo.byId('descontoPrimeiraParc').value = 0;

                var mensagensWeb = new Array();
                if (totalDesconto > valorDescontoMaximo) {
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroValorUltrapassaDescontoParamentro);
                    apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
                }
                else if (totalTodosDescontos > valorCurso) {
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroValorUltrapassaDescontoTotal);
                    apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
                }
                return false;
            }
            else return true;
        }
        return true; //Opção de quando vai na aba de descontos sem valor de curso e quer voltar para ela.
    } catch (e) {
        postGerarLog(e);
    }
}

function getValoresParaDesconto(valorCurso, nroParcelas, valorDesconto, retornarCalculoValor) {
    try {
        var totalTodosDescontosValor = 0;
        var totalTodosDescontosPorcentagem = 0;
        var totalDescontosValor = 0;
        var totalDescontosPorcentagem = 0;
        var valorDescontoTotalAplicadoTitulos = 0;

        var itensDesc = new Array();
        var parcelasGeradas = new Array();
        var gridDesconto = dijit.byId('gridDesconto');
        if (!hasValue(valorCurso, true))
            valorCurso = dijit.byId("valorCurso").get('value');
        if (!hasValue(nroParcelas, true))
            nroParcelas = dijit.byId("parcelas").get('value');
        if (!hasValue(valorDesconto, true))
            valorDesconto = dijit.byId("valorDesconto").get('value');
        valorCurso = unmaskFixed(valorCurso, 2);
        valorDesconto = unmaskFixed(valorDesconto, 2);
        var valorParcela = calcularRetornarValorParcela(valorCurso, nroParcelas, valorDesconto);
        var valorLiquido = calculaRetornaValorLiquidoSemAbaDescontos(valorParcela, nroParcelas, valorDesconto);
        //var valorLiquido = calculaRetornaValorLiquidoSemAbaDescontos(valorParcelaComDesconto, nroParcelas, valorDesconto);
        for (var i = 0; i < gridDesconto.store.objectStore.data.length; i++) {
            //Todos Descontos
            if (parseFloat(gridDesconto.store.objectStore.data[i].pc_desconto) > 0)
                totalTodosDescontosPorcentagem = calcularValoresDescontoPorPecentualOrValor(gridDesconto.store.objectStore.data[i].pc_desconto, null, totalTodosDescontosPorcentagem, valorParcela, false);
            if (parseFloat(gridDesconto.store.objectStore.data[i].vl_desconto_contrato) > 0)
                totalTodosDescontosPorcentagem = calcularValoresDescontoPorPecentualOrValor(null, gridDesconto.store.objectStore.data[i].vl_desconto_contrato, totalTodosDescontosPorcentagem, valorParcela, false);

            if (gridDesconto.store.objectStore.data[i].id_desconto_ativo && !gridDesconto.store.objectStore.data[i].id_incide_baixa)
                itensDesc.push(gridDesconto.store.objectStore.data[i]);
        }

        for (var i = 0; i < nroParcelas; i++) {
            parcelasGeradas.push({
                nm_parcela_titulo: i + 1,
                nm_parcela_ini_desconto: 0,
                nm_parcela_fim_desconto: 0,
                vl_parcela: valorParcela,
                vl_parcela_desconto: valorParcela,
                vl_desconto_separado: 0,
                vl_total_desconto_aplicado: 0,
                pc_total_desconto_aplicado: 0,
            });
        }
        for (var i = 0; i < itensDesc.length; i++) {
            var lista = new Array();
            //Quando informado parcela inicial e final, é selecionadas as parcelas no intervalo.
            if (itensDesc[i].nm_parcela_ini > 0 && itensDesc[i].nm_parcela_fim > 0) {
                lista = jQuery.grep(parcelasGeradas, function (value) {
                    value.nm_parcela_ini_desconto = itensDesc[i].nm_parcela_ini;
                    value.nm_parcela_fim_desconto = itensDesc[i].nm_parcela_fim;
                    return value.nm_parcela_titulo >= itensDesc[i].nm_parcela_ini && value.nm_parcela_titulo <= itensDesc[i].nm_parcela_fim;
                });
            }
            //Quando informado parcela inicial e não final, é selecionadas as parcelas apartir da parcela inicial
            if (itensDesc[i].nm_parcela_ini > 0 && itensDesc[i].nm_parcela_fim <= 0) {
                lista = jQuery.grep(parcelasGeradas, function (value) {
                    value.nm_parcela_ini_desconto = itensDesc[i].nm_parcela_ini;
                    return value.nm_parcela_titulo >= itensDesc[i].nm_parcela_ini;
                });
            }
            //Quando informado parcela finçal e não a inicial, é selecionadas as parcelas com a numerção menor e igual a parcela final.
            if (itensDesc[i].nm_parcela_ini <= 0 && itensDesc[i].nm_parcela_fim > 0) {
                lista = jQuery.grep(parcelasGeradas, function (value) {
                    value.nm_parcela_fim_desconto = itensDesc[i].nm_parcela_fim;
                    return value.nm_parcela_titulo <= itensDesc[i].nm_parcela_fim;
                });
            }
            //Quando não informado a parcela inicial e a final, pegara todas as parcelas.
            if (itensDesc[i].nm_parcela_ini <= 0 && itensDesc[i].nm_parcela_fim <= 0) {
                lista = parcelasGeradas;
            }
            $.each(lista, function (index, value) {
                if (parseFloat(itensDesc[i].pc_desconto) > 0) {
                    var pc_desc = (itensDesc[i].pc_desconto).toString().replace(',', '.');
                    pc_desc = parseFloat(pc_desc).toFixed(2);
                    value.pc_total_desconto_aplicado = calcularValoresDescontoPorPecentualOrValor(pc_desc, null, value.pc_total_desconto_aplicado, valorParcela);
                }

                if (parseFloat(itensDesc[i].vl_desconto_contrato) > 0) {
                    var vl_desconto = removedecimal(itensDesc[i].vl_desconto_contrato.toString());
                    vl_desconto = parseFloat(vl_desconto).toFixed(2);
                    value.pc_total_desconto_aplicado = calcularValoresDescontoPorPecentualOrValor(null, vl_desconto, value.pc_total_desconto_aplicado, valorParcela);
                }
            });
        }

        $.each(parcelasGeradas, function (index, value) {
            var vl_desc_calc = unmaskFixed(value.vl_parcela_desconto * (value.pc_total_desconto_aplicado / 100) + value.vl_total_desconto_aplicado,2);
            value.vl_parcela_desconto = unmaskFixed(value.vl_parcela_desconto - vl_desc_calc, 2);
            value.vl_desconto_separado = vl_desc_calc;
            valorDescontoTotalAplicadoTitulos += vl_desc_calc;
        });
        if (!retornarCalculoValor) {
            gridDesconto.listaTitulosDescontos = parcelasGeradas;
            // Todos descontos:
            dojo.byId('totalValorTodosDescontos').value = totalTodosDescontosValor;
            dojo.byId('totalPorcentagemTodosDescontos').value = totalTodosDescontosPorcentagem;

            // Todos descontos, menos os que incidem na primeira parcela e menos os que incidem na baixa:
            dojo.byId('totalValorDesconto').value = valorDescontoTotalAplicadoTitulos;
            dojo.byId('totalPorcentagemDesconto').value = 0;

            // Todos descontos que incidem na primeira parcela e não incidem na baixa:
            dojo.byId('totalValorDescontoPrimeiraParcela').value = 0;
            dojo.byId('totalPorcentagemDescontoPrimeiraParcela').value = 0;
        }
        else
            return valorDescontoTotalAplicadoTitulos;
    } catch (e) {
        postGerarLog(e);
    }
}

function getValoresParaDescontoProfissionalInformatica(valorContrato, nroParcelas, valorDesconto, retornarCalculoValor) {
    try {
        var totalTodosDescontosValor = 0;
        var totalTodosDescontosPorcentagem = 0;
        var totalDescontosValor = 0;
        var totalDescontosPorcentagem = 0;
        var valorDescontoTotalAplicadoTitulos = 0;

        var itensDesc = new Array();
        var parcelasGeradas = new Array();
        var gridDesconto = dijit.byId('gridDesconto');
        if (!hasValue(valorContrato, true))
            valorContrato = dijit.byId("vl_contrato").get('value');
        if (!hasValue(nroParcelas, true))
            nroParcelas = dijit.byId("parcelas").get('value');
        if (!hasValue(valorDesconto, true))
            valorDesconto = dijit.byId("valorDesconto").get('value');
        valorContrato = unmaskFixed(valorContrato, 2);
        valorDesconto = unmaskFixed(valorDesconto, 2);
        var valorParcela = calcularRetornarValorParcela(valorContrato, nroParcelas, valorDesconto);
        var valorLiquido = calculaRetornaValorLiquidoSemAbaDescontos(valorParcela, nroParcelas, valorDesconto);
        //var valorLiquido = calculaRetornaValorLiquidoSemAbaDescontos(valorParcelaComDesconto, nroParcelas, valorDesconto);
        for (var i = 0; i < gridDesconto.store.objectStore.data.length; i++) {
            //Todos Descontos
            if (parseFloat(gridDesconto.store.objectStore.data[i].pc_desconto) > 0)
                totalTodosDescontosPorcentagem = calcularValoresDescontoPorPecentualOrValor(gridDesconto.store.objectStore.data[i].pc_desconto, null, totalTodosDescontosPorcentagem, valorParcela, false);
            if (parseFloat(gridDesconto.store.objectStore.data[i].vl_desconto_contrato) > 0)
                totalTodosDescontosPorcentagem = calcularValoresDescontoPorPecentualOrValor(null, gridDesconto.store.objectStore.data[i].vl_desconto_contrato, totalTodosDescontosPorcentagem, valorParcela, false);

            if (gridDesconto.store.objectStore.data[i].id_desconto_ativo && !gridDesconto.store.objectStore.data[i].id_incide_baixa)
                itensDesc.push(gridDesconto.store.objectStore.data[i]);
        }

        for (var i = 0; i < nroParcelas; i++) {
            parcelasGeradas.push({
                nm_parcela_titulo: i + 1,
                nm_parcela_ini_desconto: 0,
                nm_parcela_fim_desconto: 0,
                vl_parcela: valorParcela,
                vl_parcela_desconto: valorParcela,
                vl_desconto_separado: 0,
                vl_total_desconto_aplicado: 0,
                pc_total_desconto_aplicado: 0,
            });
        }
        for (var i = 0; i < itensDesc.length; i++) {
            var lista = new Array();
            //Quando informado parcela inicial e final, é selecionadas as parcelas no intervalo.
            if (itensDesc[i].nm_parcela_ini > 0 && itensDesc[i].nm_parcela_fim > 0) {
                lista = jQuery.grep(parcelasGeradas, function (value) {
                    value.nm_parcela_ini_desconto = itensDesc[i].nm_parcela_ini;
                    value.nm_parcela_fim_desconto = itensDesc[i].nm_parcela_fim;
                    return value.nm_parcela_titulo >= itensDesc[i].nm_parcela_ini && value.nm_parcela_titulo <= itensDesc[i].nm_parcela_fim;
                });
            }
            //Quando informado parcela inicial e não final, é selecionadas as parcelas apartir da parcela inicial
            if (itensDesc[i].nm_parcela_ini > 0 && itensDesc[i].nm_parcela_fim <= 0) {
                lista = jQuery.grep(parcelasGeradas, function (value) {
                    value.nm_parcela_ini_desconto = itensDesc[i].nm_parcela_ini;
                    return value.nm_parcela_titulo >= itensDesc[i].nm_parcela_ini;
                });
            }
            //Quando informado parcela finçal e não a inicial, é selecionadas as parcelas com a numerção menor e igual a parcela final.
            if (itensDesc[i].nm_parcela_ini <= 0 && itensDesc[i].nm_parcela_fim > 0) {
                lista = jQuery.grep(parcelasGeradas, function (value) {
                    value.nm_parcela_fim_desconto = itensDesc[i].nm_parcela_fim;
                    return value.nm_parcela_titulo <= itensDesc[i].nm_parcela_fim;
                });
            }
            //Quando não informado a parcela inicial e a final, pegara todas as parcelas.
            if (itensDesc[i].nm_parcela_ini <= 0 && itensDesc[i].nm_parcela_fim <= 0) {
                lista = parcelasGeradas;
            }
            $.each(lista, function (index, value) {
                if (parseFloat(itensDesc[i].pc_desconto) > 0) {
                    var pc_desc = (itensDesc[i].pc_desconto).toString().replace(',', '.');
                    pc_desc = parseFloat(pc_desc).toFixed(2);
                    value.pc_total_desconto_aplicado = calcularValoresDescontoPorPecentualOrValor(pc_desc, null, value.pc_total_desconto_aplicado, valorParcela);
                }

                if (parseFloat(itensDesc[i].vl_desconto_contrato) > 0) {
                    var vl_desconto = removedecimal(itensDesc[i].vl_desconto_contrato.toString());
                    vl_desconto = parseFloat(vl_desconto).toFixed(2);
                    value.pc_total_desconto_aplicado = calcularValoresDescontoPorPecentualOrValor(null, vl_desconto, value.pc_total_desconto_aplicado, valorParcela);
                }
            });
        }

        $.each(parcelasGeradas, function (index, value) {
            var vl_desc_calc = unmaskFixed(value.vl_parcela_desconto * (value.pc_total_desconto_aplicado / 100) + value.vl_total_desconto_aplicado,2);
            value.vl_parcela_desconto = unmaskFixed(value.vl_parcela_desconto - vl_desc_calc, 2);
            value.vl_desconto_separado = vl_desc_calc;
            valorDescontoTotalAplicadoTitulos += vl_desc_calc;
        });
        if (!retornarCalculoValor) {
            gridDesconto.listaTitulosDescontos = parcelasGeradas;
            // Todos descontos:
            dojo.byId('totalValorTodosDescontos').value = totalTodosDescontosValor;
            dojo.byId('totalPorcentagemTodosDescontos').value = totalTodosDescontosPorcentagem;

            // Todos descontos, menos os que incidem na primeira parcela e menos os que incidem na baixa:
            dojo.byId('totalValorDesconto').value = valorDescontoTotalAplicadoTitulos;
            dojo.byId('totalPorcentagemDesconto').value = 0;

            // Todos descontos que incidem na primeira parcela e não incidem na baixa:
            dojo.byId('totalValorDescontoPrimeiraParcela').value = 0;
            dojo.byId('totalPorcentagemDescontoPrimeiraParcela').value = 0;
        }
        else
            return valorDescontoTotalAplicadoTitulos;
    } catch (e) {
        postGerarLog(e);
    }
}

function getValoresParaDescontoCurso(valorCurso, nroParcelas, valorDesconto, retornarCalculoValor) {
    try {
        var totalTodosDescontosValor = 0;
        var totalTodosDescontosPorcentagem = 0;
        var totalDescontosValor = 0;
        var totalDescontosPorcentagem = 0;
        var valorDescontoTotalAplicadoTitulos = 0;

        var gridDesconto = dijit.byId('gridDesconto');
        var valorParcela = calcularRetornarValorParcela(valorCurso, nroParcelas, valorDesconto);
        var valorLiquido = calculaRetornaValorLiquidoSemAbaDescontos(valorParcela, nroParcelas, valorDesconto);
        //var valorLiquido = calculaRetornaValorLiquidoSemAbaDescontos(valorParcelaComDesconto, nroParcelas, valorDesconto);
        gridDesconto.listaTitulosDescontos = [];
        gridDataCurso = dijit.byId("gridDataCurso");
        var calculou_desconto_grade = false;
        for (var k = 0; k < gridDataCurso.store.objectStore.data.length; k++) {
            var itensDesc = new Array();
            var parcelasGeradas = new Array();
            valorCurso = unmaskFixed(valorCurso, 2);
            valorDesconto = unmaskFixed(valorDesconto, 2);
            valorCurso = gridDataCurso.store.objectStore.data[k].vl_curso
            nroParcelas = gridDataCurso.store.objectStore.data[k].nm_parcelas
            valorDesconto = gridDataCurso.store.objectStore.data[k].vl_desconto_contrato
            var valorParcela = calcularRetornarValorParcela(valorCurso, nroParcelas, valorDesconto);
            var valorLiquido = calculaRetornaValorLiquidoSemAbaDescontos(valorParcela, nroParcelas, valorDesconto);
            for (var i = 0; i < gridDesconto.store.objectStore.data.length; i++) {
                //Todos Descontos
                if (!calculou_desconto_grade) {
                    if (parseFloat(gridDesconto.store.objectStore.data[i].pc_desconto) > 0)
                        totalTodosDescontosPorcentagem = calcularValoresDescontoPorPecentualOrValor(gridDesconto.store.objectStore.data[i].pc_desconto, null, totalTodosDescontosPorcentagem, valorParcela, false);
                    if (parseFloat(gridDesconto.store.objectStore.data[i].vl_desconto_contrato) > 0)
                        totalTodosDescontosPorcentagem = calcularValoresDescontoPorPecentualOrValor(null, gridDesconto.store.objectStore.data[i].vl_desconto_contrato, totalTodosDescontosPorcentagem, valorParcela, false);
                }
                if (gridDesconto.store.objectStore.data[i].id_desconto_ativo && !gridDesconto.store.objectStore.data[i].id_incide_baixa)
                    itensDesc.push(gridDesconto.store.objectStore.data[i]);
                calculou_desconto_grade = true;
            }

            for (var i = gridDesconto.listaTitulosDescontos.length; i < gridDesconto.listaTitulosDescontos.length+nroParcelas; i++) {
                parcelasGeradas.push({
                    nm_parcela_titulo: i + 1,
                    nm_parcela_ini_desconto: 0,
                    nm_parcela_fim_desconto: 0,
                    vl_parcela: valorParcela,
                    vl_parcela_desconto: valorParcela,
                    vl_desconto_separado: 0,
                    vl_total_desconto_aplicado: 0,
                    pc_total_desconto_aplicado: 0,
                });
            }
            for (var i = 0; i < itensDesc.length; i++) {
                var lista = new Array();
                //Quando informado parcela inicial e final, é selecionadas as parcelas no intervalo.
                if (itensDesc[i].nm_parcela_ini > 0 && itensDesc[i].nm_parcela_fim > 0) {
                    lista = jQuery.grep(parcelasGeradas, function (value) {
                        value.nm_parcela_ini_desconto = itensDesc[i].nm_parcela_ini;
                        value.nm_parcela_fim_desconto = itensDesc[i].nm_parcela_fim;
                        return value.nm_parcela_titulo >= itensDesc[i].nm_parcela_ini && value.nm_parcela_titulo <= itensDesc[i].nm_parcela_fim;
                    });
                }
                //Quando informado parcela inicial e não final, é selecionadas as parcelas apartir da parcela inicial
                if (itensDesc[i].nm_parcela_ini > 0 && itensDesc[i].nm_parcela_fim <= 0) {
                    lista = jQuery.grep(parcelasGeradas, function (value) {
                        value.nm_parcela_ini_desconto = itensDesc[i].nm_parcela_ini;
                        return value.nm_parcela_titulo >= itensDesc[i].nm_parcela_ini;
                    });
                }
                //Quando informado parcela finçal e não a inicial, é selecionadas as parcelas com a numerção menor e igual a parcela final.
                if (itensDesc[i].nm_parcela_ini <= 0 && itensDesc[i].nm_parcela_fim > 0) {
                    lista = jQuery.grep(parcelasGeradas, function (value) {
                        value.nm_parcela_fim_desconto = itensDesc[i].nm_parcela_fim;
                        return value.nm_parcela_titulo <= itensDesc[i].nm_parcela_fim;
                    });
                }
                //Quando não informado a parcela inicial e a final, pegara todas as parcelas.
                if (itensDesc[i].nm_parcela_ini <= 0 && itensDesc[i].nm_parcela_fim <= 0) {
                    lista = parcelasGeradas;
                }
                $.each(lista, function (index, value) {
                    if (parseFloat(itensDesc[i].pc_desconto) > 0) {
                        var pc_desc = (itensDesc[i].pc_desconto).toString().replace(',', '.');
                        pc_desc = parseFloat(pc_desc).toFixed(2);
                        value.pc_total_desconto_aplicado = calcularValoresDescontoPorPecentualOrValor(pc_desc, null, value.pc_total_desconto_aplicado, valorParcela);
                    }

                    if (parseFloat(itensDesc[i].vl_desconto_contrato) > 0) {
                        var vl_desconto = removedecimal(itensDesc[i].vl_desconto_contrato.toString());
                        vl_desconto = parseFloat(vl_desconto).toFixed(2);
                        value.pc_total_desconto_aplicado = calcularValoresDescontoPorPecentualOrValor(null, vl_desconto, value.pc_total_desconto_aplicado, valorParcela);
                    }
                });
            }

            $.each(parcelasGeradas, function (index, value) {
                var vl_desc_calc = unmaskFixed(value.vl_parcela_desconto * (value.pc_total_desconto_aplicado / 100) + value.vl_total_desconto_aplicado,2);
                value.vl_parcela_desconto = unmaskFixed(value.vl_parcela_desconto - vl_desc_calc, 2);
                value.vl_desconto_separado = vl_desc_calc;
                valorDescontoTotalAplicadoTitulos += vl_desc_calc;
            });
            if (gridDesconto.listaTitulosDescontos.length == 0)
                gridDesconto.listaTitulosDescontos = parcelasGeradas;
            else
                gridDesconto.listaTitulosDescontos = gridDesconto.listaTitulosDescontos.concat(parcelasGeradas);
        }
        if (!retornarCalculoValor) {
            // Todos descontos:
            dojo.byId('totalValorTodosDescontos').value = totalTodosDescontosValor;
            dojo.byId('totalPorcentagemTodosDescontos').value = totalTodosDescontosPorcentagem;

            // Todos descontos, menos os que incidem na primeira parcela e menos os que incidem na baixa:
            dojo.byId('totalValorDesconto').value = valorDescontoTotalAplicadoTitulos;
            dojo.byId('totalPorcentagemDesconto').value = 0;

            // Todos descontos que incidem na primeira parcela e não incidem na baixa:
            dojo.byId('totalValorDescontoPrimeiraParcela').value = 0;
            dojo.byId('totalPorcentagemDescontoPrimeiraParcela').value = 0;
        }
        else
            return valorDescontoTotalAplicadoTitulos;
    } catch (e) {
        postGerarLog(e);
    }
}


function gerarParcelasDescontosAditamento(listaTodosTitulos, nroParcelas, valorParcela, valorParcAditivo, calcular_desc_todos_titulos_adt) {
    var parcelasGeradas = new Array();
    var gerarOlhandoTitulosAbertos = false;
    var listaTitulosAbertosVlDesconto = jQuery.grep(listaTodosTitulos, function (value) {
        return value.id_status_titulo == 1 && !value.possuiBaixa && value.vl_desconto_contrato > 0;
    });
    var listaTitulosAbertos = jQuery.grep(listaTodosTitulos, function (value) {
        return value.id_status_titulo == 1 && !value.possuiBaixa && (value.id_status_cnab == 0 || value.id_status_cnab == 6);
    });
    if (hasValue(listaTitulosAbertosVlDesconto) && listaTitulosAbertosVlDesconto.length > 0)
        gerarOlhandoTitulosAbertos = true;

    if (hasValue(calcular_desc_todos_titulos_adt)) {
        for (var i = 0; i < nroParcelas; i++) {
            parcelasGeradas.push({
                nm_parcela_titulo: i + 1,
                vl_parcela: valorParcAditivo,
                vl_parcela_desconto: valorParcAditivo,
                vl_desconto_separado: 0,
                vl_total_desconto_aplicado: 0,
                pc_total_desconto_aplicado: 0,
            });
        }
    } else {
        if (gerarOlhandoTitulosAbertos)
            $.each(listaTitulosAbertos, function (index, value) {
                parcelasGeradas.push({
                    nm_parcela_titulo: value.nm_parcela_titulo,
                    vl_parcela: value.vl_titulo - value.vl_material_titulo + value.vl_desconto_contrato,
                    vl_parcela_desconto: value.vl_titulo - value.vl_material_titulo + value.vl_desconto_contrato,
                    //vl_parcela: value.vl_titulo - value.vl_material_titulo,
                    //vl_parcela_desconto: value.vl_titulo - value.vl_material_titulo,
                    vl_desconto_separado: value.vl_desconto_contrato,
                    vl_total_desconto_aplicado: 0,
                    pc_total_desconto_aplicado: 0,
                });
            });
        if (!gerarOlhandoTitulosAbertos)
            for (var i = 0; i < listaTitulosAbertos.length; i++) {
                parcelasGeradas.push({
                    nm_parcela_titulo: i + 1,
                    vl_parcela: valorParcela,
                    vl_parcela_desconto: valorParcela,
                    vl_desconto_separado: 0,
                    vl_total_desconto_aplicado: 0,
                    pc_total_desconto_aplicado: 0,
                });
            }
    }
    return parcelasGeradas;
}

function verificarDescontoParcela(valorParcela, valorDescontoParcela) {
    try {
        var valorDescontoMaximo = 0;
        var percMaximoDesconto = dojo.byId('totalDescontosPermitidos').value;

        var valorCurso = dijit.byId('valorCurso').get('value');
        if (!isNaN(valorCurso) && valorCurso != "")
            valorCurso = unmaskFixed(valorCurso, 2);
        else valorCurso = 0;

        if (eval(valorCurso) > 0) {
            if (!isNaN(percMaximoDesconto) && percMaximoDesconto != 0)
                percMaximoDesconto = unmaskFixed(percMaximoDesconto, 2);
            else percMaximoDesconto = 0;
            valorDescontoMaximo = parseFloat(valorCurso) * (parseFloat(percMaximoDesconto) / 100);
        }

        var retornar = true;
        if (!consistirDescontosParcela(valorParcela, valorDescontoParcela))
            retornar = false;
        else
            //Rever esse o valor do desconto de forma que verifique todo desconto dado na tela
            if (valorDescontoParcela > parseFloat(valorDescontoMaximo)) {
                onChangeActive(false);
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroValorUltrapassaDescontoParamentro);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
                dijit.byId('descontoPrimeiraParcela').set('value', 0);
                dojo.byId("descontoPrimeiraParc").value = 0;
                retornar = false;
                onChangeActive(true);
            }
        return retornar;
    } catch (e) {
        postGerarLog(e);
    }
}

function consistirDescontosParcela(valorParcela, valorDescontoParcela) {
    try {
        var retornar = true;
        if (unmaskFixed(valorDescontoParcela, 2) > unmaskFixed(valorParcela, 2)) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgDescontoParcelaMaior);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
            retornar = false;
        }
        return retornar;
    } catch (e) {
        postGerarLog(e);
    }
}

function consistirValorParcela(valorParcela, nroParcelas, valorCurso) {
    if (((valorParcela * nroParcelas) > valorCurso) && (valorCurso > 0)) {
        var mensagensWeb = new Array();
        mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErroValorParcelaMaiorValorCurso);
        apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
        return false;
    }
    return true;
}

function getParametros(xhr) {
    xhr.get({
        url: Endereco() + "/api/escola/getParametrosBaixa",
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
        idProperty: ""
    }).then(function (data) {
        try {
            var retorno = $.parseJSON(data);
            if (hasValue(retorno.retorno)) {
                dojo.byId('totalDescontosPermitidos').value = retorno.retorno.per_desconto_maximo;
            }
        } catch (e) {
            postGerarLog(e);
        }
    });
}

//#endregion

function calcularValorOrParcelas(valorCurso, valorParcela, nroParcelas) {
    try {
        onChangeActive(false);
        var compParcelas = dijit.byId("parcelas");
        var desconto = 0;
        var valorDesconto = 0;
        var valorParcelaCalculado = 0;
        var curso = null;
        if (isNaN(nroParcelas) || nroParcelas == "" || nroParcelas == null)
            nroParcelas = 1;

        if (eval(valorParcela) > 0 && eval(valorCurso) <= 0) {
            valorDesconto = dijit.byId('valorDesconto').get('value');
            if (!isNaN(valorDesconto) && valorDesconto != "")
                valorDesconto = unmaskFixed(valorDesconto, 2);
            else valorDesconto = 0;

            valorCurso = calculaValorCurso(parseFloat(valorParcela), parseInt(nroParcelas), valorDesconto);
            valorCurso = unmaskFixed(curso, 2);
        }
        if (eval(valorCurso) > 0) {
            desconto = dijit.byId('desconto').get('value');
            valorDesconto = calculaValorDescontoPorPercentual(parseFloat(desconto), parseFloat(valorCurso));
            valorParcelaCalculado = calcularRetornarValorParcela(parseFloat(valorCurso), parseInt(nroParcelas), parseFloat(valorDesconto));
        }

        var descontoPrimeiraParcela = dijit.byId('descontoPrimeiraParcela').get('value');

        if (hasValue(valorParcelaCalculado, true) && hasValue(descontoPrimeiraParcela, true) && parseFloat(valorParcelaCalculado) < parseFloat(descontoPrimeiraParcela)) {
            compParcelas.set("value", compParcelas.old_value);
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgNoaPermitParcelaLiquidaDescont1Parcela);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, false);
            onChangeActive(true);
            return false;
        } else {
            compParcelas.old_value = nroParcelas;
            //seta o valor do curso se ele não existir.
            if (valorCurso != null)
                dijit.byId('valorCurso').set('value', valorCurso);
            //Seta o valor da parcela.

            //valorParcelaCalculado = maskFixed(valorParcelaCalculado, 2);
            dijit.byId('valorParcela').set('value', unmaskFixed(valorParcelaCalculado, 2));
            dijit.byId('valorParcela').value = valorParcelaCalculado;
            dijit.byId('valorParcela').old_value = valorParcelaCalculado;


            dijit.byId('edValParcela').set('value', unmaskFixed(valorParcelaCalculado, 2));
            dijit.byId('edValParcela').value = valorParcelaCalculado;
            dijit.byId('edValParcela').old_value = valorParcelaCalculado;

            var valorFaturar = calcularERetornarValorFaturar(valorCurso, nroParcelas);
            dijit.byId("valorFaturar")._onChangeActive = false;
            dijit.byId('valorFaturar').set('value', valorFaturar);
            dijit.byId('valorFaturar').old_value = valorFaturar;
            dijit.byId("valorFaturar")._onChangeActive = true;

            var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorFaturar, nroParcelas);

            
            dijit.byId('valorLiquidoGrid')._onChangeActive = false;
            dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
            dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
            dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
            dijit.byId('valorLiquidoGrid')._onChangeActive = true;

            var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(calcularValorLiquidoCursoGrid(), nroParcelas);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
            dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
            dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
            dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;

            dijit.byId('edParcelaLiquida')._onChangeActive = false;
            dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
            dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida')._onChangeActive = true;

            onChangeActive(true);
        }
        return true;
    } catch (e) {
        postGerarLog(e);
    }
}

function calcularValorOrParcelasProfissionalInformatica(valorContrato, valorParcela, nroParcelas) {
    try {
        onChangeActive(false);
        var compParcelas = dijit.byId("parcelas");
        var desconto = 0;
        var valorDesconto = 0;
        var valorParcelaCalculado = 0;
        var curso = null;
        if (isNaN(nroParcelas) || nroParcelas == "" || nroParcelas == null)
            nroParcelas = 1;

        if (eval(valorParcela) > 0 && eval(valorContrato) <= 0) {
            valorDesconto = dijit.byId('valorDesconto').get('value');
            if (!isNaN(valorDesconto) && valorDesconto != "")
                valorDesconto = unmaskFixed(valorDesconto, 2);
            else valorDesconto = 0;

            valorContrato = calculaValorCurso(parseFloat(valorParcela), parseInt(nroParcelas), valorDesconto);
            valorContrato = unmaskFixed(curso, 2);
        }
        if (eval(valorContrato) > 0) {
            desconto = dijit.byId('desconto').get('value');
            valorDesconto = calculaValorDescontoPorPercentual(parseFloat(desconto), parseFloat(valorContrato));
            valorParcelaCalculado = calcularRetornarValorParcela(parseFloat(valorContrato), parseInt(nroParcelas), parseFloat(valorDesconto));
        }

        var descontoPrimeiraParcela = dijit.byId('descontoPrimeiraParcela').get('value');

        if (hasValue(valorParcelaCalculado, true) && hasValue(descontoPrimeiraParcela, true) && parseFloat(valorParcelaCalculado) < parseFloat(descontoPrimeiraParcela)) {
            compParcelas.set("value", compParcelas.old_value);
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgNoaPermitParcelaLiquidaDescont1Parcela);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, false);
            onChangeActive(true);
            return false;
        } else {
            compParcelas.old_value = nroParcelas;
            //seta o valor do curso se ele não existir.
            if (valorContrato != null) {
                habilitarOnChange(dijit.byId('vl_contrato'), false);
                dijit.byId('vl_contrato').set('value', valorContrato);
                habilitarOnChange(dijit.byId('vl_contrato'), true);
            }
            //Seta o valor da parcela.

            //valorParcelaCalculado = maskFixed(valorParcelaCalculado, 2);
            dijit.byId('valorParcela').set('value', unmaskFixed(valorParcelaCalculado, 2));
            dijit.byId('valorParcela').value = valorParcelaCalculado;
            dijit.byId('valorParcela').old_value = valorParcelaCalculado;

            dijit.byId('edValParcela').set('value', unmaskFixed(valorParcelaCalculado, 2));
            dijit.byId('edValParcela').value = valorParcelaCalculado;
            dijit.byId('edValParcela').old_value = valorParcelaCalculado;


            var valorFaturar = calcularERetornarValorFaturar(valorContrato, nroParcelas);
            dijit.byId("valorFaturar")._onChangeActive = false;
            dijit.byId('valorFaturar').set('value', valorFaturar);
            dijit.byId('valorFaturar').old_value = valorFaturar;
            dijit.byId("valorFaturar")._onChangeActive = true;

            var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorFaturar, nroParcelas);
            dijit.byId('valorLiquidoGrid')._onChangeActive = false;
            dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
            dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
            dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
            dijit.byId('valorLiquidoGrid')._onChangeActive = true;

            var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(calcularValorLiquidoCursoGrid(), nroParcelas);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
            dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
            dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
            dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;

            dijit.byId('edParcelaLiquida')._onChangeActive = false;
            dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
            dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida')._onChangeActive = true;
            onChangeActive(true);
        }
        return true;
    } catch (e) {
        postGerarLog(e);
    }
}


function calcularValorOrParcelasCurso(valorCurso, valorParcela, nroParcelas) {
    try {
        onChangeActive(false);
        var compParcelas = dijit.byId("parcelasCurso");
        var desconto = 0;
        var valorDesconto = 0;
        var valorParcelaCalculado = 0;
        var curso = null;
        if (isNaN(nroParcelas) || nroParcelas == "" || nroParcelas == null)
            nroParcelas = 1;

        if (eval(valorParcela) > 0 && eval(valorCurso) <= 0) {
            valorDesconto = dijit.byId('valorDescontoGrid').get('value');
            if (!isNaN(valorDesconto) && valorDesconto != "")
                valorDesconto = unmaskFixed(valorDesconto, 2);
            else valorDesconto = 0;

            valorCurso = calculaValorCurso(parseFloat(valorParcela), parseInt(nroParcelas), valorDesconto);
            valorCurso = unmaskFixed(curso, 2);
        }
        if (eval(valorCurso) > 0) {
            desconto = dijit.byId('descontoGrid').get('value');
            valorDesconto = calculaValorDescontoPorPercentual(parseFloat(desconto), parseFloat(valorCurso));
            valorParcelaCalculado = calcularRetornarValorParcela(parseFloat(valorCurso), parseInt(nroParcelas), parseFloat(valorDesconto));
        }

        var descontoPrimeiraParcela = dijit.byId('descontoPrimeiraParcela').get('value');

        if (hasValue(valorParcelaCalculado, true) && hasValue(descontoPrimeiraParcela, true) && parseFloat(valorParcelaCalculado) < parseFloat(descontoPrimeiraParcela)) {
            compParcelas.set("value", compParcelas.old_value);
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgNoaPermitParcelaLiquidaDescont1Parcela);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, false);
            onChangeActive(true);
            return false;
        } else {
            compParcelas.old_value = nroParcelas;
            //seta o valor do curso se ele não existir.
            if (valorCurso != null)
                dijit.byId('valorCursoGrid').set('value', valorCurso);
            //Seta o valor da parcela.

            //valorParcelaCalculado = maskFixed(valorParcelaCalculado, 2);
            dijit.byId('valorParcelaGrid').set('value', unmaskFixed(valorParcelaCalculado, 2));
            dijit.byId('valorParcelaGrid').value = valorParcelaCalculado;
            dijit.byId('valorParcelaGrid').old_value = valorParcelaCalculado;

            var valorFaturar = calcularERetornarValorFaturar(valorCurso, nroParcelas);
            dijit.byId("valorFaturar")._onChangeActive = false;
            dijit.byId('valorFaturar').set('value', valorFaturar);
            dijit.byId('valorFaturar').old_value = valorFaturar;
            dijit.byId("valorFaturar")._onChangeActive = true;


            var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorFaturar, nroParcelas);


            dijit.byId('valorLiquidoGrid')._onChangeActive = false;
            dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
            dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
            dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
            dijit.byId('valorLiquidoGrid')._onChangeActive = true;

            var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(calcularValorLiquidoCursoGrid(), nroParcelas);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
            dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
            dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
            dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;

            dijit.byId('edParcelaLiquida')._onChangeActive = false;
            dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
            dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida')._onChangeActive = true;
            onChangeActive(true);
        }
        return true;
    } catch (e) {
        postGerarLog(e);
    }
}

function calcularDescontoPrimeiraParcela(valorCurso) {
    try {
        var totalDescontosValorPrimeiraParcela = unmaskFixed(dojo.byId('totalValorDescontoPrimeiraParcela').value, 2);
        var totalDescontosPercentualPrimeiraParcela = unmaskFixed(dojo.byId('totalPorcentagemDescontoPrimeiraParcela').value, 2);
        var descontoPrimeiraParcela = 0;

        if (eval(valorCurso) > 0)
            descontoPrimeiraParcela = parseFloat(valorCurso) * (parseFloat(totalDescontosPercentualPrimeiraParcela) / 100);

        descontoPrimeiraParcela = descontoPrimeiraParcela + parseFloat(totalDescontosValorPrimeiraParcela);

        return descontoPrimeiraParcela;
    } catch (e) {
        postGerarLog(e);
    }
}

//calcula o valor a faturar a partir de outros valores 
function calcularERetornarValorFaturar(vlCurso, nroParcelas, vl_desconto) {
    try {
        var totalDescontoTrasformado = 0;
        var totalGeralDesconto = 0;
        var totalDescontosValor = unmaskFixed(dojo.byId('totalValorDesconto').value, 2);
        var totalDescontosPercentual = unmaskFixed(dojo.byId('totalPorcentagemDesconto').value, 2);
        var valorFaturar = 0;
        var divida = dijit.byId('divida').get('value');
        if (!hasValue(vl_desconto, true))
            vl_desconto = unmaskFixed(dijit.byId("valorDesconto").get('value'), 2);
        if (((eval(totalDescontosPercentual) >= 0) || (eval(totalDescontosValor) >= 0)) && (eval(vlCurso) > 0)) {
            totalDescontoTrasformado = parseFloat(vlCurso) * (parseFloat(totalDescontosPercentual) / 100);

            //Total de todos os descontos da aba de descontos.
            totalGeralDesconto = parseFloat(totalDescontosValor) + parseFloat(totalDescontoTrasformado);

            //valorFaturar = parseInt(vlCurso) - parseFloat(totalGeralDesconto);
        }

        if (!isNaN(divida) && divida != "")
            divida = parseFloat(divida);
        else
            divida = 0;
        if (eval(vlCurso) >= 0) {
            valorFaturar = vlCurso - parseFloat(totalGeralDesconto) - vl_desconto;
            //if (dijit.byId('ckPrimeiraParcela').checked)
            valorFaturar = valorFaturar + parseFloat(divida);
            valorFaturar = unmaskFixed(valorFaturar, 2);
            return valorFaturar;
        }
    } catch (e) {
        postGerarLog(e);
    }
}


//calcula o valor a faturar a partir de outros valores 
function calcularERetornarValorFaturarCurso(vlCurso, nroParcelas, vl_desconto) {
    try {
        var totalDescontoTrasformado = 0;
        var totalGeralDesconto = 0;
        var totalDescontosValor = unmaskFixed(dojo.byId('totalValorDesconto').value, 2);
        var totalDescontosPercentual = unmaskFixed(dojo.byId('totalPorcentagemDesconto').value, 2);
        var valorFaturar = 0;
        var divida = dijit.byId('divida').get('value');
        if (!hasValue(vl_desconto, true))
            vl_desconto = unmaskFixed(dijit.byId("valorDescontoGrid").get('value'), 2);
        if (((eval(totalDescontosPercentual) >= 0) || (eval(totalDescontosValor) >= 0)) && (eval(vlCurso) > 0)) {
            totalDescontoTrasformado = parseFloat(vlCurso) * (parseFloat(totalDescontosPercentual) / 100);

            //Total de todos os descontos da aba de descontos.
            totalGeralDesconto = parseFloat(totalDescontosValor) + parseFloat(totalDescontoTrasformado);

            //valorFaturar = parseInt(vlCurso) - parseFloat(totalGeralDesconto);
        }

        if (!isNaN(divida) && divida != "")
            divida = parseFloat(divida);
        else
            divida = 0;
        if (eval(vlCurso) >= 0) {
            valorFaturar = vlCurso - parseFloat(totalGeralDesconto) - vl_desconto;
            //if (dijit.byId('ckPrimeiraParcela').checked)
            valorFaturar = valorFaturar + parseFloat(divida);
            valorFaturar = unmaskFixed(valorFaturar, 2);
            return valorFaturar;
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function calcularValorLiquido(valorLiquido, nroParcela) {
    try {
        apresentaMensagem("apresentadorMensagemMat", null, false);
        onChangeActive(false);
        var desconto = 0;
        var valorCurso = 0;
        var divida = 0;
        var parcela = 0;
        var pcDesconto = dijit.byId('desconto').get('value');
        var valorDesconto = dijit.byId("valorDesconto").get('value');
        valorDesconto = unmaskFixed(valorDesconto, 2);
        //pegando valor da dívida
        var divida = dijit.byId('divida').get('value');
        if (!isNaN(divida) && divida != "" && !dijit.byId("ckPrimeiraParcela").checked)
            divida = unmaskFixed(divida, 2);
        else
            divida = 0;

        valorCurso = dijit.byId('valorCurso').get('value');
        if (!consistirValorCurso(valorLiquido, valorCurso, divida)) {
            var valorFaturar = calcularERetornarValorFaturar(valorCurso, nroParcela);
            dijit.byId('valorFaturar').set('value', unmaskFixed(valorFaturar, 2));
            dijit.byId('valorFaturar').value = valorFaturar;
            dijit.byId('valorFaturar').old_value = valorFaturar;

            onChangeActive(true);
            return false;
        }
        var totalDescontosValor = parseFloat(dojo.byId('totalValorDesconto').value);
        var totalDescontosPercentual = parseFloat(dojo.byId('totalPorcentagemDesconto').value);
        var totalDescontoTrasformado = 0;
        var totalGeralDesconto = 0;

        totalDescontoTrasformado = parseFloat(valorCurso) * (parseFloat(totalDescontosPercentual) / 100);
        var vlBaseDesc = parseFloat(valorCurso) - totalDescontoTrasformado;

        //desconto
        //%Desconto = 100-((Nº de Parcelas x Valor da Parcela)/Valor Cursox100),
        //desconto = 100 - (((parseInt(nroParcela) * parseFloat(parcela)) / parseFloat(valorCurso)) * 100);
        desconto = ((vlBaseDesc - parseFloat(valorLiquido)) * 100) / vlBaseDesc;
        desconto = parseFloat(desconto).toFixed(4);

        //consite o desconto segundo os parametros da escola
        var valorDesconto = 0;
        if (eval(desconto) > 0)
            valorDesconto = (parseFloat(vlBaseDesc) * (parseFloat(desconto) / 100));
        totalGeralDesconto = parseFloat(totalDescontosValor) + parseFloat(totalDescontoTrasformado) + valorDesconto;
        //var totalDescontosAplicados = calcularTodosDescontosERetornarValor(valorCurso);
        //calcula o valor do curso quando e alterado o valor a faturar.        
        var valorCusroCal = unmaskFixed((parseFloat(valorLiquido) - (parseFloat(divida)) + parseFloat(totalGeralDesconto)), 2);

        if (valorCusroCal > valorCurso) {
            var valorFaturar = calcularERetornarValorFaturar(valorCurso, nroParcela);
            var compValorFaturar = dijit.byId('valorFaturar');
            compValorFaturar._onChangeActive = false;
            compValorFaturar.set('value', maskFixed(valorFaturar, 2));
            dijit.byId('valorFaturar').old_value = valorFaturar;
            compValorFaturar._onChangeActive = true;
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgValorLiquidoMaiorValorCurso);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
            onChangeActive(true);
            return false;
        }

        if (eval(valorCurso) > 0) {
            //valor parcela
            /*
                         Valor da Parcela= [Valor Líquido - (Valor da dívida (se não estiver marcada a opção de 1ª parcela) + Valor dos descontos, da aba descontos, que não incidam na baixa e nem na 1ª parcela)]/Nº de Parcelas. 
                 */
            parcela = calcularRetornarValorParcela(valorCurso, nroParcela, valorDesconto);
            var descPrimeiraParc = unmaskFixed(dojo.byId('descontoPrimeiraParcela').value, 2);

            if (hasValue(descPrimeiraParc) && descPrimeiraParc > parcela) {
                //restaura o valor anterior.
                var valorAFaturar = calculaRetornaValorLiquidoSemAbaDescontos(null, null, null);
                dijit.byId('valorFaturar').set('value', valorAFaturar);
                dijit.byId('valorFaturar').old_value = valorFaturar;
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgNoaPermitParcelaLiquidaDescont1Parcela);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
                onChangeActive(true);
                return false;
            }

            //regra do desconto
            if (!consistirDescontoMaximo(valorDesconto, valorCurso)) {
                var valorAFaturar = calculaRetornaValorLiquidoSemAbaDescontos(null, null, null);

                dijit.byId('valorFaturar').set('value', valorAFaturar);
                dijit.byId('valorFaturar').old_value = valorFaturar;
                onChangeActive(true);
                return false;
            } else {

                dijit.byId('desconto').set('value', unmaskFixed(desconto, 2));
                dijit.byId('desconto').old_value = unmaskFixed(desconto, 2);
                valorDesconto = (desconto / 100) * parseFloat(valorCurso);
                dijit.byId('valorDesconto').set('value', unmaskFixed(valorDesconto, 2));
                dijit.byId('valorDesconto').old_value = unmaskFixed(valorDesconto, 2);

                dijit.byId('valorParcela').set('value', unmaskFixed(parcela, 2));
                dijit.byId('valorParcela').old_value = parcela;
                dijit.byId('valorParcela').value = parcela;

                dijit.byId('edValParcela').set('value', unmaskFixed(parcela, 2));
                dijit.byId('edValParcela').old_value = parcela;
                dijit.byId('edValParcela').value = parcela;
            }
        }
        onChangeActive(true);
        return true;
    } catch (e) {
        postGerarLog(e);
    }
}

function calcularValorLiquidoProfissionalInformatica(valorLiquido, nroParcela) {
    try {
        apresentaMensagem("apresentadorMensagemMat", null, false);
        onChangeActive(false);
        var desconto = 0;
        var valorContrato = 0;
        var divida = 0;
        var parcela = 0;
        var pcDesconto = dijit.byId('desconto').get('value');
        var valorDesconto = dijit.byId("valorDesconto").get('value');
        valorDesconto = unmaskFixed(valorDesconto, 2);
        //pegando valor da dívida
        var divida = dijit.byId('divida').get('value');
        if (!isNaN(divida) && divida != "" && !dijit.byId("ckPrimeiraParcela").checked)
            divida = unmaskFixed(divida, 2);
        else
            divida = 0;

        valorContrato = dijit.byId('vl_contrato').get('value');
        if (!consistirValorCurso(valorLiquido, valorContrato, divida)) {
            var valorFaturar = calcularERetornarValorFaturar(valorContrato, nroParcela);
            dijit.byId('valorFaturar').set('value', unmaskFixed(valorFaturar, 2));
            dijit.byId('valorFaturar').value = valorFaturar;
            dijit.byId('valorFaturar').old_value = valorFaturar;

            var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorFaturar, nroParcela);
            dijit.byId('edParcelaLiquida')._onChangeActive = false;
            dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
            dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida')._onChangeActive = true;

            dijit.byId('valorLiquidoGrid')._onChangeActive = false;
            dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
            dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
            dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
            dijit.byId('valorLiquidoGrid')._onChangeActive = true;

            var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(calcularValorLiquidoCursoGrid(), nroParcelas);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
            dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
            dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
            dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;
            onChangeActive(true);
            return false;
        }
        var totalDescontosValor = parseFloat(dojo.byId('totalValorDesconto').value);
        var totalDescontosPercentual = parseFloat(dojo.byId('totalPorcentagemDesconto').value);
        var totalDescontoTrasformado = 0;
        var totalGeralDesconto = 0;

        totalDescontoTrasformado = parseFloat(valorContrato) * (parseFloat(totalDescontosPercentual) / 100);
        var vlBaseDesc = parseFloat(valorContrato) - totalDescontoTrasformado;

        //desconto
        //%Desconto = 100-((Nº de Parcelas x Valor da Parcela)/Valor Cursox100),
        //desconto = 100 - (((parseInt(nroParcela) * parseFloat(parcela)) / parseFloat(valorCurso)) * 100);
        desconto = ((vlBaseDesc - parseFloat(valorLiquido)) * 100) / vlBaseDesc;
        desconto = parseFloat(desconto).toFixed(4);

        //consite o desconto segundo os parametros da escola
        var valorDesconto = 0;
        if (eval(desconto) > 0)
            valorDesconto = (parseFloat(vlBaseDesc) * (parseFloat(desconto) / 100));
        totalGeralDesconto = parseFloat(totalDescontosValor) + parseFloat(totalDescontoTrasformado) + valorDesconto;
        //var totalDescontosAplicados = calcularTodosDescontosERetornarValor(valorCurso);
        //calcula o valor do curso quando e alterado o valor a faturar.        
        var valorCusroCal = unmaskFixed((parseFloat(valorLiquido) - (parseFloat(divida)) + parseFloat(totalGeralDesconto)), 2);

        if (valorCusroCal > valorContrato) {

            var valorFaturar = calcularERetornarValorFaturar(valorContrato, nroParcela);
            var compValorFaturar = dijit.byId('valorFaturar');
            compValorFaturar._onChangeActive = false;
            compValorFaturar.set('value', maskFixed(valorFaturar, 2));
            dijit.byId('valorFaturar').old_value = valorFaturar;
            compValorFaturar._onChangeActive = true;

            var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorFaturar, nroParcela);

            dijit.byId('valorLiquidoGrid')._onChangeActive = false;
            dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
            dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
            dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
            dijit.byId('valorLiquidoGrid')._onChangeActive = true;

            var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(calcularValorLiquidoCursoGrid(), nroParcela);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
            dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
            dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
            dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;

            dijit.byId('edParcelaLiquida')._onChangeActive = false;
            dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
            dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida')._onChangeActive = true;

            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgValorLiquidoMaiorValorCurso);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
            onChangeActive(true);
            return false;
        }

        if (eval(valorContrato) > 0) {
            //valor parcela
            /*
                         Valor da Parcela= [Valor Líquido - (Valor da dívida (se não estiver marcada a opção de 1ª parcela) + Valor dos descontos, da aba descontos, que não incidam na baixa e nem na 1ª parcela)]/Nº de Parcelas. 
                 */
            parcela = calcularRetornarValorParcela(valorContrato, nroParcela, valorDesconto);
            var descPrimeiraParc = unmaskFixed(dojo.byId('descontoPrimeiraParcela').value, 2);

            if (hasValue(descPrimeiraParc) && descPrimeiraParc > parcela) {
                //restaura o valor anterior.
                var valorAFaturar = calculaRetornaValorLiquidoSemAbaDescontos(null, null, null);
                dijit.byId('valorFaturar').set('value', valorAFaturar);
                dijit.byId('valorFaturar').old_value = valorFaturar;

                var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorAFaturar, nroParcela);
                dijit.byId('valorLiquidoGrid')._onChangeActive = false;
                dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
                dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
                dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
                dijit.byId('valorLiquidoGrid')._onChangeActive = true;

                var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(calcularValorLiquidoCursoGrid(), nroParcelas);
                dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
                dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
                dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
                dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
                dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;

                dijit.byId('edParcelaLiquida')._onChangeActive = false;
                dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
                dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
                dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
                dijit.byId('edParcelaLiquida')._onChangeActive = true;

                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgNoaPermitParcelaLiquidaDescont1Parcela);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
                onChangeActive(true);
                return false;
            }

            //regra do desconto
            if (!consistirDescontoMaximo(valorDesconto, valorContrato)) {
                var valorAFaturar = calculaRetornaValorLiquidoSemAbaDescontos(null, null, null);

                dijit.byId('valorFaturar').set('value', valorAFaturar);
                dijit.byId('valorFaturar').old_value = valorFaturar;

                var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorAFaturar, nroParcela);

                dijit.byId('valorLiquidoGrid')._onChangeActive = false;
                dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
                dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
                dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
                dijit.byId('valorLiquidoGrid')._onChangeActive = true;

                var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(calcularValorLiquidoCursoGrid(), nroParcelas);
                dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
                dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
                dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
                dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
                dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;

                dijit.byId('edParcelaLiquida')._onChangeActive = false;
                dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
                dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
                dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
                dijit.byId('edParcelaLiquida')._onChangeActive = true;

                onChangeActive(true);
                return false;
            } else {

                dijit.byId('desconto').set('value', unmaskFixed(desconto, 2));
                dijit.byId('desconto').old_value = unmaskFixed(desconto, 2);
                valorDesconto = (desconto / 100) * parseFloat(valorContrato);
                dijit.byId('valorDesconto').set('value', unmaskFixed(valorDesconto, 2));
                dijit.byId('valorDesconto').old_value = unmaskFixed(valorDesconto, 2);

                dijit.byId('valorParcela').set('value', unmaskFixed(parcela, 2));
                dijit.byId('valorParcela').old_value = parcela;
                dijit.byId('valorParcela').value = parcela;


                dijit.byId('edValParcela').set('value', unmaskFixed(parcela, 2));
                dijit.byId('edValParcela').old_value = parcela;
                dijit.byId('edValParcela').value = parcela;
            }
        }
        onChangeActive(true);
        return true;
    } catch (e) {
        postGerarLog(e);
    }
}


function calcularValorLiquidoCurso(valorLiquido, nroParcela) {
    try {
        apresentaMensagem("apresentadorMensagemMat", null, false);
        onChangeActive(false);
        var desconto = 0;
        var valorCurso = 0;
        var divida = 0;
        var parcela = 0;
        var pcDesconto = dijit.byId('descontoGrid').get('value');
        var valorDesconto = dijit.byId("valorDescontoGrid").get('value');
        valorDesconto = unmaskFixed(valorDesconto, 2);
        //pegando valor da dívida
        var divida = dijit.byId('divida').get('value');
        if (!isNaN(divida) && divida != "" && !dijit.byId("ckPrimeiraParcela").checked)
            divida = unmaskFixed(divida, 2);
        else
            divida = 0;

        valorCurso = dijit.byId('valorCursoGrid').get('value');
        if (!consistirValorCurso(valorLiquido, valorCurso, divida)) {
            var valorFaturar = calcularERetornarValorFaturarCurso(valorCurso, nroParcela);
            dijit.byId('valorFaturar').set('value', unmaskFixed(valorFaturar, 2));
            dijit.byId('valorFaturar').value = valorFaturar;
            dijit.byId('valorFaturar').old_value = valorFaturar;


            onChangeActive(true);
            return false;
        }
        var totalDescontosValor = parseFloat(dojo.byId('totalValorDesconto').value);
        var totalDescontosPercentual = parseFloat(dojo.byId('totalPorcentagemDesconto').value);
        var totalDescontoTrasformado = 0;
        var totalGeralDesconto = 0;

        totalDescontoTrasformado = parseFloat(valorCurso) * (parseFloat(totalDescontosPercentual) / 100);
        var vlBaseDesc = parseFloat(valorCurso) - totalDescontoTrasformado;

        //desconto
        //%Desconto = 100-((Nº de Parcelas x Valor da Parcela)/Valor Cursox100),
        //desconto = 100 - (((parseInt(nroParcela) * parseFloat(parcela)) / parseFloat(valorCurso)) * 100);
        desconto = ((vlBaseDesc - parseFloat(valorLiquido)) * 100) / vlBaseDesc;
        desconto = parseFloat(desconto).toFixed(4);

        //consite o desconto segundo os parametros da escola
        var valorDesconto = 0;
        if (eval(desconto) > 0)
            valorDesconto = (parseFloat(vlBaseDesc) * (parseFloat(desconto) / 100));
        totalGeralDesconto = parseFloat(totalDescontosValor) + parseFloat(totalDescontoTrasformado) + valorDesconto;
        //var totalDescontosAplicados = calcularTodosDescontosERetornarValor(valorCurso);
        //calcula o valor do curso quando e alterado o valor a faturar.        
        var valorCusroCal = unmaskFixed((parseFloat(valorLiquido) - (parseFloat(divida)) + parseFloat(totalGeralDesconto)), 2);

        if (valorCusroCal > valorCurso) {
            var valorFaturar = calcularERetornarValorFaturarCurso(valorCurso, nroParcela);
            var compValorFaturar = dijit.byId('valorFaturar');
            compValorFaturar._onChangeActive = false;
            compValorFaturar.set('value', maskFixed(valorFaturar, 2));
            dijit.byId('valorFaturar').old_value = valorFaturar;
            compValorFaturar._onChangeActive = true;
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgValorLiquidoMaiorValorCurso);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
            onChangeActive(true);
            return false;
        }

        if (eval(valorCurso) > 0) {
            //valor parcela
            /*
                         Valor da Parcela= [Valor Líquido - (Valor da dívida (se não estiver marcada a opção de 1ª parcela) + Valor dos descontos, da aba descontos, que não incidam na baixa e nem na 1ª parcela)]/Nº de Parcelas. 
                 */
            parcela = calcularRetornarValorParcela(valorCurso, nroParcela, valorDesconto);
            var descPrimeiraParc = unmaskFixed(dojo.byId('descontoPrimeiraParcela').value, 2);

            if (hasValue(descPrimeiraParc) && descPrimeiraParc > parcela) {
                //restaura o valor anterior.
                var valorAFaturar = calculaRetornaValorLiquidoSemAbaDescontosCurso(null, null, null);
                dijit.byId('valorFaturar').set('value', valorAFaturar);
                dijit.byId('valorFaturar').old_value = valorFaturar;
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgNoaPermitParcelaLiquidaDescont1Parcela);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb, true);
                onChangeActive(true);
                return false;
            }

            //regra do desconto
            if (!consistirDescontoMaximo(valorDesconto, valorCurso)) {
                var valorAFaturar = calculaRetornaValorLiquidoSemAbaDescontosCurso(null, null, null);

                dijit.byId('valorFaturar').set('value', valorAFaturar);
                dijit.byId('valorFaturar').old_value = valorFaturar;
                onChangeActive(true);
                return false;
            } else {

                dijit.byId('descontoGrid').set('value', unmaskFixed(desconto, 2));
                dijit.byId('descontoGrid').old_value = unmaskFixed(desconto, 2);
                valorDesconto = (desconto / 100) * parseFloat(valorCurso);
                dijit.byId('valorDescontoGrid').set('value', unmaskFixed(valorDesconto, 2));
                dijit.byId('valorDescontoGrid').old_value = unmaskFixed(valorDesconto, 2);

                dijit.byId('valorParcelaGrid').set('value', unmaskFixed(parcela, 2));
                dijit.byId('valorParcelaGrid').old_value = parcela;
                dijit.byId('valorParcelaGrid').value = parcela;
            }
        }
        onChangeActive(true);
        return true;
    } catch (e) {
        postGerarLog(e);
    }
}

function calcularTodosDescontosERetornarValor(valorCurso) {
    var totalDescontosValor = parseFloat(dojo.byId('totalValorDesconto').value);
    var totalDescontosPercentual = parseFloat(dojo.byId('totalPorcentagemDesconto').value);
    var totalDescontoTrasformado = 0;
    var totalGeralDesconto = 0;

    totalDescontoTrasformado = parseFloat(valorCurso) * (parseFloat(totalDescontosPercentual) / 100);
    var vlBaseDesc = parseFloat(valorCurso) - totalDescontoTrasformado;

    //desconto
    //%Desconto = 100-((Nº de Parcelas x Valor da Parcela)/Valor Cursox100),
    //desconto = 100 - (((parseInt(nroParcela) * parseFloat(parcela)) / parseFloat(valorCurso)) * 100);
    desconto = ((vlBaseDesc - parseFloat(valorCurso)) * 100) / vlBaseDesc;
    desconto = parseFloat(desconto).toFixed(4);

    //consite o desconto segundo os parametros da escola
    var valorDesconto = 0;
    if (eval(desconto) > 0)
        valorDesconto = (parseFloat(vlBaseDesc) * (parseFloat(desconto) / 100));

    totalGeralDesconto = parseFloat(totalDescontosValor) + parseFloat(totalDescontoTrasformado) + valorDesconto;
    return totalGeralDesconto;
}

function aplicarDescontosConcedidosAluno(desconto, valorDescontoReais) {
    try {
        onChangeActive(false);
        var valorDescontoPorcentagem = 0;
        var valorDescontoMoeda = 0;

        dojo.byId('descontoReais').value = 0;
        var valorCurso = dijit.byId('valorCurso').get('value');
        if (!isNaN(valorCurso) && valorCurso != null)
            valorCurso = unmaskFixed(valorCurso, 2);

        //desconto porcentagem
        if (!isNaN(desconto) && desconto != "")
            desconto = parseFloat(desconto).toFixed(4).toString().replace(',', '.');

        //desconto valor 
        if (!isNaN(valorDescontoReais) && valorDescontoReais != "")
            valorDescontoReais = unmaskFixed(valorDescontoReais, 2);

        //calcula a porcentagem do desconto se ele for zero ou " "
        if (eval(valorDescontoReais) > 0 && eval(valorCurso) > 0) {
            desconto = (parseFloat(valorDescontoReais) / parseFloat(valorCurso)) * 100;
            dijit.byId('desconto').set('value', unmaskFixed(desconto, 2));
            dijit.byId('desconto').old_value = unmaskFixed(desconto, 2);
            dijit.byId('valorDesconto').set('value', unmaskFixed(valorDescontoReais, 2));
            dijit.byId('valorDesconto').old_value = unmaskFixed(valorDescontoReais, 2);
        }

        //calcula o valor desconto
        if ((eval(desconto) >= 0) && eval(valorCurso) > 0) {
            desconto = (parseFloat(desconto) / 100);
            valorDescontoPorcentagem = (parseFloat(valorCurso) * parseFloat(desconto));
            valorDescontoMoeda = unmaskFixed(valorDescontoPorcentagem, 2);
            dijit.byId('valorDesconto').set('value', valorDescontoMoeda);
            dijit.byId('valorParcela').old_value = valorDescontoMoeda;
            desconto = desconto * 100;
            dijit.byId('desconto').set('value', unmaskFixed(desconto, 2));
            dijit.byId('desconto').old_value = unmaskFixed(desconto, 2);
        }

        //valor da parcela --- valor da parcela= (valor do curso - valor desconto)/nº de parcelas(valor 1 se não informado)
        valorDescontoMoeda = parseFloat(valorDescontoPorcentagem).toFixed(2);
        var nroParcelas = dijit.byId('parcelas').get('value');
        var valorParcela = calcularRetornarValorParcela(valorCurso, nroParcelas, parseFloat(valorDescontoMoeda));
        dijit.byId('valorParcela').set('value', unmaskFixed(valorParcela, 2));
        dijit.byId('valorParcela').value = valorParcela;
        dijit.byId('valorParcela').old_value = valorParcela;

        dijit.byId('edValParcela').set('value', unmaskFixed(valorParcela, 2));
        dijit.byId('edValParcela').value = valorParcela;
        dijit.byId('edValParcela').old_value = valorParcela;

        valorDescontoPorcentagem = unmaskFixed(valorDescontoPorcentagem, 2);
        dojo.byId('descontoReais').value = desconto;
        //calcular a parcela líquida
        if (eval(valorCurso) >= 0 && eval(valorParcela) >= 0) {
            //calcular valores a faturar 
            var valorLiquido = calcularERetornarValorFaturar(valorCurso, nroParcelas);
            dijit.byId("valorFaturar")._onChangeActive = false;
            dijit.byId('valorFaturar').set('value', valorLiquido);
            dijit.byId('valorFaturar').old_value = valorLiquido;
            dijit.byId("valorFaturar")._onChangeActive = true;


            

            var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorLiquido, nroParcelas);
            dijit.byId('edParcelaLiquida')._onChangeActive = false;
            dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
            dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida')._onChangeActive = true;

            dijit.byId('valorLiquidoGrid')._onChangeActive = false;
            dijit.byId('valorLiquidoGrid').set('value', unmaskFixed(calcularValorLiquidoCursoGrid(), 2));
            dijit.byId('valorLiquidoGrid').value = calcularValorLiquidoCursoGrid();
            dijit.byId('valorLiquidoGrid').old_value = (calcularValorLiquidoCursoGrid());
            dijit.byId('valorLiquidoGrid')._onChangeActive = true;

            var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(calcularValorLiquidoCursoGrid(), nroParcelas);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
            dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
            dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
            dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;

        }

        onChangeActive(true);
    } catch (e) {
        postGerarLog(e);
    }
}

function aplicarDescontosConcedidosAlunoProfissionalInformatica(desconto, valorDescontoReais) {
    try {
        onChangeActive(false);
        var valorDescontoPorcentagem = 0;
        var valorDescontoMoeda = 0;

        dojo.byId('descontoReais').value = 0;
        var valorContrato = dijit.byId('vl_contrato').get('value');
        if (!isNaN(valorContrato) && valorContrato != null)
            valorContrato = unmaskFixed(valorContrato, 2);

        //desconto porcentagem
        if (!isNaN(desconto) && desconto != "")
            desconto = removedecimal(parseFloat(desconto).toFixed(4).toString());

        //desconto valor 
        if (!isNaN(valorDescontoReais) && valorDescontoReais != "")
            valorDescontoReais = unmaskFixed(valorDescontoReais, 2);

        //calcula a porcentagem do desconto se ele for zero ou " "
        if (eval(valorDescontoReais) > 0 && eval(valorContrato) > 0) {
            desconto = (parseFloat(valorDescontoReais) / parseFloat(valorContrato)) * 100;
            dijit.byId('desconto').set('value', unmaskFixed(desconto, 4));
            dijit.byId('desconto').old_value = unmaskFixed(desconto, 4);
            dijit.byId('valorDesconto').set('value', unmaskFixed(valorDescontoReais, 2));
            dijit.byId('valorDesconto').old_value = unmaskFixed(valorDescontoReais, 2);
        }
        else {
            //calcula o valor desconto
            if ((eval(desconto) >= 0) && eval(valorContrato) > 0) {
                desconto = (parseFloat(desconto) / 100);
                valorDescontoPorcentagem = (parseFloat(valorContrato) * parseFloat(desconto));
                valorDescontoMoeda = unmaskFixed(valorDescontoPorcentagem, 2);
                dijit.byId('valorDesconto').set('value', valorDescontoMoeda);
                //dijit.byId('valorParcela').old_value = valorDescontoMoeda;
                //dijit.byId('edValParcela').old_value = valorDescontoMoeda;
                desconto = desconto * 100;
                dijit.byId('desconto').set('value', unmaskFixed(desconto, 4));
                dijit.byId('desconto').old_value = unmaskFixed(desconto, 4);
            }
        }
        //valor da parcela --- valor da parcela= (valor do curso - valor desconto)/nº de parcelas(valor 1 se não informado)
        valorDescontoMoeda = parseFloat(valorDescontoPorcentagem).toFixed(2);

        var nroParcelas = dijit.byId('parcelas').get('value');
        if (dijit.byId("ckMultipla").checked === true) {
            nroParcelas = calculaNumeroParcela();
        } else {
            nroParcelas = unmaskFixed(dijit.byId('parcelas').get('value'), 0);
        }
        var valorParcela = calcularRetornarValorParcela(valorContrato, nroParcelas, parseFloat(valorDescontoMoeda));
        dijit.byId('valorParcela').set('value', unmaskFixed(valorParcela, 2));
        dijit.byId('valorParcela').value = valorParcela;
        dijit.byId('valorParcela').old_value = valorParcela;

        dijit.byId('edValParcela').set('value', unmaskFixed(valorParcela, 2));
        dijit.byId('edValParcela').value = valorParcela;
        dijit.byId('edValParcela').old_value = valorParcela;

        valorDescontoPorcentagem = unmaskFixed(valorDescontoPorcentagem, 2);
        dojo.byId('descontoReais').value = desconto;
        //calcular a parcela líquida
        if (eval(valorContrato) >= 0 && eval(valorParcela) >= 0) {
            //calcular valores a faturar 
            var valorLiquido = calcularERetornarValorFaturar(valorContrato, nroParcelas);
            dijit.byId("valorFaturar")._onChangeActive = false;
            dijit.byId('valorFaturar').set('value', valorLiquido);
            dijit.byId('valorFaturar').old_value = valorLiquido;
            dijit.byId("valorFaturar")._onChangeActive = true;

            var valorParcelaLiquida = calcularRetornarParcelaLiquida(valorLiquido, nroParcelas);
            dijit.byId('edParcelaLiquida')._onChangeActive = false;
            dijit.byId('edParcelaLiquida').set('value', unmaskFixed(valorParcelaLiquida, 2));
            dijit.byId('edParcelaLiquida').value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida').old_value = valorParcelaLiquida;
            dijit.byId('edParcelaLiquida')._onChangeActive = true;
        }

        onChangeActive(true);
    } catch (e) {
        postGerarLog(e);
    }
}

function aplicarDescontosConcedidosAlunoCurso(desconto, valorDescontoReais) {
    try {
        onChangeActive(false);
        var valorDescontoPorcentagem = 0;
        var valorDescontoMoeda = 0;

        dojo.byId('descontoReais').value = 0;
        var valorCurso = dijit.byId('valorCursoGrid').get('value');
        if (!isNaN(valorCurso) && valorCurso != null)
            valorCurso = unmaskFixed(valorCurso, 2);

        //desconto porcentagem
        if (!isNaN(desconto) && desconto != "")
            desconto = removedecimal(parseFloat(desconto).toFixed(4).toString());

        //desconto valor 
        if (!isNaN(valorDescontoReais) && valorDescontoReais != "")
            valorDescontoReais = unmaskFixed(valorDescontoReais, 2);

        //calcula a porcentagem do desconto se ele for zero ou " "
        if (eval(valorDescontoReais) > 0 && eval(valorCurso) > 0) {
            desconto = (parseFloat(valorDescontoReais) / parseFloat(valorCurso)) * 100;
            dijit.byId('descontoGrid').set('value', unmaskFixed(desconto, 2));
            dijit.byId('descontoGrid').old_value = unmaskFixed(desconto, 2);
            dijit.byId('valorDescontoGrid').set('value', unmaskFixed(valorDescontoReais, 2));
            dijit.byId('valorDescontoGrid').old_value = unmaskFixed(valorDescontoReais, 2);
        }

        //calcula o valor desconto
        if ((eval(desconto) >= 0) && eval(valorCurso) > 0) {
            desconto = (parseFloat(desconto) / 100);
            valorDescontoPorcentagem = (parseFloat(valorCurso) * parseFloat(desconto));
            valorDescontoMoeda = unmaskFixed(valorDescontoPorcentagem, 2);
            dijit.byId('valorDescontoGrid').set('value', valorDescontoMoeda);
            dijit.byId('valorParcelaGrid').old_value = valorDescontoMoeda;
            desconto = desconto * 100;
            dijit.byId('descontoGrid').set('value', unmaskFixed(desconto, 2));
            dijit.byId('descontoGrid').old_value = unmaskFixed(desconto, 2);
        }

        //valor da parcela --- valor da parcela= (valor do curso - valor desconto)/nº de parcelas(valor 1 se não informado)
        valorDescontoMoeda = parseFloat(valorDescontoPorcentagem).toFixed(2);
        var nroParcelas = dijit.byId('parcelasCurso').get('value');
        var valorParcela = calcularRetornarValorParcela(valorCurso, nroParcelas, parseFloat(valorDescontoMoeda));
        dijit.byId('valorParcelaGrid').set('value', unmaskFixed(valorParcela, 2));
        dijit.byId('valorParcelaGrid').value = valorParcela;
        dijit.byId('valorParcelaGrid').old_value = valorParcela;
        valorDescontoPorcentagem = unmaskFixed(valorDescontoPorcentagem, 2);
        dojo.byId('descontoReais').value = desconto;
        //calcular a parcela líquida
        if (eval(valorCurso) >= 0 && eval(valorParcela) >= 0) {
            //calcular valores a faturar 
            var valorLiquido = calcularERetornarValorFaturar(valorCurso, nroParcelas);
            dijit.byId("valorLiquidoGrid")._onChangeActive = false;
            dijit.byId('valorLiquidoGrid').set('value', valorLiquido);
            dijit.byId('valorLiquidoGrid').old_value = valorLiquido;
            dijit.byId("valorLiquidoGrid")._onChangeActive = true;

            var valorParcelaLiquidaGridCurso = calcularRetornarParcelaLiquidaCurso(valorLiquido, nroParcelas);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = false;
            dijit.byId('valorParcelaLiquidaGrid').set('value', unmaskFixed(valorParcelaLiquidaGridCurso, 2));
            dijit.byId('valorParcelaLiquidaGrid').value = valorParcelaLiquidaGridCurso;
            dijit.byId('valorParcelaLiquidaGrid').old_value = (valorParcelaLiquidaGridCurso);
            dijit.byId('valorParcelaLiquidaGrid')._onChangeActive = true;
        }

        onChangeActive(true);
    } catch (e) {
        postGerarLog(e);
    }
}

function atualizaValoresMatricula(contrato, edit) {
    try {
        // Calcula o valor da parcela e parcela liquida no lugar de pegar do banco, para ter os valores sem arrendondamento:
        var valorCurso = dijit.byId("valorCurso").get('value');
        valorCurso = unmaskFixed(valorCurso, 2);

        var valorDesconto = dijit.byId("valorDesconto").get('value');
        valorDesconto = unmaskFixed(valorDesconto, 2);

        var nroParcelas = getNroParcelas("parcelas");
        //var valorParcela = contrato.vl_parcela_contrato;
        var valorParcela = valorCurso / nroParcelas;
        var valorParcelaComDesconto = calcularRetornarValorParcela(valorCurso, nroParcelas, valorDesconto);
        dijit.byId("valorParcela").set('value', unmaskFixed(valorParcela, 2));
        dijit.byId("valorParcela").value = valorParcela;
        dijit.byId('valorParcela').old_value = valorParcela;

        var valorFaturar = calcularERetornarValorFaturar(valorCurso, nroParcelas);

        dijit.byId("valorFaturar").set('value', valorFaturar);
        dijit.byId('valorFaturar').old_value = valorFaturar;
    } catch (e) {
        postGerarLog(e);
    }
}

function calcularValoresDescontoPorPecentualOrValor(pc_desconto, vl_desconto_contrato, pc_total_desconto_aplicado, valorBaseCalc, aditamento) {
    if (aditamento) {
        var vlAnteriorAdt = dijit.byId('VlAnteriorAdt').value;
        if (!hasValue(vlAnteriorAdt))
            valorBaseCalc = vlAnteriorAdt;
    }
    if (parseFloat(pc_desconto) > 0) {
        var pc_desc = (pc_desconto).toString().replace(',', '.');
        pc_desc = parseFloat(pc_desc).toFixed(2);
        if (somar_desconto)
            pc_total_desconto_aplicado = parseFloat(pc_total_desconto_aplicado) + parseFloat(pc_desc);
        else {
            if (pc_total_desconto_aplicado > 0)
                pc_total_desconto_aplicado = 100 - ((1 - parseFloat(pc_total_desconto_aplicado) / 100) * (1 - parseFloat(pc_desc) / 100)) * 100;
            else
                pc_total_desconto_aplicado = 100 - (1 - parseFloat(pc_desc) / 100) * 100;
        }
    }

    if (parseFloat(vl_desconto_contrato) > 0) {
        var vl_desconto = (vl_desconto_contrato).toString().replace(',', '.');
        vl_desconto = parseFloat(vl_desconto).toFixed(2);
        var pc_desc = (parseFloat(vl_desconto) / parseFloat(valorBaseCalc)) * 100;
        if (somar_desconto) {
            pc_total_desconto_aplicado = parseFloat(pc_total_desconto_aplicado) + parseFloat(pc_desc);
        } else {
            if (pc_total_desconto_aplicado > 0)
                pc_total_desconto_aplicado = 100 - ((1 - parseFloat(pc_total_desconto_aplicado) / 100) * (1 - parseFloat(pc_desc) / 100)) * 100;
            else
                pc_total_desconto_aplicado = 100 - (1 - parseFloat(pc_desc) / 100) * 100;
        }
        //vl_total_desconto_aplicado = parseFloat(vl_total_desconto_aplicado) + parseFloat(vl_desconto);
    }
    return pc_total_desconto_aplicado;
}

function verificarAditamentoBolsa(origemVerifData, msg, verificarData) {
    var tipoAditamento = dijit.byId('tipoAditamento');
    var gridAditamento = dijit.byId("gridAditamento");
    var alterouDataIniAdt = false;
    var editBD = gridAditamento.editAditamento;
    //if (hasValue(editBD) && hasValue(editBD.dtaInicioAditamento) && editBD.dtaInicioAditamento != dojo.byId("dtInicioAdto").value)
    //    alterouDataIniAdt = true;
    var mensagensWeb = new Array();
    if (verificarData) {
        var existeAditamentoAnterior = false;
        if (hasValue(gridAditamento.store.objectStore.data) && gridAditamento.store.objectStore.data.length > 0) {
            var existeAditamento = jQuery.grep(gridAditamento.store.objectStore.data, function (aditivo) {
                if (hasValue(aditivo.id_tipo_aditamento) && aditivo.id_tipo_aditamento > 0)
                    return true;
            });
            existeAditamentoAnterior = existeAditamento != null && existeAditamento.length > 0 ? true : false;
        }
        if (existeAditamentoAnterior && !alterouDataIniAdt) {
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msg);
            apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
            //tipoAditamento._onChangeActive = false;
            if (!origemVerifData)
                tipoAditamento.reset();
            else
                dijit.byId("dtInicioAdto").reset();
        }
        if (!existeAditamentoAnterior)
            return true;
    } else {
        if (!alterouDataIniAdt && tipoAditamento.value != ADITIVO_BOLSA && hasValue(editBD) && editBD.id_tipo_aditamento == ADITIVO_BOLSA) {
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msg);
            apresentaMensagem('apresentadorMensagemMat', mensagensWeb);
            tipoAditamento.reset();
        }
    }
    return alterouDataIniAdt;
}

function buscarAjusteManualAditamentosAnteriores() {
    var gridAditamento = dijit.byId("gridAditamento");
    var ajuste_manual_contrato = false;
    var alterouDataIniAdt = false;
    var editBD = gridAditamento.editAditamento;
    var listaAditamentos = jQuery.grep(gridAditamento.store.objectStore.data, function (value) {
        return hasValue(value.id_tipo_aditamento) && value.id_tipo_aditamento > 0
    });
    if (hasValue(editBD) && hasValue(editBD.dtaInicioAditamento) && editBD.dtaInicioAditamento != dojo.byId("dtInicioAdto").value)
        alterouDataIniAdt = true;
    if (hasValue(gridAditamento)) {
        if (hasValue(listaAditamentos) && listaAditamentos.length > 1) {
            if (alterouDataIniAdt) {
                if (hasValue(listaAditamentos[0].id_tipo_aditamento))
                    ajuste_manual_contrato = listaAditamentos[0].id_ajuste_manual;
            } else
                if (hasValue(listaAditamentos[1].id_tipo_aditamento))
                    ajuste_manual_contrato = listaAditamentos[1].id_ajuste_manual;

        } else
            if (hasValue(listaAditamentos) && listaAditamentos.length > 0 &&
                hasValue(listaAditamentos[0].id_tipo_aditamento)) {
                ajuste_manual_contrato = listaAditamentos[0].id_ajuste_manual;
            }
    }
    dojo.byId("id_ajuste_manual_anterior").value = ajuste_manual_contrato ? 1 : 0;
}

function verificarContratoComAditamentoEVoltarUltimoAditivo(event) {
    if (event == false) {
        if (dijit.byId('tipoContratoAdto').aditamento && hasValue(dijit.byId("gridAditamento").editAditamento) && dijit.byId("gridAditamento").editAditamento.id_ajuste_manual) {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_ERRO, msgErrorDesmarcarAjusteManualAditamento);
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            loadDataAditamento(dijit.byId("gridAditamento").editAditamento, false);
        }
    }
}

function alterarNumeroTituloParcelasGeradas(listaTodosTitulos, parcelasGeradas) {
    for (var i = 0; i < parcelasGeradas.length; i++) {
        parcelasGeradas[i].nm_parcela_titulo = 0;
    }

    var titulosFechados = jQuery.grep(listaTodosTitulos, function (value) {
        return value.id_status_titulo == 2 // status titulo fechado;
    });
    return calcularNumeroParcelasMensalidades(titulosFechados, parcelasGeradas);
}

function calcularNumeroParcelasMensalidades(titulosFechados, parcelasGeradas) {
    //Números títulos mensalidades
    var qtdTitulos = 0;
    if (hasValue(parcelasGeradas)) {
        qtdTitulos = parcelasGeradas.length;
        if (hasValue(titulosFechados))
            qtdTitulos += titulosFechados.length;
        for (var j = 0; j < parcelasGeradas.length; j++) {
            var nm_parcela = 0;
            for (var i = 0; i < qtdTitulos; i++) {
                var numValido = true;
                if (titulosFechados != null && existeTituloFechadoComNmParcela(titulosFechados, (i + 1)))
                    numValido = false;
                if (parcelasGeradas != null && existeTituloAbertoComNmParcela(parcelasGeradas, (i + 1)))
                    numValido = false;
                if (numValido) {
                    nm_parcela = (i + 1);
                    break;
                }
            }
            parcelasGeradas[j].nm_parcela_titulo = nm_parcela;
        }
    }
    return parcelasGeradas;
}

function existeTituloFechadoComNmParcela(titulosFechados, nm_parcela_titulo) {
    var retornoFiltro = jQuery.grep(titulosFechados, function (value) {
        return value.nm_parcela_titulo == nm_parcela_titulo;
    });

    if (hasValue(retornoFiltro))
        return true;
    return false;
}

function existeTituloAbertoComNmParcela(parcelasGeradas, nm_parcela_titulo) {
    var retornoFiltro = jQuery.grep(parcelasGeradas, function (value) {
        return value.nm_parcela_titulo == nm_parcela_titulo;
    });

    if (hasValue(retornoFiltro))
        return true;
    return false;
}

function simuladorAditamento(refaz_titulos) {
    require([
        "dojo/_base/xhr",
        "dojox/json/ref"],
        function (xhr, ref) {
            try {

                //Não gerar títulos quando o aditivo for "Reajuste Anual".
                if ((!hasValue(dijit.byId('tipoAditamento').value) ||
                    dijit.byId('tipoAditamento').value != REAJUSTE_ANUAL_ADITIVO ) && !dojo.byId("ckManual").checked) {

                    if (dijit.byId('tipoAditamento').value == ADICIONAR_PARCELAS)
                        dijit.byId("gridDescontoAdt").setStore(new dojo.data.ObjectStore({ objectStore: new dojo.store.Memory({ data: pegarDescontoMatriculaOuDescontoAnteriorAditamento() }) }));

                    var titulos = montarTitulo(RETORNARTITULOADITAMENTO);
                    var taxaMatricula = new montarTaxaMatricula();
                    var valorParcela = dijit.byId("valorParcela").get('value');
                    valorParcela = unmaskFixed(valorParcela, 2);
                    var valorDescontoParcela = dijit.byId("descontoPrimeiraParcela").get('value');
                    valorDescontoParcela = unmaskFixed(valorDescontoParcela, 2);
                    var valorCurso = dijit.byId("valorCurso").get('value');
                    valorCurso = unmaskFixed(valorCurso, 2);
                    var divida = dijit.byId("divida").get('value');
                    divida = unmaskFixed(divida, 2);
                    var valorMatricula = dijit.byId("valorMatricula").get('value');
                    valorMatricula = unmaskFixed(valorMatricula, 2);
                    var desconto = dijit.byId("desconto").get('value');
                    desconto = unmaskFixed(desconto, 4);
                    var valorDesconto = dijit.byId("valorDesconto").get('value');
                    valorDesconto = unmaskFixed(valorDesconto, 2);
                    //if (!validarAditamentoCrud(dojo.window)) {
                    //    var tabs = dijit.byId("tabContainerMatricula");
                    //    var pane = dijit.byId("tagAditivo");
                    //    tabs.selectChild(pane);
                    //    return false;
                    //}
                    showCarregando();
                    xhr.post({
                        url: Endereco() + "/api/escola/simuladorAditamento",
                        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                        handleAs: "json",
                        postData: ref.toJson(
                            {
                                //dt_final_contrato: dtaFinalMat,
                                //dt_matricula_contrato: dtaMatricula,
                                id_ajuste_manual: dojo.byId("ckManual").checked,
                                cd_tipo_financeiro: dijit.byId("tipoDocumento").value,
                                nm_dia_vcto: dojo.byId("dia").value,
                                nm_mes_vcto: dojo.byId("mes").value,
                                nm_ano_vcto: dojo.byId("ano").value,
                                nm_parcelas_mensalidade: dojo.byId("parcelas").value,
                                vl_curso_contrato: valorCurso,
                                vl_matricula_contrato: valorMatricula,
                                vl_parcela_contrato: valorParcela,
                                vl_desconto_contrato: valorDesconto,
                                pc_desconto_contrato: desconto,
                                vl_divida_contrato: divida,
                                vl_desc_primeira_parcela: valorDescontoParcela,
                                titulos: titulos,
                                aditamentoMaxData: montarAditamento(),
                                id_tipo_aditamento: dijit.byId("tipoAditamento").value,
                                pc_responsavel_contrato: dijit.byId("percentualResponsavel").value,
                                pc_desconto_bolsa: obterPercentualDescontoAditamentoBolsa(),
                                DescontoContrato: pegarDescontoMatriculaOuDescontoAnteriorAditamento(),
                                valorSaldoMatricula: dijit.byId("vl_saldo_matricula").value,
                                gerarTitulos: refaz_titulos
                            })
                    }).then(function (data) {
                        try {
                            var gridTitulo = dijit.byId("gridTitulo");
                            simulacao = jQuery.parseJSON(data).retorno;
                            gerar_titulo = true;
                            setSimulacaoAditamento(simulacao);
                            showCarregando();
                        } catch (e) {
                            showCarregando();
                            postGerarLog(e);
                        }
                    },
                        function (error) {
                            showCarregando();
                            apresentaMensagem("apresentadorMensagemMat", error);
                        });
                }
            } catch (e) {
                showCarregando();
            }
        });
}

function setSimulacaoAditamento(simulacao) {

    if (hasValue(simulacao.nm_titulos_aditamento)) {
        dijit.byId('NroTitAdt')._onChangeActive = false;
        dijit.byId("NroTitAdt").set('value', simulacao.nm_titulos_aditamento);
        dijit.byId("NroTitAdt").oldValue = simulacao.nm_titulos_aditamento;
    }

    dijit.byId('valorAditivo')._onChangeActive = false;
    dijit.byId("valorAditivo").set('value', simulacao.vl_aditivo);
    dijit.byId("valorAditivo").oldValue = unmaskFixed(dijit.byId("vl_saldo_matricula").value, 2);

    if (hasValue(simulacao.vl_parcela_titulo_aditamento)) {
        dijit.byId('ValorParcAdic')._onChangeActive = false;
        dijit.byId("ValorParcAdic").set('value', simulacao.vl_parcela_titulo_aditamento);
        dijit.byId("ValorParcAdic").oldValue = simulacao.vl_parcela_titulo_aditamento;
    }

    ativaEventoOnChangeAditamento();
}

function existeAdtAdicionarParcelaBaixado() {
    require([
        "dojo/_base/xhr",
        "dojox/json/ref"],
        function (xhr, ref) {
            showCarregando();
            var titulos = montarTitulo(RETORNARTITULOADITAMENTO);

            xhr.post({
                url: Endereco() + "/api/escola/existeAdtAdicionarParcelaBaixado",
                headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                handleAs: "json",
                postData: ref.toJson(
                    {
                        titulos: titulos
                    })
            }).then(function (data) {
                try {
                    //var existeTituloAditamentoBaixado = jQuery.parseJSON(data).retorno;

                    //if (existeTituloAditamentoBaixado)
                    //    desabilitaAditamentoBaixado();
                    showCarregando();
                    habilitarAditamentoBaixado();
                    abrirDescontoAdt();
                } catch (e) {
                    showCarregando();
                    desabilitaAditamentoBaixado();

                    var mensagensWeb = new Array();
                    mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, error);
                    apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
                }
            }, function (error) {
                showCarregando();
                desabilitaAditamentoBaixado();
                var mensagensWeb = new Array();

                var objectError = error.response.data;
                var msgError = jQuery.parseJSON(objectError).MensagensWeb[0].stack;
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, msgError);
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            });
        });
}

function desabilitaAditamentoBaixado() {
    dijit.byId("valorAditivo").set("disabled", true);
    dijit.byId("NroTitAdt").set("disabled", true);
    dijit.byId("ValorParcAdic").set("disabled", true);
    dijit.byId("dtAdtVencInicial").set("disabled", true);
    //dijit.byId("VctoAdt").set("disabled", true);
}

function habilitarAditamentoBaixado() {
    dijit.byId("valorAditivo").set("disabled", false);
    dijit.byId("NroTitAdt").set("disabled", false);
    dijit.byId("ValorParcAdic").set("disabled", false);
    dijit.byId("dtAdtVencInicial").set("disabled", false);
    //dijit.byId("VctoAdt").set("disabled", false);
}

function abrirDescontoAdt() {
    try {
        //apresentaMensagem("apresentadorMensagemMat", '', false);
        var dataInicio = new Date(dojo.byId("ano").value + "/" + dojo.byId("mes").value + "/" + dojo.byId("dia").value);

        if (hasValue(dojo.byId("dia").value) && hasValue(dojo.byId("mes").value) && hasValue(dojo.byId("ano").value)) {

            if (!(dataInicio instanceof Date && !isNaN(dataInicio.valueOf()))) {
                var mensagensWeb = new Array();
                mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, "Data de opções de pagamento é invalida.");
                apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
            } else {
                getDataInicioAditivo();
                dijit.byId("gridDescontoAdt").update();
            }
        }
        else {
            var mensagensWeb = new Array();
            mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, msgInfCamposGerarDescontoAdt + getErrorCamposPreencher() + ".");
            apresentaMensagem("apresentadorMensagemMat", mensagensWeb);
        }
    } catch (e) {
        postGerarLog(e);
    }
}

function obterPercentualDescontoAditamentoBolsa() {
    var aditamento = dijit.byId("gridAditamento").editAditamento;

    //Aditamento Bolsa
    //{
    if ((dijit.byId("aditivobolsaPorcentual").value != "" || dijit.byId("aditivobolsaPorcentual").value != null) && dijit.byId('tipoAditamento').value == ADITIVO_BOLSA)
        return dijit.byId("aditivobolsaPorcentual").value;

    if (hasValue(aditamento) && hasValue(aditamento.AditamentoBolsa) && aditamento.AditamentoBolsa.length > 0)
        return aditamento.AditamentoBolsa[0].pc_bolsa;
    //}

    if (hasValue(dijit.byId("perc_bolsa").value)) return dijit.byId("perc_bolsa").value;
    else if (hasValue(dojo.byId("pc_desconto_anterior").value)) return dojo.byId("pc_desconto_anterior").value;

    return 0;
}

function ativaEventoOnChangeAditamento() {
    dijit.byId('NroTitAdt')._onChangeActive = true;
    dijit.byId('valorAditivo')._onChangeActive = true;
    dijit.byId('ValorParcAdic')._onChangeActive = true;

    dijit.byId("dtInicioAdto")._onChangeActive = true;
    dijit.byId("dtInicioAditamento")._onChangeActive = true;
    dijit.byId("dtAdtVencInicial")._onChangeActive = true;
    dijit.byId("VctoAdt")._onChangeActive = true;
}

function inativarEventoOnChangeAditamento() {
    dijit.byId('NroTitAdt')._onChangeActive = false;
    dijit.byId('valorAditivo')._onChangeActive = false;
    dijit.byId('ValorParcAdic')._onChangeActive = false;

    dijit.byId("dtInicioAdto")._onChangeActive = false;
    dijit.byId("dtInicioAditamento")._onChangeActive = false;
    dijit.byId("dtAdtVencInicial")._onChangeActive = false;
    dijit.byId("VctoAdt")._onChangeActive = false;
}

function obterDataEmissaoTitulo() {
    var date = new Date();
    var data_atual = dojo.date.locale.parse(date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear(), { formatLength: 'short', selector: 'date', locale: 'pt-br' })
    var dtInicioAdto = dojo.date.locale.parse(dojo.byId("dtInicioAditamento").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' })

    if (dtInicioAdto >= data_atual)
        return data_atual;
    return dtInicioAdto;
}

function validarDataInicioAditamento(tipo_aditamento) {
    require([
    "dojo/date",
    "dojo/ready"
    ], function (date, ready) {
        ready(function () {
            var gridAditamento = dijit.byId("gridAditamento");
            var editBD = gridAditamento.editAditamento;

            if (hasValue(editBD) && date.compare(dojo.date.locale.parse(dojo.byId("dtInicioAdto").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' }),
                new Date(editBD.dt_inicio_aditamento)) < 0) {

                bloquearTipoAditamento(msgErroDataInicioAdtMenor + "(" + new Date(editBD.dt_inicio_aditamento).getDate() + "/" + (new Date(editBD.dt_inicio_aditamento).getMonth() + 1) + "/" + new Date(editBD.dt_inicio_aditamento).getFullYear() + ").", true);

                dijit.byId('dtInicioAdto')._onChangeActive = false;
                dijit.byId('dtInicioAdto').set("value", null);
                dijit.byId('dtInicioAdto')._onChangeActive = true;
              
            }
            //else {
            //    existeAditamentoMesmaDataHistorico(tipo_aditamento, true)
            //}
        })
    })
}

//function existeAditamentoMesmaDataHistorico(tipo_aditamento, apresentar_msg) {
//    require([
//    "dojo/date",
//    "dojo/ready"
//    ], function (date, ready) {
//        ready(function () {
            
//            var gridAditamento = dijit.byId("gridAditamento");
//            var existeAditamento = null;

//            if (hasValue(gridAditamento.store.objectStore.data) && gridAditamento.store.objectStore.data.length > 0) {
//                existeAditamento = jQuery.grep(gridAditamento.store.objectStore.data, function (aditivo) {
//                    if (hasValue(aditivo.id_tipo_aditamento) && aditivo.id_tipo_aditamento == tipo_aditamento &&
//                        //COMPARAÇÃO DE DATA PARA VERIFICAR SE DATA DE INICIO ATUAL IGUAL A ALGUMA DATA NO HISTÓRICO.
//                        date.compare(new Date(aditivo.dt_inicio_aditamento), dojo.date.locale.parse(dojo.byId("dtInicioAdto").value, { formatLength: 'short', selector: 'date', locale: 'pt-br' })) == 0)
//                        return true;
//                });
//            }

//            var existe = hasValue(existeAditamento) ? true : false;
//            if (existe)
//                bloquearTipoAditamento(mesgErroDataAdtIgualHistorico, apresentar_msg);
//            else
//                habilitarTipoAditamento();
//        })
//    })
//}

function bloquearTipoAditamento(mensagemErro, apresentar_msg) {
    dijit.byId('tipoAditamento').set("disabled", true);

    if (apresentar_msg) {
        var mensagensWeb = new Array();
        mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, mensagemErro);
        apresentaMensagem("apresentadorMensagemMatAdt", mensagensWeb);
    }
}

function bloquearTipoAditamentoBolsa(mensagemErro, apresentar_msg) {
    dijit.byId('tipoAditamentoBolsa').set("disabled", true);

    if (apresentar_msg) {
        var mensagensWeb = new Array();
        mensagensWeb[0] = new MensagensWeb(MENSAGEM_AVISO, mensagemErro);
        apresentaMensagem("apresentadorMensagemMatAdt", mensagensWeb);
    }
}

function habilitarTipoAditamento() {
    dijit.byId('tipoAditamento').set("disabled", false);
    apresentaMensagem("apresentadorMensagemMatAdt", null);
}

function getLocalMovtoGeralOuCartaoMatricula(cd_tipo_financeiro) {
    dojo.xhr.get({
        url: Endereco() + "/api/financeiro/getAllLocalMovtoGeralOuCartao?cd_tipo_financeiro=" + cd_tipo_financeiro,
        preventCache: true,
        handleAs: "json",
        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() }
    }).then(function (data) {
        try {
            response = jQuery.parseJSON(data);
            loadSelectLocalMovimento(response.retorno, "edBanco", 'cd_local_movto', 'no_local_movto', 'nm_tipo_local');
        } catch (e) {
            postGerarLog(e);
        }

    }, function (error) {
        apresentaMensagem('apresentadorMensagem', error);
    });
}

function loadSelectLocalMovimento(items, link, idName, valueName, valueTipoLocalName, id) {
    require(["dojo/store/Memory", "dojo/_base/array"],
        function(Memory, Array) {
            var itemsCb = [];
            Array.forEach(items,
                function(value, i) {
                    itemsCb.push({
                        id: eval("value." + idName),
                        name: eval("value." + valueName),
                        nm_tipo_local: eval("value." + valueTipoLocalName)
                    });
                });
            var stateStore = new Memory({
                data: itemsCb
            });
            var componente = dijit.byId(link);

            componente._onChangeActive = false;
            componente.store = stateStore;
            if (hasValue(id))
                componente.set("value", id);
            componente._onChangeActive = true;
        });
}

function hasCartao() {
    return (dijit.byId("tipoDocumento").value == CARTAO);
}

function alterarLocalMovtoAplicarTaxaBancaria(titulosAlterarLocalMovto, titulosRollback) {
    var titulosGrid = dijit.byId('gridTitulo').store.objectStore.data;
    
    require([
        "dojo/_base/xhr",
        "dojox/json/ref"],
        function (xhr, ref) {
            showCarregando();
            var total_parcelas = dojo.byId("parcelas").value;
            apresentaMensagem("apresentadorMensagemMatAdt", null);
            
            xhr.post({
                url: Endereco() + "/api/escola/alterarLocalMovtoTitulos",
                headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },          
                postData: ref.toJson({
                    titulos: titulosGrid,//titulosAlterarLocalMovto,
                    nm_parcelas_mensalidade: total_parcelas
                })
            }).then(function (data) {
                hideCarregando();

                //titulos = $.parseJSON(data).retorno;
                titulosData = jQuery.parseJSON(data).retorno;
                
                
                    for (var i = 0; i < titulosData.length; i++) {
                        jQuery.grep(titulosGrid, function (titulo) {
                            if (((titulo.cd_titulo > 0 && titulo.cd_titulo == titulosData[i].cd_titulo ) ||
                                    (titulo.cd_titulo === 0 && titulo.nm_parcela_titulo === titulosData[i].nm_parcela_titulo)) &&
                                titulo.vl_saldo_titulo > 0 &&
                                titulo.vl_titulo == titulo.vl_saldo_titulo &&
                                titulo.vl_liquidacao_titulo === 0 &&
                                (titulo.possuiBaixa != undefined &&
                                    titulo.possuiBaixa != null &&
                                    titulo.possuiBaixa === false)) {
                                for (var z = 0; z < titulosAlterarLocalMovto.length; z++)
                                {
                                    if ((titulosData[i].cd_titulo > 0 &&
                                            titulosAlterarLocalMovto[z].cd_titulo == titulosData[i].cd_titulo) ||
                                        (titulosData[i].cd_titulo === 0 &&
                                            titulosAlterarLocalMovto[z].nm_parcela_titulo ===
                                            titulosData[i].nm_parcela_titulo)) {
                                        titulo.cd_local_movto = titulosData[i].cd_local_movto;
                                        titulo.pc_taxa_cartao = titulosData[i].pc_taxa_cartao;
                                        titulo.vl_taxa_cartao = titulosData[i].vl_taxa_cartao;
                                        titulo.nm_dias_cartao = titulosData[i].nm_dias_cartao;
                                        titulo.dt_vcto_titulo = titulosData[i].dt_vcto_titulo;
                                        titulo.dt_vcto = titulosData[i].dt_vcto;
                                        titulo.tituloEdit = true
                                    }
                                            
                                }
                                
                            }
                         });
                    }
                
               
                dijit.byId("gridTitulo").update();
                abriuTagTitulos = true; //Provocar a geração dos titulos

                //var dataStore = new ObjectStore({ objectStore: new Memory({ data: titulos }) });
                //gridTitulo.setStore(dataStore);

            }, function (error) {
                hideCarregando();
                rollbackLocalMovto(titulosRollback);

                if (error) {
                    apresentaMensagem("apresentadorMensagemMatAdt", error);
                }


            });
        });
}

function rollbackLocalMovto(titulosRollback) {
    var titulos = dijit.byId('gridTitulo').store.objectStore.data;
    for (var i = 0; i < titulosRollback.length; i++) {

        jQuery.grep(titulos, function (titulo) {
            if (titulo.cd_titulo == titulosRollback[i].cd_titulo) {
                titulo.cd_local_movto = titulosRollback[i].cd_local_movto;
                titulo.descLocalMovto = titulosRollback[i].descLocalMovto;
            }
        });

    }

    dijit.byId("gridTitulo").update();
}

function ativarDesativarCamposAditamentoOnClickNovo(desativaCampo, desativaBotaoNovoAdt) {
    dijit.byId("tipoAditamento").set("disabled", desativaCampo);
    dijit.byId('dtAdtVencInicial').setAttribute('disabled', desativaCampo);
    dijit.byId('dtInicioAditamento').setAttribute('disabled', desativaCampo);
    //dijit.byId('btnNovoAdto').set("disabled", desativaBotaoNovoAdt); 
}

function ativarTagAditamento(display) {
    dojo.byId("tgAditamento").style.display = display;
}

function resetAditamento() {

    inativarEventoOnChangeAditamento();
    dojo.byId("cd_aditamento").value = 0;

    dijit.byId("valorAditivo").reset();
    dijit.byId("NroTitAdt").reset();
    dijit.byId("ValorParcAdic").reset();
    dijit.byId("VctoAdt").reset();
    dijit.byId("tipoAditamento").reset();

    //dijit.byId("dtAdtVencInicial").reset();
    //dijit.byId("dtInicioAditamento").reset();
    dijit.byId("dtInicioAdto").set("value", null);
    dijit.byId("dtInicioAditamento").set("value", null);
    dijit.byId("dtAdtVencInicial").set("value", null);
    dijit.byId("VctoAdt").set("value", null);

    dijit.byId("NroTitAdt").oldValue = 0;
    dijit.byId("ValorParcAdic").oldValue = 0;
    ativaEventoOnChangeAditamento();

    dijit.byId("desconto").set("open", true);
    dijit.byId('tagDescontos').set('open', false);
    dijit.byId('idTagAditivoBolsa').set('open', false);
    dojo.byId("idTagAdiciParcela").style.display = "none";
    //dojo.byId("idTagMaterialContrato").style.display = "none";
    dojo.byId("idTagAditivoBolsa").style.display = "none";
    dojo.byId("tagDescontos").style.display = "none";


    dojo.byId('tdLabelTifpoFinanceiro').style.display = "none";
    dojo.byId('tdTifpoFinanceiro').style.display = "none";
    dijit.byId("tipoFinanceiroAditamento").set("required", false);

    dojo.byId('tdLabelTifpoFinanceiroDisabled').style.display = "";
    dojo.byId('tdTifpoFinanceiroDisabled').style.display = "";
}

function bloquearCamposQuandoExistirIdAditamento() {
    dijit.byId('tipoAditamento').set("disabled", true);
    dijit.byId('dtInicioAditamento').set("disabled", true);
    dijit.byId('dtAdtVencInicial').set("disabled", true);
}

function pesquisarMovimentoFKVincularMaterial(limparItens) {
    require([
        "dojo/store/JsonRest",
        "dojo/data/ObjectStore",
        "dojo/store/Cache",
        "dojo/store/Memory",
        "dojo/domReady!",
        "dojo/parser"
    ], function (JsonRest, ObjectStore, Cache, Memory) {
        try {
            debugger
            var grid = dijit.byId("gridPesquisaMovtoFK");
            var idNatMvot = (dojo.byId('id_natureza_movto') != null && dojo.byId('id_natureza_movto') != undefined && hasValue(dojo.byId('id_natureza_movto').value)) ? dojo.byId('id_natureza_movto').value : 0;
            var cdPessoaPesq = hasValue(dojo.byId("cdPessoaPesqFK").value) ? dojo.byId("cdPessoaPesqFK").value : 0;
            var cdItem = hasValue(dojo.byId("cdItemFK").value) ? dojo.byId("cdItemFK").value : 0;
            var cdPlanoContaPesq = hasValue(dojo.byId("cdPlanoContaPesqFK").value) ? dojo.byId("cdPlanoContaPesqFK").value : 0;
            var numeroPesq = hasValue(dojo.byId("numeroPesqFK").value) ? dojo.byId("numeroPesqFK").value : 0;
            var serie = hasValue(dojo.byId("numeroSeriePesqFK").value) ? dojo.byId("numeroSeriePesqFK").value : "";
            var material_didatico_vincular_material = dijit.byId("ckMaterialDidaticoFiltroVincularMaterial") != null && dijit.byId("ckMaterialDidaticoFiltroVincularMaterial") != undefined ? dijit.byId("ckMaterialDidaticoFiltroVincularMaterial").checked : false;
            var nota_fiscal_vincular_material = dijit.byId("ckNotaFiscalFiltroVincularMaterial") != null && dijit.byId("ckNotaFiscalFiltroVincularMaterial") != undefined ? dijit.byId("ckNotaFiscalFiltroVincularMaterial").checked : false;
            if (!dijit.byId('ckEmissaoFK').checked && !dijit.byId('ckMovimentoFK').checked)
                dijit.byId('ckMovimentoFK').set("checked", true);
            var cd_curso = dijit.byId('gridTurmaMat').itensSelecionados[0].cd_curso;
            var myStore =
                Cache(
                    JsonRest({
                        target: Endereco() + "/api/fiscal/getMovimentoSearchFKVincularMaterial?cd_pessoa=" + parseInt(cdPessoaPesq) +
                            "&cd_item=" + parseInt(cdItem) + "&cd_plano_conta=" + parseInt(cdPlanoContaPesq) + "&numero=" + parseInt(numeroPesq) + "&serie=" + serie +
                            "&emissao=" + document.getElementById("ckEmissaoFK").checked + "&movimento=" + document.getElementById("ckMovimentoFK").checked +
                            "&dtInicial=" + dojo.byId("dtaInicialFK").value + "&dtFinal=" + dojo.byId("dtaFinalFK").value + "&natMovto=" + idNatMvot + 
                            "&material_didatico_vincular_material=" + material_didatico_vincular_material + "&nota_fiscal_vincular_material=" + nota_fiscal_vincular_material +
                            "&cd_curso=" + cd_curso,
                        handleAs: "json",
                        preventCache: true,
                        headers: { "Accept": "application/json", "Authorization": Token() }
                    }), Memory({}));
            var dataStore = new ObjectStore({ objectStore: myStore });
            if (limparItens)
                grid.itensSelecionados = [];

            grid.setStore(dataStore);
        }
        catch (e) {
            postGerarLog(e);
        }
    });
}

function retornaFKMovto() {
    try {
        var valido = true;
        var gridMovtoFK = dijit.byId("gridPesquisaMovtoFK");
        if (!hasValue(gridMovtoFK.itensSelecionados))
            gridMovtoFK.itensSelecionados = [];
        if (!hasValue(gridMovtoFK.itensSelecionados) || gridMovtoFK.itensSelecionados.length <= 0 || gridMovtoFK.itensSelecionados.length > 1) {
            if (gridMovtoFK.itensSelecionados != null && gridMovtoFK.itensSelecionados.length <= 0)
                caixaDialogo(DIALOGO_AVISO, msgNotSelectReg, null);
            if (gridMovtoFK.itensSelecionados != null && gridMovtoFK.itensSelecionados.length > 1)
                caixaDialogo(DIALOGO_AVISO, msgMaisDeUmRegSelect, null);
            valido = false;
        }
        else {
            dojo.byId("cd_nfDev").value = gridMovtoFK.itensSelecionados[0].cd_movimento;
            dijit.byId("tpNfDev").set("value", gridMovtoFK.itensSelecionados[0].dc_numero_serie == "" ? "S/N" : gridMovtoFK.itensSelecionados[0].dc_numero_serie);
            $("#id_tipo_movimento").val(gridMovtoFK.itensSelecionados[0].id_tipo_movimento);
            dijit.byId("limparNFDev").set("disabled", false);
            
        }
        if (!valido)
            return false;
        dijit.byId("proMvtoFK").hide();
    }
    catch (e) {
        postGerarLog(e);
    }
}

function abrirPessoaFK(isPesquisa) {
    try {
        limparPesquisaPessoaFK();
        if (isPesquisa) pesquisaPessoaFKMovimento();
        else {
            dojo.byId("_nomePessoaFK").value = 'a';
            dijit.byId("inicioPessoaFK").set('checked', true);
            pesquisaPessoaCadFK();
        }
        dijit.byId("fkPessoaPesq").show();
        apresentaMensagem('apresentadorMensagemProPessoa', null);
    }
    catch (e) {
        postGerarLog(e);
    }
}


function pesquisaPessoaCadFK() {
    require([
        "dojo/store/JsonRest",
        "dojo/data/ObjectStore",
        "dojo/store/Cache",
        "dojo/store/Memory",
        "dojo/ready",
        "dojo/domReady!",
        "dojo/parser"],
        function (JsonRest, ObjectStore, Cache, Memory, ready) {
            ready(function () {
                try {
                    var cd_pessoa_aluno = dojo.byId("cdPessoaAlunoFKMovimento") != null && dojo.byId("cdPessoaAlunoFKMovimento") != undefined && hasValue(dojo.byId("cdPessoaAlunoFKMovimento").value) ? dojo.byId("cdPessoaAlunoFKMovimento").value : 0;
                    var SAIDA
                    var TIPOMOVIMENTO = SAIDA;
                    if (TIPOMOVIMENTO == SAIDA && cd_pessoa_aluno > 0) {
                        var myStore = dojo.store.Cache(
                            dojo.store.JsonRest({
                                target: Endereco() + "/api/Pessoa/GetPessoaResponsavelSearch?nome=" + dojo.byId("_nomePessoaFK").value +
                                    "&apelido=" + dojo.byId("_apelido").value + "&inicio=" + document.getElementById("inicioPessoaFK").checked +
                                    "&tipoPessoa=" + dijit.byId("tipoPessoaFK").value +
                                    "&cnpjCpf=" + dojo.byId("CnpjCpf").value + "&cdPai=" + cd_pessoa_aluno +
                                    "&sexo=" + dijit.byId("sexoPessoaFK").value + "&papel=0",
                                handleAs: "json",
                                headers: { "Accept": "application/json", "Authorization": Token() }
                            }), dojo.store.Memory({}));
                        dataStore = new dojo.data.ObjectStore({ objectStore: myStore });
                        var grid = dijit.byId("gridPesquisaPessoa");
                        grid.setStore(dataStore);
                    } else {
                        var myStore = Cache(
                            JsonRest({
                                target: Endereco() + "/api/pessoa/getTdsPessoaSearchEscolaCadMovimento?nome=" + encodeURIComponent(dojo.byId("_nomePessoaFK").value) +
                                    "&apelido=" + dojo.byId("_apelido").value + "&inicio=" + document.getElementById("inicioPessoaFK").checked +
                                    "&tipoPessoa=" + dijit.byId("tipoPessoaFK").value +
                                    "&cnpjCpf=" + dojo.byId("CnpjCpf").value +
                                    "&sexo=" + dijit.byId("sexoPessoaFK").value,
                                handleAs: "json",
                                headers: { "Accept": "application/json", "Authorization": Token() }
                            }), Memory({}));

                        dataStore = new ObjectStore({ objectStore: myStore });
                        var grid = dijit.byId("gridPesquisaPessoa");
                        grid.setStore(dataStore);
                    }
                }
                catch (e) {
                    postGerarLog(e);
                }
            });
        });
}


function retornarPessoa() {
    try {
        var valido = true;
        var gridPessoaSelec = dijit.byId("gridPesquisaPessoa");
        if (!hasValue(gridPessoaSelec.itensSelecionados))
            gridPessoaSelec.itensSelecionados = [];
        if (!hasValue(gridPessoaSelec.itensSelecionados) || gridPessoaSelec.itensSelecionados.length <= 0 || gridPessoaSelec.itensSelecionados.length > 1) {
            if (gridPessoaSelec.itensSelecionados != null && gridPessoaSelec.itensSelecionados.length <= 0)
                caixaDialogo(DIALOGO_AVISO, msgNotSelectReg, null);
            if (gridPessoaSelec.itensSelecionados != null && gridPessoaSelec.itensSelecionados.length > 1)
                caixaDialogo(DIALOGO_AVISO, msgMaisDeUmRegSelect, null);
            valido = false;
        }
        else {

            $("#cdPessoaPesqFK").val(gridPessoaSelec.itensSelecionados[0].cd_pessoa);
            dijit.byId("noPessoaPesqFK").set("value", gridPessoaSelec.itensSelecionados[0].no_pessoa);
            dijit.byId("limparPessoaRelPosPesFK").set("disabled", false);
                
            
        }

        if (!valido)
            return false;
        dijit.byId("fkPessoaPesq").hide();
    }
    catch (e) {
        postGerarLog(e);
    }
}

function chamarPesquisaItemFK(tipoPesquisa, xhr, Memory, FilteringSelect, array, ready, kit) {
    try {
        

        if (tipoPesquisa == PESQUISA)
            abrirItemFK(xhr, Memory, FilteringSelect, array, kit);
        else
            abrirItemFKCadastro(xhr, ready, Memory, array, true);
    }
    catch (e) {
        postGerarLog(e);
    }
}

function abrirItemFK(xhr, Memory, FilteringSelect, array, kit) {
    try {
        populaTipoItem("tipo", xhr, Memory, array, TIPOMOVIMENTO, null, kit);
        pesquisarItemEstoqueFK();
        
            showP('comEstoqueTitulo', true);
            showP('comEstoqueCampo', true);
        
        
        dijit.byId("fkItem").show();
    }
    catch (e) {
        postGerarLog(e);
    }
}


function pesquisarItemEstoqueFK() {
    require([
        "dojo/store/JsonRest",
        "dojo/data/ObjectStore",
        "dojo/store/Cache",
        "dojo/store/Memory"
    ], function (JsonRest, ObjectStore, Cache, Memory) {
        try {
            
            TIPOMOVIMENTO = SAIDA;
            var grupoItem = hasValue(dijit.byId("grupoPes").value) ? dijit.byId("grupoPes").value : null;
            var tipoItemInt = hasValue(dijit.byId("tipo").value) ? dijit.byId("tipo").value : null;
            var id_natureza = 0;
            myStore = Cache(
                JsonRest({
                        target: Endereco() + "/fiscal/getItemMovimentoSearch?desc=" + encodeURIComponent(document.getElementById("pesquisaItemServico").value) + "&inicio=" + document.getElementById("inicioItemServico").checked + "&status=" +
                            retornaStatus("statusItemFK") + "&tipoItemInt=" + tipoItemInt + "&grupoItem=" + grupoItem + "&id_tipo_movto=" + TIPOMOVIMENTO +
                            "&comEstoque=" + document.getElementById("comEstoque").checked + "&id_natureza_TPNF=" + parseInt(id_natureza) + "&kit=" + document.getElementById("kit").checked,
                        handleAs: "json",
                        headers: { "Accept": "application/json", "Content-Type": "application/json", "Authorization": Token() },
                        idProperty: "cd_item"
                    }
                ), Memory({ idProperty: "cd_item" }));
            dataStore = new ObjectStore({ objectStore: myStore });
            var grid = dijit.byId("gridPesquisaItem");
            grid.setStore(dataStore);
        }
        catch (e) {
            postGerarLog(e);
        }
    });
}

function consultarPessoaMovimento() {
    try {
        
        apresentaMensagem("apresentadorMensagemProPessoa", null);
        pesquisaPessoaFKMovimento(true);
        
    }
    catch (e) {
        postGerarLog(e);
    }
}

function pesquisaPessoaFKMovimento() {
    require([
            "dojo/store/JsonRest",
            "dojo/data/ObjectStore",
            "dojo/store/Cache",
            "dojo/store/Memory",
            "dojo/ready"],
        function (JsonRest, ObjectStore, Cache, Memory, ready) {
            ready(function () {
                try {
                    var myStore = Cache(
                        JsonRest({
                            target: Endereco() + "/api/aluno/getPessoaMovimentoSearch?nome=" + encodeURIComponent(dojo.byId("_nomePessoaFK").value) +
                                "&apelido=" + dojo.byId("_apelido").value + "&inicio=" + document.getElementById("inicioPessoaFK").checked +
                                "&tipoPessoa=" + dijit.byId("tipoPessoaFK").value +
                                "&cnpjCpf=" + dojo.byId("CnpjCpf").value +
                                "&sexo=" + dijit.byId("sexoPessoaFK").value + "&tipoMovimento=" + SAIDA,
                            handleAs: "json",
                            headers: { "Accept": "application/json", "Authorization": Token() }
                        }), Memory({}));

                    dataStore = new ObjectStore({ objectStore: myStore });
                    var grid = dijit.byId("gridPesquisaPessoa");
                    grid.setStore(dataStore);
                }
                catch (e) {
                    postGerarLog(e);
                }
            });
        });
}


function retornarItemFK() {
    try {
        var parametrosTela = getParamterosURL();

        var gridPesquisaItem = dijit.byId("gridPesquisaItem");
        if (!hasValue(gridPesquisaItem.itensSelecionados) || gridPesquisaItem.itensSelecionados.length <= 0)
            caixaDialogo(DIALOGO_AVISO, msgNotSelectReg, null);
        else if (gridPesquisaItem.itensSelecionados.length > 1)
            caixaDialogo(DIALOGO_ERRO, 'Selecione apenas um registro.', null);
        else {
            dojo.byId("cdItemFK").value = gridPesquisaItem.itensSelecionados[0].cd_item;
            dojo.byId("noItemPesqFK").value = gridPesquisaItem.itensSelecionados[0].no_item;
            dijit.byId("limparItemFK").set("disabled", false);


        }
        limparPesquisaCursoFK(false);
        dijit.byId("fkItem").hide();
    }
    catch (e) {
        postGerarLog(e);
    }
}

